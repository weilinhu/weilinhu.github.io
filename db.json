{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/uploads/tuzi.jpg","path":"uploads/tuzi.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"20038353db532b4c40625419d396da7359f89cbe","modified":1464515051153},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1464515051153},{"_id":"themes/next/.gitignore","hash":"63d003fa46cf9665b4dab1786f9dc694812a5a79","modified":1464515051153},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1464515051153},{"_id":"themes/next/.javascript_ignore","hash":"beb0b95736650284ceb712a162cc033847a83cd3","modified":1464515051169},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1464515051169},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1464515051169},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1464515051169},{"_id":"themes/next/_config.yml","hash":"f43b0a70bfe52ea5de75b1206f47427f61d2af24","modified":1464518598498},{"_id":"themes/next/bower.json","hash":"da39b00fcdf2e7a42af412de0a4d3617cc6d7084","modified":1464515051169},{"_id":"themes/next/gulpfile.coffee","hash":"4e8c1082fa82e383494ff5b5963b7936d9c7bb2e","modified":1464515051169},{"_id":"themes/next/package.json","hash":"95eaba1607544965e432d56406bae391dd11bcbb","modified":1464515051200},{"_id":"source/dsf/index.md","hash":"669350de72727f150dc7d117f229fb5593daa904","modified":1464511312932},{"_id":"source/_posts/Android-View的绘制.md","hash":"b60f5d1c2f7b721a51edf8d1e8ab1e008ff6042b","modified":1464611003266},{"_id":"source/_posts/Android线程.md","hash":"dbfc483a6bd355314825b9fb3e8f5b83b8e4da1e","modified":1464618649340},{"_id":"source/_posts/Bitmap缩放技巧总结.md","hash":"f237bda17e454a390b248a4cc39da7403bacf319","modified":1464618883880},{"_id":"source/_posts/Drawable、Bitmap、String、InputStream、Bitmap、byte数组互转.md","hash":"789379d859e47cd0507b43b7164d20927ac08b01","modified":1464620116669},{"_id":"source/_posts/Handler消息传递机制.md","hash":"48fd024eb88c74ad1e26780f80e8be6fb30c1815","modified":1464618331178},{"_id":"source/_posts/Surfaceview.md","hash":"86d3a2bf94780f58bf91eb8723c62407b7921545","modified":1464620256166},{"_id":"source/_posts/View事件处理.md","hash":"f2d9c838047b4e9dbf5a6572742c79f685d4af78","modified":1464610507398},{"_id":"source/_posts/自定义View的疑问.md","hash":"94efa1d693e579ed71d157562a2978e1d2ab09e1","modified":1464610508176},{"_id":"source/tags/index.md","hash":"161891a3315cdf750346bfbd07f720dd4d11ec64","modified":1464610733365},{"_id":"source/uploads/tuzi.jpg","hash":"12bb45a9ecd7aea706dec43fcafba4378993a2e4","modified":1464518191237},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1464515051138},{"_id":"themes/next/.git/config","hash":"340cff4364d9733a32042fdb93097c334a781c93","modified":1464515051153},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1464515010269},{"_id":"themes/next/.git/index","hash":"e546c21ac6f5af73dcd015d0bbf722c3daa9e336","modified":1464515051310},{"_id":"themes/next/.git/packed-refs","hash":"be447428f5e503aeedaed06e24f93e3e913f87fc","modified":1464515051138},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1464515051153},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2692e36cc35b1594530981e7727771f601720a43","modified":1464515051153},{"_id":"themes/next/languages/default.yml","hash":"d2f6784b9c6567b64e58736e36025dbf96d863d4","modified":1464515051169},{"_id":"themes/next/languages/de.yml","hash":"4c3ffeb0d214c807a226dd98214958cb5483df1c","modified":1464515051169},{"_id":"themes/next/languages/en.yml","hash":"df81ab6b1cf3c88ed053d3766381cd12eb659fe3","modified":1464515051169},{"_id":"themes/next/languages/fr-FR.yml","hash":"d8a40fe025fad6f42df0cf16d4be2d513769b062","modified":1464515051169},{"_id":"themes/next/languages/id.yml","hash":"19537c8bae42c4c2e7d06a64537e8dfd503b7e19","modified":1464515051169},{"_id":"themes/next/languages/ja.yml","hash":"e594aa42a33c489e4a65065659a01bb76c3c0cb5","modified":1464515051169},{"_id":"themes/next/languages/pt.yml","hash":"4c64594f477905d5d2d9ca2422f03175b7b0c617","modified":1464515051169},{"_id":"themes/next/languages/ru.yml","hash":"c3aedb94decf05a301662afc3398ab563dd9995a","modified":1464515051169},{"_id":"themes/next/languages/zh-Hans.yml","hash":"23b45e77c1846c9457b98c745a60a9461678c389","modified":1464515051169},{"_id":"themes/next/languages/zh-hk.yml","hash":"88e603eb0f3fd25c35bb37bd30372fd77bba7c46","modified":1464515051169},{"_id":"themes/next/languages/zh-tw.yml","hash":"04479b419c72b71fd34046f3fc33ebda4fe8de84","modified":1464515051169},{"_id":"themes/next/layout/_layout.swig","hash":"1138b849e1240249480849cc2b6c6d09b28207a5","modified":1464515051169},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1464515051200},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1464515051200},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1464515051200},{"_id":"themes/next/layout/page.swig","hash":"a91e3fd7aef26e8a02e339e3372801c517f400cf","modified":1464515051200},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1464515051200},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1464515051200},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1464515051200},{"_id":"themes/next/test/.jshintrc","hash":"1dae9d1cf7df1ae6d5c5efd6cffb949e9b8dcebb","modified":1464515051310},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1464515051310},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1464515051310},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1464515051263},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1464515010284},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1464515010269},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1464515010284},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1464515010284},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1464515010284},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1464515010284},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1464515010300},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1464515010300},{"_id":"themes/next/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1464515010300},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1464515010300},{"_id":"themes/next/.git/logs/HEAD","hash":"779dbc2c5e5de91554109cf26eef73f838833203","modified":1464515051138},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1464515051169},{"_id":"themes/next/layout/_macro/post.swig","hash":"843389ec3cb4c2baa6a6a2bb916f803c89ca723b","modified":1464515051169},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1464515051169},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9fc9f89c169439d7584197930359b758eb198a1c","modified":1464515051169},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"d569af20d20a960d534a5b60f90c20fef519d351","modified":1464515051169},{"_id":"themes/next/layout/_partials/comments.swig","hash":"325dd5923d845a539fc0524ca72ce40edd1e516a","modified":1464515051169},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1464515051185},{"_id":"themes/next/layout/_partials/footer.swig","hash":"27669118b957e8a39d843b63dddf561c9d62b336","modified":1464515051185},{"_id":"themes/next/layout/_partials/head.swig","hash":"0065ae49406ade2848b86bd4cd520af9d2148ece","modified":1464515051185},{"_id":"themes/next/layout/_partials/header.swig","hash":"46f8bbe51c0334c64c3a237bc0fe8ef73c6e58e1","modified":1464515051185},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1464515051185},{"_id":"themes/next/layout/_partials/search.swig","hash":"95b55fe35f2d2c22f2cc055d4379b5435314c7ec","modified":1464515051185},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c5db707b46eac6a5df1d2a77f8556945a66fd181","modified":1464515051185},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1464515051185},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1464515051185},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1464515051200},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1464515051200},{"_id":"themes/next/scripts/tags/full-image.js","hash":"86194a05a8c6499de0b2aaa525d6de135778c0ae","modified":1464515051200},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1464515051200},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1464515051263},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1464515051263},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1464515051263},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1464515051263},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1464515051263},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1464515051263},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1464515051263},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1464515051263},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1464515051263},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1464515051263},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1464515051263},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1464515051263},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1464515051263},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1464515051263},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1464515051185},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1464515051185},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1464515051247},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1464515051247},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1464515051247},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1464515051247},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1464515051263},{"_id":"themes/next/.git/refs/heads/master","hash":"fc518af540f4e61202cb7bffda64042b1fc9b0a0","modified":1464515051138},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1464515051185},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1464515051185},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1464515051185},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1464515051185},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"bf8e9223a40748b2e3ef77d753a8e1dbbce8095e","modified":1464515051185},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"3fdde03f45a80f7a85097a40b40358adde618fc7","modified":1464515051185},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1464515051185},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1464515051185},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1464515051185},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1464515051185},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"91c5353fcb94cc3b3f265b06ad2341734bc4c826","modified":1464515051185},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"8ba01f1ac07fbca62a4b00f5a0a3a506122c1530","modified":1464515051200},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"3bb70d8d68142ee27f3cc98c2a4339757e7af3d3","modified":1464515051200},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"5bd98c26cc188a2a30504d1330a0eaae34034db0","modified":1464515051200},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"4a5c6df1579a4ca72ed17f7dbd6d16a509aa7dc8","modified":1464515051200},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1464515051200},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1464515051247},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1464515051247},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1464515051247},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1464515051247},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"b8e3663996b39590509d843f674360872b0242ac","modified":1464515051247},{"_id":"themes/next/source/css/_variables/base.styl","hash":"a7ae72e846393493385275d934eaa78534d9834c","modified":1464515051247},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1464515051263},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1464515051263},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1464515051279},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1464515051279},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1464515051279},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1464515051279},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"bb093f2ac1f1305069d873a7941324c8e0de3135","modified":1464515051279},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1464515051279},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1464515051279},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1464515051279},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1464515051294},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1464515051294},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1464515051310},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1464515051310},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1464515051310},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1464515051310},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1464515051310},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1464515051310},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1464515051263},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1464515051263},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1464515051263},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1464515051263},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1464515051263},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1464515051263},{"_id":"themes/next/source/js/src/utils.js","hash":"418d09eb4df5dcc5e8d13d7f6245b1888200b51c","modified":1464515051263},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1464515051310},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1464515051310},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1464515051310},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1464515051310},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1464515051310},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1464515051294},{"_id":"themes/next/.git/objects/pack/pack-e4dfe9362d435776264d3b11a19d603e9b6b4344.idx","hash":"5ecd3197ae28c6d13ebd9e9da47378e7cbe9156d","modified":1464515050888},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1464515051138},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"779dbc2c5e5de91554109cf26eef73f838833203","modified":1464515051138},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1464515051185},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1464515051185},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"096e7a6958b3bcacaa94361266832871ccb989c0","modified":1464515051200},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"61347b9cf5c42a02f28cda4b6d920d6d17099d44","modified":1464515051200},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1464515051200},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1464515051200},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"f8b6a3017ab79057ce99f1ccb512193d67f4a35f","modified":1464515051200},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"2338be12ffee58bc08197cb9da8aaf31737aaf5c","modified":1464515051200},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1464515051216},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1464515051216},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1464515051216},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1464515051216},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1464515051216},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1464515051232},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1464515051232},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1464515051232},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1464515051232},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1464515051232},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1464515051247},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1464515051247},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1464515051247},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1464515051247},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1464515051247},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1464515051247},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1464515051247},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1464515051247},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1464515051247},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"124b540f059fd1ed13514362007cfc70355278c6","modified":1464515051247},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1464515051247},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"13af2fb21fabfc4df4b577ce5363e13d03daff71","modified":1464515051247},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1464515051247},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1464515051247},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1464515051247},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1464515051247},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1464515051247},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"2182a6da3434a6fd4d03ab1592c645d3d3c88500","modified":1464515051247},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1464515051247},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1464515051247},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1464515051247},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1464515051263},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1464515051263},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1464515051279},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1464515051279},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1464515051279},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1464515051279},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1464515051279},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1464515051279},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1464515051279},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1464515051279},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1464515051279},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1464515051294},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1464515051294},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1464515051294},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1464515051294},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"a9d064d600ee35acd66508167e1ac8c6cfdbdcd8","modified":1464515051263},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1464515051310},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1464515051310},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1464515051294},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1464515051294},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1464515051294},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1464515051310},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"779dbc2c5e5de91554109cf26eef73f838833203","modified":1464515051138},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1464515051216},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1464515051216},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1464515051216},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1464515051216},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1464515051216},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1464515051216},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"12e366f04497e3f44388fd40111a03e02f7c26af","modified":1464515051216},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"70ec8d38d2b3ee1906793d1dcb68032adfa65f03","modified":1464515051216},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1464515051216},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1464515051216},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"b8f9c95702e87fd0b170ab586c82c9718a245f8a","modified":1464515051216},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1464515051216},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1464515051216},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1464515051216},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1464515051216},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1464515051216},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ca20affaeaf33c0904cb6356864fc6b78e95f447","modified":1464515051216},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1464515051216},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"929fac3a505bacbce6ba63009fd15851e2a8669d","modified":1464515051216},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1464515051216},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1464515051216},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1464515051216},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1464515051232},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"681b7c8ce4dc47130a0ca67c1ec62be7c96e4c4f","modified":1464515051232},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1464515051232},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1464515051232},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1464515051232},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1464515051232},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1464515051232},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1464515051232},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1464515051232},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1464515051232},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1464515051232},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1464515051232},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1464515051232},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1464515051232},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"a83f493e494f5c73fab8f6f5b686ef1670490095","modified":1464515051232},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1464515051232},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1464515051232},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1464515051232},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1464515051232},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"dcb4548d07cbb38b645b1753cf3ee7157e16921a","modified":1464515051232},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7bd182d918f3117335a5ee87a1b544e6d2b54d7d","modified":1464515051232},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1464515051247},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1464515051247},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1464515051247},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1464515051279},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1464515051279},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1464515051279},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1464515051279},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1464515051279},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1464515051279},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1464515051294},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1464515051294},{"_id":"themes/next/.git/objects/pack/pack-e4dfe9362d435776264d3b11a19d603e9b6b4344.pack","hash":"596e63435454fcccb7cb3b6ee8b6e5c9c2e1c1be","modified":1464515050950},{"_id":"public/dsf/index.html","hash":"ed9132d87986208fcf33d355be414e5bb2ae68d7","modified":1464620267917},{"_id":"public/tags/index.html","hash":"355d873a9bffc0f0068ae381cf1e050b584aa62e","modified":1464620267917},{"_id":"public/Handler消息传递机制/index.html","hash":"f1b8ef642c0085d74c4a279ef4621762a6e41162","modified":1464620267918},{"_id":"public/archives/2016/index.html","hash":"77400f8f5337cec34ea8ab6034bae4f36c5e1a5f","modified":1464620267918},{"_id":"public/archives/index.html","hash":"16b9f5fd37011534f544e7fa3ced11fb9e970d5c","modified":1464620267918},{"_id":"public/archives/2016/05/index.html","hash":"7a9ba4821fb05f5fb84a4dd274fe4d407975ffa3","modified":1464620267918},{"_id":"public/categories/性能优化/index.html","hash":"0e16d004b984b272a3dd7f173dcbf75d2161e65a","modified":1464620267918},{"_id":"public/categories/Utils/index.html","hash":"aaca898e78a332a0edd64d8805a793e600d028f2","modified":1464620267919},{"_id":"public/categories/View/index.html","hash":"697491978a506513c71951c259a7bb5e1270176f","modified":1464620267919},{"_id":"public/categories/Andoroid通信/index.html","hash":"dc696d792fa839d126160308768c169eed1ce4be","modified":1464620267920},{"_id":"public/tags/Bitmap/index.html","hash":"16493005a03492d8abf3876ec2a21ebe6af2482e","modified":1464620267920},{"_id":"public/tags/View/index.html","hash":"2406e85e2d15c9870cfdeaa40f76122d0bf77c10","modified":1464620267922},{"_id":"public/tags/线程/index.html","hash":"c789d7d92fbcdcd002f244204a6381884173bf3a","modified":1464620267923},{"_id":"public/tags/Drawable/index.html","hash":"7c3f2b2fba1b2d4d1582ac09c8101539d7f7dc14","modified":1464620267923},{"_id":"public/tags/Handler/index.html","hash":"1e7f92a855231676786c112b6947f6474f322329","modified":1464620267923},{"_id":"public/Drawable、Bitmap、String、InputStream、Bitmap、byte数组互转/index.html","hash":"cb2f17c6355ec965261ce9e545e3866f6b63b76e","modified":1464620267924},{"_id":"public/Bitmap缩放技巧总结/index.html","hash":"8f815e676805ee4e7a3d39021bb2b59cdbfc1b87","modified":1464620267924},{"_id":"public/Android线程/index.html","hash":"215195fa1a0580e4b2f59eba3e3eb5816b5e147f","modified":1464620267924},{"_id":"public/Android-View的绘制/index.html","hash":"7c4218e3ed6c14e50d79e09fcc1a51dfa18a39a7","modified":1464620267924},{"_id":"public/自定义View的疑问/index.html","hash":"3157763b8a49afe945867119eb14717070757432","modified":1464620267924},{"_id":"public/View事件处理/index.html","hash":"aae34354d48b5932d36f2926d1ed29bcfebd804f","modified":1464620267925},{"_id":"public/index.html","hash":"90f72d0b00a93f3c6fda1045c697075515172f66","modified":1464620267925},{"_id":"public/Surfaceview/index.html","hash":"52e86ecb8cbd8efd24d10abdb2fb907e300d423e","modified":1464620267966},{"_id":"public/uploads/tuzi.jpg","hash":"12bb45a9ecd7aea706dec43fcafba4378993a2e4","modified":1464620267980},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1464620267980},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1464620267980},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1464620267981},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1464620267981},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1464620267981},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1464620267981},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1464620267981},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1464620267981},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1464620267981},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1464620267981},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1464620267982},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1464620267982},{"_id":"public/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1464620267982},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1464620267982},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1464620267982},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1464620267982},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1464620267982},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1464620267982},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1464620267982},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1464620267983},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1464620267983},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1464620267983},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1464620267983},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1464620267983},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1464620269965},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1464620269983},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1464620269985},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1464620270058},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1464620270058},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1464620270058},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1464620270058},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1464620270058},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1464620270058},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1464620270058},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1464620270059},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1464620270059},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1464620270059},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1464620270059},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1464620270059},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1464620270059},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1464620270060},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1464620270060},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1464620270060},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1464620270060},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1464620270060},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1464620270060},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1464620270060},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1464620270060},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1464620270060},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1464620270060},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1464620270060},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1464620270060},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1464620270060},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1464620270060},{"_id":"public/css/main.css","hash":"919c4bf720b01832623b6eba53b920ea26a48e43","modified":1464620270060},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1464620270060},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1464620270060},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1464620270060},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1464620270060},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1464620270060},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1464620270060},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1464620270060},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1464620270060},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1464620270060},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1464620270060},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1464620270146}],"Category":[{"name":"性能优化","_id":"ciou5386b0005f0vcogvi15ep"},{"name":"View","_id":"ciou5386v000af0vcfphm21ti"},{"name":"Utils","_id":"ciou5387w000lf0vc6b06atrl"},{"name":"Andoroid通信","_id":"ciou53881000sf0vcfpgmvvi9"}],"Data":[],"Page":[{"title":"dsf","date":"2016-05-29T08:41:52.000Z","_content":"","source":"dsf/index.md","raw":"---\ntitle: dsf\ndate: 2016-05-29 16:41:52\n---\n","updated":"2016-05-29T08:41:52.932Z","path":"dsf/index.html","comments":1,"layout":"page","_id":"ciou5385c0000f0vc85wouh7r","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-05-30T12:18:25.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-05-30 20:18:25\ntype: \"tags\"\n---\n","updated":"2016-05-30T12:18:53.365Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ciou5385u0002f0vc6wz1ptqx","content":"","excerpt":"","more":""}],"Post":[{"title":"Bitmap缩放技巧总结","toc":true,"date":"2016-05-30T14:33:03.000Z","_content":"1.使用BitmapFactory.Options来控制缩放比例，降低图片色彩模式\n```\nBitmapFactory.Options options = new BitmapFactory.Options();\n  options.inJustDecodeBounds = true;\n  // 获取这个图片的宽和高\n  Bitmap bitmap = BitmapFactory.decodeFile(path, options); // 此时返回bm为空\n  options.inJustDecodeBounds = false;\n  // 计算缩放比\n  int be = (int) (options.outHeight / (float) 200);\n  if (be <= 0)\n   be = 1;\n  options.inSampleSize = 2; // 图片长宽各缩小二分之一\n  //每个像素占据2个字节\n  options.inPreferredConfig = Bitmap.Config.RGB_565;\n  // 重新读入图片，注意这次要把options.inJustDecodeBounds 设为 false哦\n  bitmap = BitmapFactory.decodeFile(path, options);\n由于只是对bitmap加载到内存一次，所以效率比较高。解析速度快\n```\n<!-- more-->\n2.Bitmap+Matrix\n```\npublic static Bitmap zoomBitmap(Bitmap bitmap, int width, int height) {\n        if (bitmap == null) {\n            return null;\n        }\n    int w = bitmap.getWidth();\n        int h = bitmap.getHeight();\n        Matrix matrix = new Matrix();\n        float scaleWidth = ((float) width / w);\n        float scaleHeight = ((float) height / h);\n        matrix.postScale(scaleWidth, scaleHeight);\n        Bitmap newbmp = Bitmap.createBitmap(bitmap, 0, 0, w, h, matrix, true);\n        return newbmp;\n    }\n ```\n \n> 对于Drawable、Bitmap、Canvas和Paint它们之间的概念不是很清楚，其实它们除了Drawable外早在Sun的J2ME中就已经出现了，但是在Android平台中，Bitmap、Canvas相关的都有所变化。\n  首先让我们理解下Android平台中的显示类是View，但是还提供了底层图形类android.graphics，今天所说的这些均为graphics底层图形接口。\n  Bitmap - 称作位图，一般位图的文件格式后缀为bmp，当然编码器也有很多如RGB565、RGB888。作为一种逐像素的显示对象执行效率高，但是缺点也很明显存储效率低。我们理解为一种存储对象比较好。\n  Drawable - 作为Android平下通用的图形对象，它可以装载常用格式的图像，比如GIF、PNG、JPG，当然也支持BMP，当然还提供一些高级的可视化对象，比如渐变、图形等。\n  Canvas - 名为画布，我们可以看作是一种处理过程，使用各种方法来管理Bitmap、GL或者Path路径，同时它可以配合Matrix矩阵类给图像做旋转、缩放等操作，同时Canvas类还提供了裁剪、选取等操作。\n   Paint - 我们可以把它看做一个画图工具，比如画笔、画刷。他管理了每个画图工具的字体、颜色、样式。\n  如果涉及一些Android游戏开发、显示特效可以通过这些底层图形类来高效实现自己的应用。\n  \n  \n\n\n","source":"_posts/Bitmap缩放技巧总结.md","raw":"---\ntitle: Bitmap缩放技巧总结\ntoc: true\ndate: 2016-05-30 22:33:03\ntags: Bitmap\ncategories: 性能优化\n---\n1.使用BitmapFactory.Options来控制缩放比例，降低图片色彩模式\n```\nBitmapFactory.Options options = new BitmapFactory.Options();\n  options.inJustDecodeBounds = true;\n  // 获取这个图片的宽和高\n  Bitmap bitmap = BitmapFactory.decodeFile(path, options); // 此时返回bm为空\n  options.inJustDecodeBounds = false;\n  // 计算缩放比\n  int be = (int) (options.outHeight / (float) 200);\n  if (be <= 0)\n   be = 1;\n  options.inSampleSize = 2; // 图片长宽各缩小二分之一\n  //每个像素占据2个字节\n  options.inPreferredConfig = Bitmap.Config.RGB_565;\n  // 重新读入图片，注意这次要把options.inJustDecodeBounds 设为 false哦\n  bitmap = BitmapFactory.decodeFile(path, options);\n由于只是对bitmap加载到内存一次，所以效率比较高。解析速度快\n```\n<!-- more-->\n2.Bitmap+Matrix\n```\npublic static Bitmap zoomBitmap(Bitmap bitmap, int width, int height) {\n        if (bitmap == null) {\n            return null;\n        }\n    int w = bitmap.getWidth();\n        int h = bitmap.getHeight();\n        Matrix matrix = new Matrix();\n        float scaleWidth = ((float) width / w);\n        float scaleHeight = ((float) height / h);\n        matrix.postScale(scaleWidth, scaleHeight);\n        Bitmap newbmp = Bitmap.createBitmap(bitmap, 0, 0, w, h, matrix, true);\n        return newbmp;\n    }\n ```\n \n> 对于Drawable、Bitmap、Canvas和Paint它们之间的概念不是很清楚，其实它们除了Drawable外早在Sun的J2ME中就已经出现了，但是在Android平台中，Bitmap、Canvas相关的都有所变化。\n  首先让我们理解下Android平台中的显示类是View，但是还提供了底层图形类android.graphics，今天所说的这些均为graphics底层图形接口。\n  Bitmap - 称作位图，一般位图的文件格式后缀为bmp，当然编码器也有很多如RGB565、RGB888。作为一种逐像素的显示对象执行效率高，但是缺点也很明显存储效率低。我们理解为一种存储对象比较好。\n  Drawable - 作为Android平下通用的图形对象，它可以装载常用格式的图像，比如GIF、PNG、JPG，当然也支持BMP，当然还提供一些高级的可视化对象，比如渐变、图形等。\n  Canvas - 名为画布，我们可以看作是一种处理过程，使用各种方法来管理Bitmap、GL或者Path路径，同时它可以配合Matrix矩阵类给图像做旋转、缩放等操作，同时Canvas类还提供了裁剪、选取等操作。\n   Paint - 我们可以把它看做一个画图工具，比如画笔、画刷。他管理了每个画图工具的字体、颜色、样式。\n  如果涉及一些Android游戏开发、显示特效可以通过这些底层图形类来高效实现自己的应用。\n  \n  \n\n\n","slug":"Bitmap缩放技巧总结","published":1,"updated":"2016-05-30T14:34:43.880Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou5385h0001f0vcbkr00yqp","content":"<p>1.使用BitmapFactory.Options来控制缩放比例，降低图片色彩模式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BitmapFactory.Options options = new BitmapFactory.Options();</span><br><span class=\"line\">  options.inJustDecodeBounds = true;</span><br><span class=\"line\">  // 获取这个图片的宽和高</span><br><span class=\"line\">  Bitmap bitmap = BitmapFactory.decodeFile(path, options); // 此时返回bm为空</span><br><span class=\"line\">  options.inJustDecodeBounds = false;</span><br><span class=\"line\">  // 计算缩放比</span><br><span class=\"line\">  int be = (int) (options.outHeight / (float) 200);</span><br><span class=\"line\">  if (be &lt;= 0)</span><br><span class=\"line\">   be = 1;</span><br><span class=\"line\">  options.inSampleSize = 2; // 图片长宽各缩小二分之一</span><br><span class=\"line\">  //每个像素占据2个字节</span><br><span class=\"line\">  options.inPreferredConfig = Bitmap.Config.RGB_565;</span><br><span class=\"line\">  // 重新读入图片，注意这次要把options.inJustDecodeBounds 设为 false哦</span><br><span class=\"line\">  bitmap = BitmapFactory.decodeFile(path, options);</span><br><span class=\"line\">由于只是对bitmap加载到内存一次，所以效率比较高。解析速度快</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>2.Bitmap+Matrix<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static Bitmap zoomBitmap(Bitmap bitmap, int width, int height) &#123;</span><br><span class=\"line\">        if (bitmap == null) &#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    int w = bitmap.getWidth();</span><br><span class=\"line\">        int h = bitmap.getHeight();</span><br><span class=\"line\">        Matrix matrix = new Matrix();</span><br><span class=\"line\">        float scaleWidth = ((float) width / w);</span><br><span class=\"line\">        float scaleHeight = ((float) height / h);</span><br><span class=\"line\">        matrix.postScale(scaleWidth, scaleHeight);</span><br><span class=\"line\">        Bitmap newbmp = Bitmap.createBitmap(bitmap, 0, 0, w, h, matrix, true);</span><br><span class=\"line\">        return newbmp;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>对于Drawable、Bitmap、Canvas和Paint它们之间的概念不是很清楚，其实它们除了Drawable外早在Sun的J2ME中就已经出现了，但是在Android平台中，Bitmap、Canvas相关的都有所变化。<br>  首先让我们理解下Android平台中的显示类是View，但是还提供了底层图形类android.graphics，今天所说的这些均为graphics底层图形接口。<br>  Bitmap - 称作位图，一般位图的文件格式后缀为bmp，当然编码器也有很多如RGB565、RGB888。作为一种逐像素的显示对象执行效率高，但是缺点也很明显存储效率低。我们理解为一种存储对象比较好。<br>  Drawable - 作为Android平下通用的图形对象，它可以装载常用格式的图像，比如GIF、PNG、JPG，当然也支持BMP，当然还提供一些高级的可视化对象，比如渐变、图形等。<br>  Canvas - 名为画布，我们可以看作是一种处理过程，使用各种方法来管理Bitmap、GL或者Path路径，同时它可以配合Matrix矩阵类给图像做旋转、缩放等操作，同时Canvas类还提供了裁剪、选取等操作。<br>   Paint - 我们可以把它看做一个画图工具，比如画笔、画刷。他管理了每个画图工具的字体、颜色、样式。<br>  如果涉及一些Android游戏开发、显示特效可以通过这些底层图形类来高效实现自己的应用。</p>\n</blockquote>\n","excerpt":"<p>1.使用BitmapFactory.Options来控制缩放比例，降低图片色彩模式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BitmapFactory.Options options = new BitmapFactory.Options();</span><br><span class=\"line\">  options.inJustDecodeBounds = true;</span><br><span class=\"line\">  // 获取这个图片的宽和高</span><br><span class=\"line\">  Bitmap bitmap = BitmapFactory.decodeFile(path, options); // 此时返回bm为空</span><br><span class=\"line\">  options.inJustDecodeBounds = false;</span><br><span class=\"line\">  // 计算缩放比</span><br><span class=\"line\">  int be = (int) (options.outHeight / (float) 200);</span><br><span class=\"line\">  if (be &lt;= 0)</span><br><span class=\"line\">   be = 1;</span><br><span class=\"line\">  options.inSampleSize = 2; // 图片长宽各缩小二分之一</span><br><span class=\"line\">  //每个像素占据2个字节</span><br><span class=\"line\">  options.inPreferredConfig = Bitmap.Config.RGB_565;</span><br><span class=\"line\">  // 重新读入图片，注意这次要把options.inJustDecodeBounds 设为 false哦</span><br><span class=\"line\">  bitmap = BitmapFactory.decodeFile(path, options);</span><br><span class=\"line\">由于只是对bitmap加载到内存一次，所以效率比较高。解析速度快</span><br></pre></td></tr></table></figure></p>","more":"<p>2.Bitmap+Matrix<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static Bitmap zoomBitmap(Bitmap bitmap, int width, int height) &#123;</span><br><span class=\"line\">        if (bitmap == null) &#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    int w = bitmap.getWidth();</span><br><span class=\"line\">        int h = bitmap.getHeight();</span><br><span class=\"line\">        Matrix matrix = new Matrix();</span><br><span class=\"line\">        float scaleWidth = ((float) width / w);</span><br><span class=\"line\">        float scaleHeight = ((float) height / h);</span><br><span class=\"line\">        matrix.postScale(scaleWidth, scaleHeight);</span><br><span class=\"line\">        Bitmap newbmp = Bitmap.createBitmap(bitmap, 0, 0, w, h, matrix, true);</span><br><span class=\"line\">        return newbmp;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>对于Drawable、Bitmap、Canvas和Paint它们之间的概念不是很清楚，其实它们除了Drawable外早在Sun的J2ME中就已经出现了，但是在Android平台中，Bitmap、Canvas相关的都有所变化。<br>  首先让我们理解下Android平台中的显示类是View，但是还提供了底层图形类android.graphics，今天所说的这些均为graphics底层图形接口。<br>  Bitmap - 称作位图，一般位图的文件格式后缀为bmp，当然编码器也有很多如RGB565、RGB888。作为一种逐像素的显示对象执行效率高，但是缺点也很明显存储效率低。我们理解为一种存储对象比较好。<br>  Drawable - 作为Android平下通用的图形对象，它可以装载常用格式的图像，比如GIF、PNG、JPG，当然也支持BMP，当然还提供一些高级的可视化对象，比如渐变、图形等。<br>  Canvas - 名为画布，我们可以看作是一种处理过程，使用各种方法来管理Bitmap、GL或者Path路径，同时它可以配合Matrix矩阵类给图像做旋转、缩放等操作，同时Canvas类还提供了裁剪、选取等操作。<br>   Paint - 我们可以把它看做一个画图工具，比如画笔、画刷。他管理了每个画图工具的字体、颜色、样式。<br>  如果涉及一些Android游戏开发、显示特效可以通过这些底层图形类来高效实现自己的应用。</p>\n</blockquote>"},{"title":"Android View的绘制","date":"2016-05-30T12:20:47.000Z","toc":true,"_content":"- .View的绘制流程分几步，从哪开始？哪个过程结束以后能看到view？\n\n ```\n 从ViewRoot的performTraversals开始，经过measure，layout,draw 三个流程。draw流程结束以后就可以在屏幕上看到view了。\n \n ```\n \n - view的测量宽高和实际宽高有区别吗？\n \n ```\n 基本上百分之99的情况下都是可以认为没有区别的。有两种情况，有区别。第一种 就是有的时候会因为某些原因 view会多次测量，那第一次测量的宽高 肯定和最后实际的宽高 是不一定相等的，但是在这种情况下最后一次测量的宽高和实际宽高是一致的。此外，实际宽高是在layout流程里确定的，我们可以在layout流程里 将实际宽高写死 写成硬编码，这样测量的宽高和实际宽高就肯定不一样了，虽然这么做没有意义 而且也不好。\n \n ```\n<!-- more-->\n - view的measureSpec 由谁决定?顶级view呢？\n \n```\n由view自己的layoutparams和父容器  一起决定自己的measureSpec。一旦确定了spec，onMeasure中就可以确定view的宽高了。\n\n顶级view就稍微特殊一点，对于decorView的测量在ViewRootImpl的源码里。\n\n/desire的这2个参数就代表屏幕的宽高，\n  childWidthMeasureSpec = getRootMeasureSpec(desiredWindowWidth, lp.width);\n  childHeightMeasureSpec = getRootMeasureSpec(desiredWindowHeight, lp.height);\n  performMeasure(childWidthMeasureSpec, childHeightMeasureSpec);\n\n  //decorView的measureSpec就是在这里确定的，其实比普通view的measurespec要简单的多\n  //代码就不分析了 一目了然的东西\n  private static int getRootMeasureSpec(int windowSize, int rootDimension) {\n        int measureSpec;\n        switch (rootDimension) {\n\n        case ViewGroup.LayoutParams.MATCH_PARENT:\n            // Window can't resize. Force root view to be windowSize.\n            measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.EXACTLY);\n            break;\n        case ViewGroup.LayoutParams.WRAP_CONTENT:\n            // Window can resize. Set max size for root view.\n            measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.AT_MOST);\n            break;\n        default:\n            // Window wants to be an exact size. Force root view to be that size.\n            measureSpec = MeasureSpec.makeMeasureSpec(rootDimension, MeasureSpec.EXACTLY);\n            break;\n        }\n        return measureSpec;\n}\n\n```\n\n- 对于普通view来说，他的measure过程中，与父view有关吗？如果有关，这个父view也就是viewgroup扮演了什么角色？\n\n```\n//对于普通view的measure来说 是由这个view的 父view ，也就是viewgroup来触发的。\n//也就是下面这个measureChildWithMargins方法\n\nprotected void measureChildWithMargins(View child,\n            int parentWidthMeasureSpec, int widthUsed,\n            int parentHeightMeasureSpec, int heightUsed) {\n         //第一步 先取得子view的 layoutParams 参数值   \n        final MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();\n\n        //然后开始计算子view的spec的值，注意这里看到 计算的时候除了要用子view的 layoutparams参数以外\n        //还用到了父view 也就是viewgroup自己的spec的值\n        final int childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,\n                mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin\n                        + widthUsed, lp.width);\n        final int childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,\n                mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin\n                        + heightUsed, lp.height);\n\n        child.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n}\n\n//这个算view的spec的方法 看上去一大串 但是真的逻辑非常简单 就是根据父亲viewgroup\n//的meaurespec 同时还有view自己的params来确定 view自己的measureSpec。\n//注意这里的参数是padding,这个值的含义是 父容器已占用的控件的大小 所以view的Specsize\n//的值 你们可以看到 是要减去这个padding的值的。总大小-已经用的 =可用的。 很好理解。\n\n//然后就是下面的switch逻辑 要自己梳理清楚。其实也不难，主要是下面几条原则\n//如果view采用固定宽高，也就是写死的数值那种。那就不管父亲的spec的值了，view的spec 就肯定是exactly 并且大小遵循layout参数里设置的大小。\n\n//如果view的宽高是match_parent ，那么就要看父容器viewgroup的 spec的值了，如果父view的spec是exactly模式，\n//那view也肯定是exactly,并且大小就是父容器剩下的空间。如果父容器是at_most模式，那view也是at_most 并且不会超过剩余空间大小\n\n//如果view的宽高是wrap_content, 那就不管父容器的spec了，view的spec一定是at_most 并且不会超过父view 剩余空间的大小。\n\npublic static int getChildMeasureSpec(int spec, int padding, int childDimension) {\n        int specMode = MeasureSpec.getMode(spec);\n        int specSize = MeasureSpec.getSize(spec);\n\n        int size = Math.max(0, specSize - padding);\n\n        int resultSize = 0;\n        int resultMode = 0;\n\n        switch (specMode) {\n        // Parent has imposed an exact size on us\n        case MeasureSpec.EXACTLY:\n            if (childDimension >= 0) {\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size. So be it.\n                resultSize = size;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size. It can't be\n                // bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            }\n            break;\n\n        // Parent has imposed a maximum size on us\n        case MeasureSpec.AT_MOST:\n            if (childDimension >= 0) {\n                // Child wants a specific size... so be it\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size, but our size is not fixed.\n                // Constrain child to not be bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size. It can't be\n                // bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            }\n            break;\n\n        // Parent asked to see how big we want to be\n        case MeasureSpec.UNSPECIFIED:\n            if (childDimension >= 0) {\n                // Child wants a specific size... let him have it\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size... find out how big it should\n                // be\n                resultSize = View.sUseZeroUnspecifiedMeasureSpec ? 0 : size;\n                resultMode = MeasureSpec.UNSPECIFIED;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size.... find out how\n                // big it should be\n                resultSize = View.sUseZeroUnspecifiedMeasureSpec ? 0 : size;\n                resultMode = MeasureSpec.UNSPECIFIED;\n            }\n            break;\n        }\n        return MeasureSpec.makeMeasureSpec(resultSize, resultMode);\n    }\n    \n```\n\n- .view的meaure和onMeasure有什么关系？\n\n```\n//view的measure是final 方法 我们子类无法修改的。\n public final void measure(int widthMeasureSpec, int heightMeasureSpec) {\n        boolean optical = isLayoutModeOptical(this);\n        if (optical != isLayoutModeOptical(mParent)) {\n            Insets insets = getOpticalInsets();\n            int oWidth  = insets.left + insets.right;\n            int oHeight = insets.top  + insets.bottom;\n            widthMeasureSpec  = MeasureSpec.adjust(widthMeasureSpec,  optical ? -oWidth  : oWidth);\n            heightMeasureSpec = MeasureSpec.adjust(heightMeasureSpec, optical ? -oHeight : oHeight);\n        }\n\n        // Suppress sign extension for the low bytes\n        long key = (long) widthMeasureSpec << 32 | (long) heightMeasureSpec & 0xffffffffL;\n        if (mMeasureCache == null) mMeasureCache = new LongSparseLongArray(2);\n\n        if ((mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT ||\n                widthMeasureSpec != mOldWidthMeasureSpec ||\n                heightMeasureSpec != mOldHeightMeasureSpec) {\n\n            // first clears the measured dimension flag\n            mPrivateFlags &= ~PFLAG_MEASURED_DIMENSION_SET;\n\n            resolveRtlPropertiesIfNeeded();\n\n            int cacheIndex = (mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT ? -1 :\n                    mMeasureCache.indexOfKey(key);\n            if (cacheIndex < 0 || sIgnoreMeasureCache) {\n                // measure ourselves, this should set the measured dimension flag back\n                onMeasure(widthMeasureSpec, heightMeasureSpec);\n                mPrivateFlags3 &= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;\n            } else {\n                long value = mMeasureCache.valueAt(cacheIndex);\n                // Casting a long to int drops the high 32 bits, no mask needed\n                setMeasuredDimensionRaw((int) (value >> 32), (int) value);\n                mPrivateFlags3 |= PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;\n            }\n\n            // flag not set, setMeasuredDimension() was not invoked, we raise\n            // an exception to warn the developer\n            if ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET) {\n                throw new IllegalStateException(\"View with id \" + getId() + \": \"\n                        + getClass().getName() + \"#onMeasure() did not set the\"\n                        + \" measured dimension by calling\"\n                        + \" setMeasuredDimension()\");\n            }\n\n            mPrivateFlags |= PFLAG_LAYOUT_REQUIRED;\n        }\n\n        mOldWidthMeasureSpec = widthMeasureSpec;\n        mOldHeightMeasureSpec = heightMeasureSpec;\n\n        mMeasureCache.put(key, ((long) mMeasuredWidth) << 32 |\n                (long) mMeasuredHeight & 0xffffffffL); // suppress sign extension\n    }\n\n//不过可以看到的是在measure方法里调用了onMeasure方法\n//所以就能知道 我们在自定义view的时候一定是重写这个方法！\n protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),\n                getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));\n    }\n \n ```\n - 简要分析view的measure流程？\n \n```\nviewgroup 算出子view的spec以后 会调用子view的measure方法，而子view的measure方法 我们问题5也看过了实际上是调用的onMeasure方法。\n\n所以我们只要分析好onMeasure方法即可，注意onMeasure方法的参数 正是他的父view算出来的那2个spec的值(这里view的measure方法会把这个spec里的specSize值做略微的修改 这个部分 不做分析 因为measure方法修改specSize的部分很简单)。\n\n//可以看出来这个就是setMeasuredDimension方法的调用 这个方法看名字就知道就是确定view的测量宽高的\n//所以我们分析的重点就是看这个getDefaultSize 方法 是怎么确定view的测量宽高的\n protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),\n                getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));\n    }\n\n\n//这个方法特别简单 基本可以认为就是近似的返回spec中的specSize，除非你的specMode是UNSPECIFIED\n//UNSPECIFIED 这个一般都是系统内部测量才用的到，这种时候返回size 也就是getSuggestedMinimumWidth的返回值\n public static int getDefaultSize(int size, int measureSpec) {\n        int result = size;\n        int specMode = MeasureSpec.getMode(measureSpec);\n        int specSize = MeasureSpec.getSize(measureSpec);\n\n        switch (specMode) {\n        case MeasureSpec.UNSPECIFIED:\n            result = size;\n            break;\n        case MeasureSpec.AT_MOST:\n        case MeasureSpec.EXACTLY:\n            result = specSize;\n            break;\n        }\n        return result;\n}\n\n//跟view的背景相关 这里不多做分析了\nprotected int getSuggestedMinimumWidth() {\n        return (mBackground == null) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());\n    }\n \n ```\n - .自定义view中 如果onMeasure方法 没有对wrap_content 做处理 会发生什么？为什么？怎么解决？\n \n```\n 如果没有对wrap_content做处理 ，那即使你在xml里设置为wrap_content.其效果也和match_parent相同。看问题4的分析。我们可以知道view自己的layout为wrap，那mode就是at_most（不管父亲view是什么specmode）.\n\n这种模式下宽高就是等于specSize(getDefaultSize函数分析可知)，而这里的specSize显然就是parentSize的大小。也就是父容器剩余的大小。那不就和我们直接设置成match_parent是一样的效果了么？\n\n解决方式就是在onMeasure里 针对wrap 来做特殊处理 比如指定一个默认的宽高，当发现是wrap_content 就设置这个默认宽高即可。\n\n```\n- 为什么在activity的生命周期里无法获得测量宽高？有什么方法可以解决这个问题吗？\n\n```\n因为measure的过程和activity的生命周期  没有任何关系。你无法确定在哪个生命周期执行完毕以后 view的measure过程一定走完。可以尝试如下几种方法 获取view的测量宽高。\n\n//重写activity的这个方法\npublic void onWindowFocusChanged(boolean hasFocus) {\n        super.onWindowFocusChanged(hasFocus);\n        if (hasFocus) {\n            int width = tv.getMeasuredWidth();\n            int height = tv.getMeasuredHeight();\n            Log.v(\"burning\", \"width==\" + width);\n            Log.v(\"burning\", \"height==\" + height);\n\n        }\n    }\n\n或者重写这个方法\n\n@Override\n    protected void onStart() {\n        super.onStart();\n        tv.post(new Runnable() {\n            @Override\n            public void run() {\n                int width = tv.getMeasuredWidth();\n                int height = tv.getMeasuredHeight();\n            }\n        });\n    }\n\n再或者：\n\n@Override\n    protected void onStart() {\n        super.onStart();\n        ViewTreeObserver observer = tv.getViewTreeObserver();\n        observer.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {\n            @Override\n            public void onGlobalLayout() {\n                int width = tv.getMeasuredWidth();\n                int height = tv.getMeasuredHeight();\n                tv.getViewTreeObserver().removeOnGlobalLayoutListener(this);\n            }\n        });\n    }\n\n```\n- layout和onLayout方法有什么区别？\n\n```\nlayout是确定本身view的位置 而onLayout是确定所有子元素的位置。layout里面 就是通过serFrame方法设设定本身view的 四个顶点的位置。这4个位置以确定 自己view的位置就固定了。\n\n然后就调用onLayout来确定子元素的位置。view和viewgroup的onlayout方法都没有写。都留给我们自己给子元素布局\n\n```\n\n- draw方法 大概有几个步骤？\n\n``` \n一共是4个步骤， 绘制背景---------绘制自己--------绘制chrildren----绘制装饰。\n\n```\n- setWillNotDraw方法有什么用？\n\n```\n这个方法在view里。\n\n/**\n     * If this view doesn't do any drawing on its own, set this flag to\n     * allow further optimizations. By default, this flag is not set on\n     * View, but could be set on some View subclasses such as ViewGroup.\n     *\n     * Typically, if you override {@link #onDraw(android.graphics.Canvas)}\n     * you should clear this flag.\n     *\n     * @param willNotDraw whether or not this View draw on its own\n     */\n    public void setWillNotDraw(boolean willNotDraw) {\n        setFlags(willNotDraw ? WILL_NOT_DRAW : 0, DRAW_MASK);\n    }\n\n用于设置标志位的 也就是说 如果你的自定义view 不需要draw的话，就可以设置这个方法为true。这样系统知道你这个view 不需要draw 可以优化执行速度。viewgroup 一般都默认设置这个为true，因为viewgroup多数都是只负责布局，不负责draw的。而view 这个标志位 默认一般都是关闭的。\n\n```\n\n- 自定义view 有哪些需要注意的点？\n\n```\n 主要是要处理wrap_content 和padding。否则xml 那边设置这2个属性就根本没用了。还有不要在view中使用handler 因为人家已经提供了post方法。如果是继承自viewGroup,那在onMeasure和onLayout里面 也要考虑padding和layout的影响。也就是说specSize 要算一下 。最后就是如果view的动画或者线程需要停止，可以考虑在onDetachedFromWindow里面来做。\n\n针对上述的几点，给出几个简单的自定义view 供大家理解。\n\n给出一个圆形的view 范例：\n\npackage com.example.administrator.motioneventtest;\n\nimport android.content.Context;\nimport android.graphics.Canvas;\nimport android.graphics.Color;\nimport android.graphics.Paint;\nimport android.util.AttributeSet;\nimport android.view.View;\n\n/**\n * Created by Administrator on 2016/2/4.\n */\npublic class CircleView extends View {\n\n    private int mColor = Color.RED;\n    private Paint mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n\n    private void init() {\n        mPaint.setColor(mColor);\n    }\n\n    @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n        int widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);\n        int widthSpecSize = MeasureSpec.getSize(widthMeasureSpec);\n        int heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);\n        int heightSpecSize = MeasureSpec.getSize(heightMeasureSpec);\n\n        //处理为wrap_content时的情况\n        if (widthSpecMode == MeasureSpec.AT_MOST && heightSpecMode == MeasureSpec.AT_MOST) {\n            setMeasuredDimension(200, 200);\n        } else if (widthSpecMode == MeasureSpec.AT_MOST) {\n            setMeasuredDimension(200, heightSpecSize);\n        } else if (heightSpecMode == MeasureSpec.AT_MOST) {\n            setMeasuredDimension(widthSpecSize, 200);\n        }\n\n    }\n\n    @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n        //处理padding的情况\n        final int paddingLeft = getPaddingLeft();\n        final int paddingRight = getPaddingRight();\n        final int paddingTop = getPaddingTop();\n        final int paddingBottom = getPaddingBottom();\n\n\n        int width = getWidth() - paddingLeft - paddingRight;\n        int height = getHeight() - paddingTop - paddingBottom;\n        int radius = Math.min(width, height) / 2;\n        canvas.drawCircle(paddingLeft + width / 2, paddingTop + height / 2, radius, mPaint);\n    }\n\n    public CircleView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        init();\n    }\n\n    public CircleView(Context context) {\n        super(context);\n        init();\n\n    }\n\n    public CircleView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        init();\n    }\n}\n\n```\n```\n\n\t1. Measure 过程决定了 View 的测量宽/高，measure 过程结束后可以通过 getMeasuredWidth 和 getMeasuredHeight 方法获取 View 测量后的宽/高（正常情况下它都等于 View 最后的宽高，但是也有特殊情况）\n\t2. Layout 决定了四个顶点的坐标和实际 View 的宽和高，完成以后可以通过 getTop,getBottom,getLeft,getRight 拿到四个顶点的坐标，通过 getWidth,getHeight得到最终实际的宽高。\n\t3. Draw 决定 View 的显示，只有 draw 执行完毕以后，View 的内容才最终显示到屏幕上。\n\n```\n\n\n","source":"_posts/Android-View的绘制.md","raw":"---\ntitle: Android View的绘制\ndate: 2016-05-30 20:20:47\ntags: View\ncategories: View\ntoc: true \n---\n- .View的绘制流程分几步，从哪开始？哪个过程结束以后能看到view？\n\n ```\n 从ViewRoot的performTraversals开始，经过measure，layout,draw 三个流程。draw流程结束以后就可以在屏幕上看到view了。\n \n ```\n \n - view的测量宽高和实际宽高有区别吗？\n \n ```\n 基本上百分之99的情况下都是可以认为没有区别的。有两种情况，有区别。第一种 就是有的时候会因为某些原因 view会多次测量，那第一次测量的宽高 肯定和最后实际的宽高 是不一定相等的，但是在这种情况下最后一次测量的宽高和实际宽高是一致的。此外，实际宽高是在layout流程里确定的，我们可以在layout流程里 将实际宽高写死 写成硬编码，这样测量的宽高和实际宽高就肯定不一样了，虽然这么做没有意义 而且也不好。\n \n ```\n<!-- more-->\n - view的measureSpec 由谁决定?顶级view呢？\n \n```\n由view自己的layoutparams和父容器  一起决定自己的measureSpec。一旦确定了spec，onMeasure中就可以确定view的宽高了。\n\n顶级view就稍微特殊一点，对于decorView的测量在ViewRootImpl的源码里。\n\n/desire的这2个参数就代表屏幕的宽高，\n  childWidthMeasureSpec = getRootMeasureSpec(desiredWindowWidth, lp.width);\n  childHeightMeasureSpec = getRootMeasureSpec(desiredWindowHeight, lp.height);\n  performMeasure(childWidthMeasureSpec, childHeightMeasureSpec);\n\n  //decorView的measureSpec就是在这里确定的，其实比普通view的measurespec要简单的多\n  //代码就不分析了 一目了然的东西\n  private static int getRootMeasureSpec(int windowSize, int rootDimension) {\n        int measureSpec;\n        switch (rootDimension) {\n\n        case ViewGroup.LayoutParams.MATCH_PARENT:\n            // Window can't resize. Force root view to be windowSize.\n            measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.EXACTLY);\n            break;\n        case ViewGroup.LayoutParams.WRAP_CONTENT:\n            // Window can resize. Set max size for root view.\n            measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.AT_MOST);\n            break;\n        default:\n            // Window wants to be an exact size. Force root view to be that size.\n            measureSpec = MeasureSpec.makeMeasureSpec(rootDimension, MeasureSpec.EXACTLY);\n            break;\n        }\n        return measureSpec;\n}\n\n```\n\n- 对于普通view来说，他的measure过程中，与父view有关吗？如果有关，这个父view也就是viewgroup扮演了什么角色？\n\n```\n//对于普通view的measure来说 是由这个view的 父view ，也就是viewgroup来触发的。\n//也就是下面这个measureChildWithMargins方法\n\nprotected void measureChildWithMargins(View child,\n            int parentWidthMeasureSpec, int widthUsed,\n            int parentHeightMeasureSpec, int heightUsed) {\n         //第一步 先取得子view的 layoutParams 参数值   \n        final MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();\n\n        //然后开始计算子view的spec的值，注意这里看到 计算的时候除了要用子view的 layoutparams参数以外\n        //还用到了父view 也就是viewgroup自己的spec的值\n        final int childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,\n                mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin\n                        + widthUsed, lp.width);\n        final int childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,\n                mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin\n                        + heightUsed, lp.height);\n\n        child.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n}\n\n//这个算view的spec的方法 看上去一大串 但是真的逻辑非常简单 就是根据父亲viewgroup\n//的meaurespec 同时还有view自己的params来确定 view自己的measureSpec。\n//注意这里的参数是padding,这个值的含义是 父容器已占用的控件的大小 所以view的Specsize\n//的值 你们可以看到 是要减去这个padding的值的。总大小-已经用的 =可用的。 很好理解。\n\n//然后就是下面的switch逻辑 要自己梳理清楚。其实也不难，主要是下面几条原则\n//如果view采用固定宽高，也就是写死的数值那种。那就不管父亲的spec的值了，view的spec 就肯定是exactly 并且大小遵循layout参数里设置的大小。\n\n//如果view的宽高是match_parent ，那么就要看父容器viewgroup的 spec的值了，如果父view的spec是exactly模式，\n//那view也肯定是exactly,并且大小就是父容器剩下的空间。如果父容器是at_most模式，那view也是at_most 并且不会超过剩余空间大小\n\n//如果view的宽高是wrap_content, 那就不管父容器的spec了，view的spec一定是at_most 并且不会超过父view 剩余空间的大小。\n\npublic static int getChildMeasureSpec(int spec, int padding, int childDimension) {\n        int specMode = MeasureSpec.getMode(spec);\n        int specSize = MeasureSpec.getSize(spec);\n\n        int size = Math.max(0, specSize - padding);\n\n        int resultSize = 0;\n        int resultMode = 0;\n\n        switch (specMode) {\n        // Parent has imposed an exact size on us\n        case MeasureSpec.EXACTLY:\n            if (childDimension >= 0) {\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size. So be it.\n                resultSize = size;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size. It can't be\n                // bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            }\n            break;\n\n        // Parent has imposed a maximum size on us\n        case MeasureSpec.AT_MOST:\n            if (childDimension >= 0) {\n                // Child wants a specific size... so be it\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size, but our size is not fixed.\n                // Constrain child to not be bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size. It can't be\n                // bigger than us.\n                resultSize = size;\n                resultMode = MeasureSpec.AT_MOST;\n            }\n            break;\n\n        // Parent asked to see how big we want to be\n        case MeasureSpec.UNSPECIFIED:\n            if (childDimension >= 0) {\n                // Child wants a specific size... let him have it\n                resultSize = childDimension;\n                resultMode = MeasureSpec.EXACTLY;\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\n                // Child wants to be our size... find out how big it should\n                // be\n                resultSize = View.sUseZeroUnspecifiedMeasureSpec ? 0 : size;\n                resultMode = MeasureSpec.UNSPECIFIED;\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n                // Child wants to determine its own size.... find out how\n                // big it should be\n                resultSize = View.sUseZeroUnspecifiedMeasureSpec ? 0 : size;\n                resultMode = MeasureSpec.UNSPECIFIED;\n            }\n            break;\n        }\n        return MeasureSpec.makeMeasureSpec(resultSize, resultMode);\n    }\n    \n```\n\n- .view的meaure和onMeasure有什么关系？\n\n```\n//view的measure是final 方法 我们子类无法修改的。\n public final void measure(int widthMeasureSpec, int heightMeasureSpec) {\n        boolean optical = isLayoutModeOptical(this);\n        if (optical != isLayoutModeOptical(mParent)) {\n            Insets insets = getOpticalInsets();\n            int oWidth  = insets.left + insets.right;\n            int oHeight = insets.top  + insets.bottom;\n            widthMeasureSpec  = MeasureSpec.adjust(widthMeasureSpec,  optical ? -oWidth  : oWidth);\n            heightMeasureSpec = MeasureSpec.adjust(heightMeasureSpec, optical ? -oHeight : oHeight);\n        }\n\n        // Suppress sign extension for the low bytes\n        long key = (long) widthMeasureSpec << 32 | (long) heightMeasureSpec & 0xffffffffL;\n        if (mMeasureCache == null) mMeasureCache = new LongSparseLongArray(2);\n\n        if ((mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT ||\n                widthMeasureSpec != mOldWidthMeasureSpec ||\n                heightMeasureSpec != mOldHeightMeasureSpec) {\n\n            // first clears the measured dimension flag\n            mPrivateFlags &= ~PFLAG_MEASURED_DIMENSION_SET;\n\n            resolveRtlPropertiesIfNeeded();\n\n            int cacheIndex = (mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT ? -1 :\n                    mMeasureCache.indexOfKey(key);\n            if (cacheIndex < 0 || sIgnoreMeasureCache) {\n                // measure ourselves, this should set the measured dimension flag back\n                onMeasure(widthMeasureSpec, heightMeasureSpec);\n                mPrivateFlags3 &= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;\n            } else {\n                long value = mMeasureCache.valueAt(cacheIndex);\n                // Casting a long to int drops the high 32 bits, no mask needed\n                setMeasuredDimensionRaw((int) (value >> 32), (int) value);\n                mPrivateFlags3 |= PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;\n            }\n\n            // flag not set, setMeasuredDimension() was not invoked, we raise\n            // an exception to warn the developer\n            if ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET) {\n                throw new IllegalStateException(\"View with id \" + getId() + \": \"\n                        + getClass().getName() + \"#onMeasure() did not set the\"\n                        + \" measured dimension by calling\"\n                        + \" setMeasuredDimension()\");\n            }\n\n            mPrivateFlags |= PFLAG_LAYOUT_REQUIRED;\n        }\n\n        mOldWidthMeasureSpec = widthMeasureSpec;\n        mOldHeightMeasureSpec = heightMeasureSpec;\n\n        mMeasureCache.put(key, ((long) mMeasuredWidth) << 32 |\n                (long) mMeasuredHeight & 0xffffffffL); // suppress sign extension\n    }\n\n//不过可以看到的是在measure方法里调用了onMeasure方法\n//所以就能知道 我们在自定义view的时候一定是重写这个方法！\n protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),\n                getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));\n    }\n \n ```\n - 简要分析view的measure流程？\n \n```\nviewgroup 算出子view的spec以后 会调用子view的measure方法，而子view的measure方法 我们问题5也看过了实际上是调用的onMeasure方法。\n\n所以我们只要分析好onMeasure方法即可，注意onMeasure方法的参数 正是他的父view算出来的那2个spec的值(这里view的measure方法会把这个spec里的specSize值做略微的修改 这个部分 不做分析 因为measure方法修改specSize的部分很简单)。\n\n//可以看出来这个就是setMeasuredDimension方法的调用 这个方法看名字就知道就是确定view的测量宽高的\n//所以我们分析的重点就是看这个getDefaultSize 方法 是怎么确定view的测量宽高的\n protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),\n                getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));\n    }\n\n\n//这个方法特别简单 基本可以认为就是近似的返回spec中的specSize，除非你的specMode是UNSPECIFIED\n//UNSPECIFIED 这个一般都是系统内部测量才用的到，这种时候返回size 也就是getSuggestedMinimumWidth的返回值\n public static int getDefaultSize(int size, int measureSpec) {\n        int result = size;\n        int specMode = MeasureSpec.getMode(measureSpec);\n        int specSize = MeasureSpec.getSize(measureSpec);\n\n        switch (specMode) {\n        case MeasureSpec.UNSPECIFIED:\n            result = size;\n            break;\n        case MeasureSpec.AT_MOST:\n        case MeasureSpec.EXACTLY:\n            result = specSize;\n            break;\n        }\n        return result;\n}\n\n//跟view的背景相关 这里不多做分析了\nprotected int getSuggestedMinimumWidth() {\n        return (mBackground == null) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());\n    }\n \n ```\n - .自定义view中 如果onMeasure方法 没有对wrap_content 做处理 会发生什么？为什么？怎么解决？\n \n```\n 如果没有对wrap_content做处理 ，那即使你在xml里设置为wrap_content.其效果也和match_parent相同。看问题4的分析。我们可以知道view自己的layout为wrap，那mode就是at_most（不管父亲view是什么specmode）.\n\n这种模式下宽高就是等于specSize(getDefaultSize函数分析可知)，而这里的specSize显然就是parentSize的大小。也就是父容器剩余的大小。那不就和我们直接设置成match_parent是一样的效果了么？\n\n解决方式就是在onMeasure里 针对wrap 来做特殊处理 比如指定一个默认的宽高，当发现是wrap_content 就设置这个默认宽高即可。\n\n```\n- 为什么在activity的生命周期里无法获得测量宽高？有什么方法可以解决这个问题吗？\n\n```\n因为measure的过程和activity的生命周期  没有任何关系。你无法确定在哪个生命周期执行完毕以后 view的measure过程一定走完。可以尝试如下几种方法 获取view的测量宽高。\n\n//重写activity的这个方法\npublic void onWindowFocusChanged(boolean hasFocus) {\n        super.onWindowFocusChanged(hasFocus);\n        if (hasFocus) {\n            int width = tv.getMeasuredWidth();\n            int height = tv.getMeasuredHeight();\n            Log.v(\"burning\", \"width==\" + width);\n            Log.v(\"burning\", \"height==\" + height);\n\n        }\n    }\n\n或者重写这个方法\n\n@Override\n    protected void onStart() {\n        super.onStart();\n        tv.post(new Runnable() {\n            @Override\n            public void run() {\n                int width = tv.getMeasuredWidth();\n                int height = tv.getMeasuredHeight();\n            }\n        });\n    }\n\n再或者：\n\n@Override\n    protected void onStart() {\n        super.onStart();\n        ViewTreeObserver observer = tv.getViewTreeObserver();\n        observer.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {\n            @Override\n            public void onGlobalLayout() {\n                int width = tv.getMeasuredWidth();\n                int height = tv.getMeasuredHeight();\n                tv.getViewTreeObserver().removeOnGlobalLayoutListener(this);\n            }\n        });\n    }\n\n```\n- layout和onLayout方法有什么区别？\n\n```\nlayout是确定本身view的位置 而onLayout是确定所有子元素的位置。layout里面 就是通过serFrame方法设设定本身view的 四个顶点的位置。这4个位置以确定 自己view的位置就固定了。\n\n然后就调用onLayout来确定子元素的位置。view和viewgroup的onlayout方法都没有写。都留给我们自己给子元素布局\n\n```\n\n- draw方法 大概有几个步骤？\n\n``` \n一共是4个步骤， 绘制背景---------绘制自己--------绘制chrildren----绘制装饰。\n\n```\n- setWillNotDraw方法有什么用？\n\n```\n这个方法在view里。\n\n/**\n     * If this view doesn't do any drawing on its own, set this flag to\n     * allow further optimizations. By default, this flag is not set on\n     * View, but could be set on some View subclasses such as ViewGroup.\n     *\n     * Typically, if you override {@link #onDraw(android.graphics.Canvas)}\n     * you should clear this flag.\n     *\n     * @param willNotDraw whether or not this View draw on its own\n     */\n    public void setWillNotDraw(boolean willNotDraw) {\n        setFlags(willNotDraw ? WILL_NOT_DRAW : 0, DRAW_MASK);\n    }\n\n用于设置标志位的 也就是说 如果你的自定义view 不需要draw的话，就可以设置这个方法为true。这样系统知道你这个view 不需要draw 可以优化执行速度。viewgroup 一般都默认设置这个为true，因为viewgroup多数都是只负责布局，不负责draw的。而view 这个标志位 默认一般都是关闭的。\n\n```\n\n- 自定义view 有哪些需要注意的点？\n\n```\n 主要是要处理wrap_content 和padding。否则xml 那边设置这2个属性就根本没用了。还有不要在view中使用handler 因为人家已经提供了post方法。如果是继承自viewGroup,那在onMeasure和onLayout里面 也要考虑padding和layout的影响。也就是说specSize 要算一下 。最后就是如果view的动画或者线程需要停止，可以考虑在onDetachedFromWindow里面来做。\n\n针对上述的几点，给出几个简单的自定义view 供大家理解。\n\n给出一个圆形的view 范例：\n\npackage com.example.administrator.motioneventtest;\n\nimport android.content.Context;\nimport android.graphics.Canvas;\nimport android.graphics.Color;\nimport android.graphics.Paint;\nimport android.util.AttributeSet;\nimport android.view.View;\n\n/**\n * Created by Administrator on 2016/2/4.\n */\npublic class CircleView extends View {\n\n    private int mColor = Color.RED;\n    private Paint mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n\n    private void init() {\n        mPaint.setColor(mColor);\n    }\n\n    @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n        int widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);\n        int widthSpecSize = MeasureSpec.getSize(widthMeasureSpec);\n        int heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);\n        int heightSpecSize = MeasureSpec.getSize(heightMeasureSpec);\n\n        //处理为wrap_content时的情况\n        if (widthSpecMode == MeasureSpec.AT_MOST && heightSpecMode == MeasureSpec.AT_MOST) {\n            setMeasuredDimension(200, 200);\n        } else if (widthSpecMode == MeasureSpec.AT_MOST) {\n            setMeasuredDimension(200, heightSpecSize);\n        } else if (heightSpecMode == MeasureSpec.AT_MOST) {\n            setMeasuredDimension(widthSpecSize, 200);\n        }\n\n    }\n\n    @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n        //处理padding的情况\n        final int paddingLeft = getPaddingLeft();\n        final int paddingRight = getPaddingRight();\n        final int paddingTop = getPaddingTop();\n        final int paddingBottom = getPaddingBottom();\n\n\n        int width = getWidth() - paddingLeft - paddingRight;\n        int height = getHeight() - paddingTop - paddingBottom;\n        int radius = Math.min(width, height) / 2;\n        canvas.drawCircle(paddingLeft + width / 2, paddingTop + height / 2, radius, mPaint);\n    }\n\n    public CircleView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        init();\n    }\n\n    public CircleView(Context context) {\n        super(context);\n        init();\n\n    }\n\n    public CircleView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        init();\n    }\n}\n\n```\n```\n\n\t1. Measure 过程决定了 View 的测量宽/高，measure 过程结束后可以通过 getMeasuredWidth 和 getMeasuredHeight 方法获取 View 测量后的宽/高（正常情况下它都等于 View 最后的宽高，但是也有特殊情况）\n\t2. Layout 决定了四个顶点的坐标和实际 View 的宽和高，完成以后可以通过 getTop,getBottom,getLeft,getRight 拿到四个顶点的坐标，通过 getWidth,getHeight得到最终实际的宽高。\n\t3. Draw 决定 View 的显示，只有 draw 执行完毕以后，View 的内容才最终显示到屏幕上。\n\n```\n\n\n","slug":"Android-View的绘制","published":1,"updated":"2016-05-30T12:23:23.266Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou5385y0003f0vcmoingku6","content":"<ul>\n<li><p>.View的绘制流程分几步，从哪开始？哪个过程结束以后能看到view？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">从ViewRoot的performTraversals开始，经过measure，layout,draw 三个流程。draw流程结束以后就可以在屏幕上看到view了。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>view的测量宽高和实际宽高有区别吗？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">基本上百分之99的情况下都是可以认为没有区别的。有两种情况，有区别。第一种 就是有的时候会因为某些原因 view会多次测量，那第一次测量的宽高 肯定和最后实际的宽高 是不一定相等的，但是在这种情况下最后一次测量的宽高和实际宽高是一致的。此外，实际宽高是在layout流程里确定的，我们可以在layout流程里 将实际宽高写死 写成硬编码，这样测量的宽高和实际宽高就肯定不一样了，虽然这么做没有意义 而且也不好。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li>view的measureSpec 由谁决定?顶级view呢？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">由view自己的layoutparams和父容器  一起决定自己的measureSpec。一旦确定了spec，onMeasure中就可以确定view的宽高了。</span><br><span class=\"line\"></span><br><span class=\"line\">顶级view就稍微特殊一点，对于decorView的测量在ViewRootImpl的源码里。</span><br><span class=\"line\"></span><br><span class=\"line\">/desire的这2个参数就代表屏幕的宽高，</span><br><span class=\"line\">  childWidthMeasureSpec = getRootMeasureSpec(desiredWindowWidth, lp.width);</span><br><span class=\"line\">  childHeightMeasureSpec = getRootMeasureSpec(desiredWindowHeight, lp.height);</span><br><span class=\"line\">  performMeasure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class=\"line\"></span><br><span class=\"line\">  //decorView的measureSpec就是在这里确定的，其实比普通view的measurespec要简单的多</span><br><span class=\"line\">  //代码就不分析了 一目了然的东西</span><br><span class=\"line\">  private static int getRootMeasureSpec(int windowSize, int rootDimension) &#123;</span><br><span class=\"line\">        int measureSpec;</span><br><span class=\"line\">        switch (rootDimension) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        case ViewGroup.LayoutParams.MATCH_PARENT:</span><br><span class=\"line\">            // Window can&apos;t resize. Force root view to be windowSize.</span><br><span class=\"line\">            measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.EXACTLY);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case ViewGroup.LayoutParams.WRAP_CONTENT:</span><br><span class=\"line\">            // Window can resize. Set max size for root view.</span><br><span class=\"line\">            measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.AT_MOST);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            // Window wants to be an exact size. Force root view to be that size.</span><br><span class=\"line\">            measureSpec = MeasureSpec.makeMeasureSpec(rootDimension, MeasureSpec.EXACTLY);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return measureSpec;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>对于普通view来说，他的measure过程中，与父view有关吗？如果有关，这个父view也就是viewgroup扮演了什么角色？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//对于普通view的measure来说 是由这个view的 父view ，也就是viewgroup来触发的。</span><br><span class=\"line\">//也就是下面这个measureChildWithMargins方法</span><br><span class=\"line\"></span><br><span class=\"line\">protected void measureChildWithMargins(View child,</span><br><span class=\"line\">            int parentWidthMeasureSpec, int widthUsed,</span><br><span class=\"line\">            int parentHeightMeasureSpec, int heightUsed) &#123;</span><br><span class=\"line\">         //第一步 先取得子view的 layoutParams 参数值   </span><br><span class=\"line\">        final MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();</span><br><span class=\"line\"></span><br><span class=\"line\">        //然后开始计算子view的spec的值，注意这里看到 计算的时候除了要用子view的 layoutparams参数以外</span><br><span class=\"line\">        //还用到了父view 也就是viewgroup自己的spec的值</span><br><span class=\"line\">        final int childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,</span><br><span class=\"line\">                mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin</span><br><span class=\"line\">                        + widthUsed, lp.width);</span><br><span class=\"line\">        final int childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,</span><br><span class=\"line\">                mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin</span><br><span class=\"line\">                        + heightUsed, lp.height);</span><br><span class=\"line\"></span><br><span class=\"line\">        child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//这个算view的spec的方法 看上去一大串 但是真的逻辑非常简单 就是根据父亲viewgroup</span><br><span class=\"line\">//的meaurespec 同时还有view自己的params来确定 view自己的measureSpec。</span><br><span class=\"line\">//注意这里的参数是padding,这个值的含义是 父容器已占用的控件的大小 所以view的Specsize</span><br><span class=\"line\">//的值 你们可以看到 是要减去这个padding的值的。总大小-已经用的 =可用的。 很好理解。</span><br><span class=\"line\"></span><br><span class=\"line\">//然后就是下面的switch逻辑 要自己梳理清楚。其实也不难，主要是下面几条原则</span><br><span class=\"line\">//如果view采用固定宽高，也就是写死的数值那种。那就不管父亲的spec的值了，view的spec 就肯定是exactly 并且大小遵循layout参数里设置的大小。</span><br><span class=\"line\"></span><br><span class=\"line\">//如果view的宽高是match_parent ，那么就要看父容器viewgroup的 spec的值了，如果父view的spec是exactly模式，</span><br><span class=\"line\">//那view也肯定是exactly,并且大小就是父容器剩下的空间。如果父容器是at_most模式，那view也是at_most 并且不会超过剩余空间大小</span><br><span class=\"line\"></span><br><span class=\"line\">//如果view的宽高是wrap_content, 那就不管父容器的spec了，view的spec一定是at_most 并且不会超过父view 剩余空间的大小。</span><br><span class=\"line\"></span><br><span class=\"line\">public static int getChildMeasureSpec(int spec, int padding, int childDimension) &#123;</span><br><span class=\"line\">        int specMode = MeasureSpec.getMode(spec);</span><br><span class=\"line\">        int specSize = MeasureSpec.getSize(spec);</span><br><span class=\"line\"></span><br><span class=\"line\">        int size = Math.max(0, specSize - padding);</span><br><span class=\"line\"></span><br><span class=\"line\">        int resultSize = 0;</span><br><span class=\"line\">        int resultMode = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">        switch (specMode) &#123;</span><br><span class=\"line\">        // Parent has imposed an exact size on us</span><br><span class=\"line\">        case MeasureSpec.EXACTLY:</span><br><span class=\"line\">            if (childDimension &gt;= 0) &#123;</span><br><span class=\"line\">                resultSize = childDimension;</span><br><span class=\"line\">                resultMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\">            &#125; else if (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class=\"line\">                // Child wants to be our size. So be it.</span><br><span class=\"line\">                resultSize = size;</span><br><span class=\"line\">                resultMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\">            &#125; else if (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class=\"line\">                // Child wants to determine its own size. It can&apos;t be</span><br><span class=\"line\">                // bigger than us.</span><br><span class=\"line\">                resultSize = size;</span><br><span class=\"line\">                resultMode = MeasureSpec.AT_MOST;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            break;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Parent has imposed a maximum size on us</span><br><span class=\"line\">        case MeasureSpec.AT_MOST:</span><br><span class=\"line\">            if (childDimension &gt;= 0) &#123;</span><br><span class=\"line\">                // Child wants a specific size... so be it</span><br><span class=\"line\">                resultSize = childDimension;</span><br><span class=\"line\">                resultMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\">            &#125; else if (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class=\"line\">                // Child wants to be our size, but our size is not fixed.</span><br><span class=\"line\">                // Constrain child to not be bigger than us.</span><br><span class=\"line\">                resultSize = size;</span><br><span class=\"line\">                resultMode = MeasureSpec.AT_MOST;</span><br><span class=\"line\">            &#125; else if (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class=\"line\">                // Child wants to determine its own size. It can&apos;t be</span><br><span class=\"line\">                // bigger than us.</span><br><span class=\"line\">                resultSize = size;</span><br><span class=\"line\">                resultMode = MeasureSpec.AT_MOST;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            break;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Parent asked to see how big we want to be</span><br><span class=\"line\">        case MeasureSpec.UNSPECIFIED:</span><br><span class=\"line\">            if (childDimension &gt;= 0) &#123;</span><br><span class=\"line\">                // Child wants a specific size... let him have it</span><br><span class=\"line\">                resultSize = childDimension;</span><br><span class=\"line\">                resultMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\">            &#125; else if (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class=\"line\">                // Child wants to be our size... find out how big it should</span><br><span class=\"line\">                // be</span><br><span class=\"line\">                resultSize = View.sUseZeroUnspecifiedMeasureSpec ? 0 : size;</span><br><span class=\"line\">                resultMode = MeasureSpec.UNSPECIFIED;</span><br><span class=\"line\">            &#125; else if (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class=\"line\">                // Child wants to determine its own size.... find out how</span><br><span class=\"line\">                // big it should be</span><br><span class=\"line\">                resultSize = View.sUseZeroUnspecifiedMeasureSpec ? 0 : size;</span><br><span class=\"line\">                resultMode = MeasureSpec.UNSPECIFIED;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return MeasureSpec.makeMeasureSpec(resultSize, resultMode);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>.view的meaure和onMeasure有什么关系？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//view的measure是final 方法 我们子类无法修改的。</span><br><span class=\"line\"> public final void measure(int widthMeasureSpec, int heightMeasureSpec) &#123;</span><br><span class=\"line\">        boolean optical = isLayoutModeOptical(this);</span><br><span class=\"line\">        if (optical != isLayoutModeOptical(mParent)) &#123;</span><br><span class=\"line\">            Insets insets = getOpticalInsets();</span><br><span class=\"line\">            int oWidth  = insets.left + insets.right;</span><br><span class=\"line\">            int oHeight = insets.top  + insets.bottom;</span><br><span class=\"line\">            widthMeasureSpec  = MeasureSpec.adjust(widthMeasureSpec,  optical ? -oWidth  : oWidth);</span><br><span class=\"line\">            heightMeasureSpec = MeasureSpec.adjust(heightMeasureSpec, optical ? -oHeight : oHeight);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Suppress sign extension for the low bytes</span><br><span class=\"line\">        long key = (long) widthMeasureSpec &lt;&lt; 32 | (long) heightMeasureSpec &amp; 0xffffffffL;</span><br><span class=\"line\">        if (mMeasureCache == null) mMeasureCache = new LongSparseLongArray(2);</span><br><span class=\"line\"></span><br><span class=\"line\">        if ((mPrivateFlags &amp; PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT ||</span><br><span class=\"line\">                widthMeasureSpec != mOldWidthMeasureSpec ||</span><br><span class=\"line\">                heightMeasureSpec != mOldHeightMeasureSpec) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            // first clears the measured dimension flag</span><br><span class=\"line\">            mPrivateFlags &amp;= ~PFLAG_MEASURED_DIMENSION_SET;</span><br><span class=\"line\"></span><br><span class=\"line\">            resolveRtlPropertiesIfNeeded();</span><br><span class=\"line\"></span><br><span class=\"line\">            int cacheIndex = (mPrivateFlags &amp; PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT ? -1 :</span><br><span class=\"line\">                    mMeasureCache.indexOfKey(key);</span><br><span class=\"line\">            if (cacheIndex &lt; 0 || sIgnoreMeasureCache) &#123;</span><br><span class=\"line\">                // measure ourselves, this should set the measured dimension flag back</span><br><span class=\"line\">                onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">                mPrivateFlags3 &amp;= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                long value = mMeasureCache.valueAt(cacheIndex);</span><br><span class=\"line\">                // Casting a long to int drops the high 32 bits, no mask needed</span><br><span class=\"line\">                setMeasuredDimensionRaw((int) (value &gt;&gt; 32), (int) value);</span><br><span class=\"line\">                mPrivateFlags3 |= PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            // flag not set, setMeasuredDimension() was not invoked, we raise</span><br><span class=\"line\">            // an exception to warn the developer</span><br><span class=\"line\">            if ((mPrivateFlags &amp; PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET) &#123;</span><br><span class=\"line\">                throw new IllegalStateException(&quot;View with id &quot; + getId() + &quot;: &quot;</span><br><span class=\"line\">                        + getClass().getName() + &quot;#onMeasure() did not set the&quot;</span><br><span class=\"line\">                        + &quot; measured dimension by calling&quot;</span><br><span class=\"line\">                        + &quot; setMeasuredDimension()&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            mPrivateFlags |= PFLAG_LAYOUT_REQUIRED;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        mOldWidthMeasureSpec = widthMeasureSpec;</span><br><span class=\"line\">        mOldHeightMeasureSpec = heightMeasureSpec;</span><br><span class=\"line\"></span><br><span class=\"line\">        mMeasureCache.put(key, ((long) mMeasuredWidth) &lt;&lt; 32 |</span><br><span class=\"line\">                (long) mMeasuredHeight &amp; 0xffffffffL); // suppress sign extension</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//不过可以看到的是在measure方法里调用了onMeasure方法</span><br><span class=\"line\">//所以就能知道 我们在自定义view的时候一定是重写这个方法！</span><br><span class=\"line\"> protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</span><br><span class=\"line\">        setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</span><br><span class=\"line\">                getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>简要分析view的measure流程？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">viewgroup 算出子view的spec以后 会调用子view的measure方法，而子view的measure方法 我们问题5也看过了实际上是调用的onMeasure方法。</span><br><span class=\"line\"></span><br><span class=\"line\">所以我们只要分析好onMeasure方法即可，注意onMeasure方法的参数 正是他的父view算出来的那2个spec的值(这里view的measure方法会把这个spec里的specSize值做略微的修改 这个部分 不做分析 因为measure方法修改specSize的部分很简单)。</span><br><span class=\"line\"></span><br><span class=\"line\">//可以看出来这个就是setMeasuredDimension方法的调用 这个方法看名字就知道就是确定view的测量宽高的</span><br><span class=\"line\">//所以我们分析的重点就是看这个getDefaultSize 方法 是怎么确定view的测量宽高的</span><br><span class=\"line\"> protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</span><br><span class=\"line\">        setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</span><br><span class=\"line\">                getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//这个方法特别简单 基本可以认为就是近似的返回spec中的specSize，除非你的specMode是UNSPECIFIED</span><br><span class=\"line\">//UNSPECIFIED 这个一般都是系统内部测量才用的到，这种时候返回size 也就是getSuggestedMinimumWidth的返回值</span><br><span class=\"line\"> public static int getDefaultSize(int size, int measureSpec) &#123;</span><br><span class=\"line\">        int result = size;</span><br><span class=\"line\">        int specMode = MeasureSpec.getMode(measureSpec);</span><br><span class=\"line\">        int specSize = MeasureSpec.getSize(measureSpec);</span><br><span class=\"line\"></span><br><span class=\"line\">        switch (specMode) &#123;</span><br><span class=\"line\">        case MeasureSpec.UNSPECIFIED:</span><br><span class=\"line\">            result = size;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case MeasureSpec.AT_MOST:</span><br><span class=\"line\">        case MeasureSpec.EXACTLY:</span><br><span class=\"line\">            result = specSize;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//跟view的背景相关 这里不多做分析了</span><br><span class=\"line\">protected int getSuggestedMinimumWidth() &#123;</span><br><span class=\"line\">        return (mBackground == null) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>.自定义view中 如果onMeasure方法 没有对wrap_content 做处理 会发生什么？为什么？怎么解决？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 如果没有对wrap_content做处理 ，那即使你在xml里设置为wrap_content.其效果也和match_parent相同。看问题4的分析。我们可以知道view自己的layout为wrap，那mode就是at_most（不管父亲view是什么specmode）.</span><br><span class=\"line\"></span><br><span class=\"line\">这种模式下宽高就是等于specSize(getDefaultSize函数分析可知)，而这里的specSize显然就是parentSize的大小。也就是父容器剩余的大小。那不就和我们直接设置成match_parent是一样的效果了么？</span><br><span class=\"line\"></span><br><span class=\"line\">解决方式就是在onMeasure里 针对wrap 来做特殊处理 比如指定一个默认的宽高，当发现是wrap_content 就设置这个默认宽高即可。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>为什么在activity的生命周期里无法获得测量宽高？有什么方法可以解决这个问题吗？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">因为measure的过程和activity的生命周期  没有任何关系。你无法确定在哪个生命周期执行完毕以后 view的measure过程一定走完。可以尝试如下几种方法 获取view的测量宽高。</span><br><span class=\"line\"></span><br><span class=\"line\">//重写activity的这个方法</span><br><span class=\"line\">public void onWindowFocusChanged(boolean hasFocus) &#123;</span><br><span class=\"line\">        super.onWindowFocusChanged(hasFocus);</span><br><span class=\"line\">        if (hasFocus) &#123;</span><br><span class=\"line\">            int width = tv.getMeasuredWidth();</span><br><span class=\"line\">            int height = tv.getMeasuredHeight();</span><br><span class=\"line\">            Log.v(&quot;burning&quot;, &quot;width==&quot; + width);</span><br><span class=\"line\">            Log.v(&quot;burning&quot;, &quot;height==&quot; + height);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">或者重写这个方法</span><br><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\">    protected void onStart() &#123;</span><br><span class=\"line\">        super.onStart();</span><br><span class=\"line\">        tv.post(new Runnable() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">                int width = tv.getMeasuredWidth();</span><br><span class=\"line\">                int height = tv.getMeasuredHeight();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">再或者：</span><br><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\">    protected void onStart() &#123;</span><br><span class=\"line\">        super.onStart();</span><br><span class=\"line\">        ViewTreeObserver observer = tv.getViewTreeObserver();</span><br><span class=\"line\">        observer.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onGlobalLayout() &#123;</span><br><span class=\"line\">                int width = tv.getMeasuredWidth();</span><br><span class=\"line\">                int height = tv.getMeasuredHeight();</span><br><span class=\"line\">                tv.getViewTreeObserver().removeOnGlobalLayoutListener(this);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>layout和onLayout方法有什么区别？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">layout是确定本身view的位置 而onLayout是确定所有子元素的位置。layout里面 就是通过serFrame方法设设定本身view的 四个顶点的位置。这4个位置以确定 自己view的位置就固定了。</span><br><span class=\"line\"></span><br><span class=\"line\">然后就调用onLayout来确定子元素的位置。view和viewgroup的onlayout方法都没有写。都留给我们自己给子元素布局</span><br></pre></td></tr></table></figure>\n<ul>\n<li>draw方法 大概有几个步骤？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一共是4个步骤， 绘制背景---------绘制自己--------绘制chrildren----绘制装饰。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>setWillNotDraw方法有什么用？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这个方法在view里。</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">     * If this view doesn&apos;t do any drawing on its own, set this flag to</span><br><span class=\"line\">     * allow further optimizations. By default, this flag is not set on</span><br><span class=\"line\">     * View, but could be set on some View subclasses such as ViewGroup.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * Typically, if you override &#123;@link #onDraw(android.graphics.Canvas)&#125;</span><br><span class=\"line\">     * you should clear this flag.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param willNotDraw whether or not this View draw on its own</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void setWillNotDraw(boolean willNotDraw) &#123;</span><br><span class=\"line\">        setFlags(willNotDraw ? WILL_NOT_DRAW : 0, DRAW_MASK);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">用于设置标志位的 也就是说 如果你的自定义view 不需要draw的话，就可以设置这个方法为true。这样系统知道你这个view 不需要draw 可以优化执行速度。viewgroup 一般都默认设置这个为true，因为viewgroup多数都是只负责布局，不负责draw的。而view 这个标志位 默认一般都是关闭的。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>自定义view 有哪些需要注意的点？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 主要是要处理wrap_content 和padding。否则xml 那边设置这2个属性就根本没用了。还有不要在view中使用handler 因为人家已经提供了post方法。如果是继承自viewGroup,那在onMeasure和onLayout里面 也要考虑padding和layout的影响。也就是说specSize 要算一下 。最后就是如果view的动画或者线程需要停止，可以考虑在onDetachedFromWindow里面来做。</span><br><span class=\"line\"></span><br><span class=\"line\">针对上述的几点，给出几个简单的自定义view 供大家理解。</span><br><span class=\"line\"></span><br><span class=\"line\">给出一个圆形的view 范例：</span><br><span class=\"line\"></span><br><span class=\"line\">package com.example.administrator.motioneventtest;</span><br><span class=\"line\"></span><br><span class=\"line\">import android.content.Context;</span><br><span class=\"line\">import android.graphics.Canvas;</span><br><span class=\"line\">import android.graphics.Color;</span><br><span class=\"line\">import android.graphics.Paint;</span><br><span class=\"line\">import android.util.AttributeSet;</span><br><span class=\"line\">import android.view.View;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by Administrator on 2016/2/4.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class CircleView extends View &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int mColor = Color.RED;</span><br><span class=\"line\">    private Paint mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);</span><br><span class=\"line\"></span><br><span class=\"line\">    private void init() &#123;</span><br><span class=\"line\">        mPaint.setColor(mColor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</span><br><span class=\"line\">        super.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">        int widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);</span><br><span class=\"line\">        int widthSpecSize = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class=\"line\">        int heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);</span><br><span class=\"line\">        int heightSpecSize = MeasureSpec.getSize(heightMeasureSpec);</span><br><span class=\"line\"></span><br><span class=\"line\">        //处理为wrap_content时的情况</span><br><span class=\"line\">        if (widthSpecMode == MeasureSpec.AT_MOST &amp;&amp; heightSpecMode == MeasureSpec.AT_MOST) &#123;</span><br><span class=\"line\">            setMeasuredDimension(200, 200);</span><br><span class=\"line\">        &#125; else if (widthSpecMode == MeasureSpec.AT_MOST) &#123;</span><br><span class=\"line\">            setMeasuredDimension(200, heightSpecSize);</span><br><span class=\"line\">        &#125; else if (heightSpecMode == MeasureSpec.AT_MOST) &#123;</span><br><span class=\"line\">            setMeasuredDimension(widthSpecSize, 200);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onDraw(Canvas canvas) &#123;</span><br><span class=\"line\">        super.onDraw(canvas);</span><br><span class=\"line\">        //处理padding的情况</span><br><span class=\"line\">        final int paddingLeft = getPaddingLeft();</span><br><span class=\"line\">        final int paddingRight = getPaddingRight();</span><br><span class=\"line\">        final int paddingTop = getPaddingTop();</span><br><span class=\"line\">        final int paddingBottom = getPaddingBottom();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        int width = getWidth() - paddingLeft - paddingRight;</span><br><span class=\"line\">        int height = getHeight() - paddingTop - paddingBottom;</span><br><span class=\"line\">        int radius = Math.min(width, height) / 2;</span><br><span class=\"line\">        canvas.drawCircle(paddingLeft + width / 2, paddingTop + height / 2, radius, mPaint);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public CircleView(Context context, AttributeSet attrs, int defStyleAttr) &#123;</span><br><span class=\"line\">        super(context, attrs, defStyleAttr);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public CircleView(Context context) &#123;</span><br><span class=\"line\">        super(context);</span><br><span class=\"line\">        init();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public CircleView(Context context, AttributeSet attrs) &#123;</span><br><span class=\"line\">        super(context, attrs);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">1. Measure 过程决定了 View 的测量宽/高，measure 过程结束后可以通过 getMeasuredWidth 和 getMeasuredHeight 方法获取 View 测量后的宽/高（正常情况下它都等于 View 最后的宽高，但是也有特殊情况）</span><br><span class=\"line\">2. Layout 决定了四个顶点的坐标和实际 View 的宽和高，完成以后可以通过 getTop,getBottom,getLeft,getRight 拿到四个顶点的坐标，通过 getWidth,getHeight得到最终实际的宽高。</span><br><span class=\"line\">3. Draw 决定 View 的显示，只有 draw 执行完毕以后，View 的内容才最终显示到屏幕上。</span><br></pre></td></tr></table></figure>\n","excerpt":"<ul>\n<li><p>.View的绘制流程分几步，从哪开始？哪个过程结束以后能看到view？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">从ViewRoot的performTraversals开始，经过measure，layout,draw 三个流程。draw流程结束以后就可以在屏幕上看到view了。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>view的测量宽高和实际宽高有区别吗？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">基本上百分之99的情况下都是可以认为没有区别的。有两种情况，有区别。第一种 就是有的时候会因为某些原因 view会多次测量，那第一次测量的宽高 肯定和最后实际的宽高 是不一定相等的，但是在这种情况下最后一次测量的宽高和实际宽高是一致的。此外，实际宽高是在layout流程里确定的，我们可以在layout流程里 将实际宽高写死 写成硬编码，这样测量的宽高和实际宽高就肯定不一样了，虽然这么做没有意义 而且也不好。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<ul>\n<li>view的measureSpec 由谁决定?顶级view呢？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">由view自己的layoutparams和父容器  一起决定自己的measureSpec。一旦确定了spec，onMeasure中就可以确定view的宽高了。</span><br><span class=\"line\"></span><br><span class=\"line\">顶级view就稍微特殊一点，对于decorView的测量在ViewRootImpl的源码里。</span><br><span class=\"line\"></span><br><span class=\"line\">/desire的这2个参数就代表屏幕的宽高，</span><br><span class=\"line\">  childWidthMeasureSpec = getRootMeasureSpec(desiredWindowWidth, lp.width);</span><br><span class=\"line\">  childHeightMeasureSpec = getRootMeasureSpec(desiredWindowHeight, lp.height);</span><br><span class=\"line\">  performMeasure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class=\"line\"></span><br><span class=\"line\">  //decorView的measureSpec就是在这里确定的，其实比普通view的measurespec要简单的多</span><br><span class=\"line\">  //代码就不分析了 一目了然的东西</span><br><span class=\"line\">  private static int getRootMeasureSpec(int windowSize, int rootDimension) &#123;</span><br><span class=\"line\">        int measureSpec;</span><br><span class=\"line\">        switch (rootDimension) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        case ViewGroup.LayoutParams.MATCH_PARENT:</span><br><span class=\"line\">            // Window can&apos;t resize. Force root view to be windowSize.</span><br><span class=\"line\">            measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.EXACTLY);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case ViewGroup.LayoutParams.WRAP_CONTENT:</span><br><span class=\"line\">            // Window can resize. Set max size for root view.</span><br><span class=\"line\">            measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.AT_MOST);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            // Window wants to be an exact size. Force root view to be that size.</span><br><span class=\"line\">            measureSpec = MeasureSpec.makeMeasureSpec(rootDimension, MeasureSpec.EXACTLY);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return measureSpec;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>对于普通view来说，他的measure过程中，与父view有关吗？如果有关，这个父view也就是viewgroup扮演了什么角色？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//对于普通view的measure来说 是由这个view的 父view ，也就是viewgroup来触发的。</span><br><span class=\"line\">//也就是下面这个measureChildWithMargins方法</span><br><span class=\"line\"></span><br><span class=\"line\">protected void measureChildWithMargins(View child,</span><br><span class=\"line\">            int parentWidthMeasureSpec, int widthUsed,</span><br><span class=\"line\">            int parentHeightMeasureSpec, int heightUsed) &#123;</span><br><span class=\"line\">         //第一步 先取得子view的 layoutParams 参数值   </span><br><span class=\"line\">        final MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();</span><br><span class=\"line\"></span><br><span class=\"line\">        //然后开始计算子view的spec的值，注意这里看到 计算的时候除了要用子view的 layoutparams参数以外</span><br><span class=\"line\">        //还用到了父view 也就是viewgroup自己的spec的值</span><br><span class=\"line\">        final int childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,</span><br><span class=\"line\">                mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin</span><br><span class=\"line\">                        + widthUsed, lp.width);</span><br><span class=\"line\">        final int childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,</span><br><span class=\"line\">                mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin</span><br><span class=\"line\">                        + heightUsed, lp.height);</span><br><span class=\"line\"></span><br><span class=\"line\">        child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//这个算view的spec的方法 看上去一大串 但是真的逻辑非常简单 就是根据父亲viewgroup</span><br><span class=\"line\">//的meaurespec 同时还有view自己的params来确定 view自己的measureSpec。</span><br><span class=\"line\">//注意这里的参数是padding,这个值的含义是 父容器已占用的控件的大小 所以view的Specsize</span><br><span class=\"line\">//的值 你们可以看到 是要减去这个padding的值的。总大小-已经用的 =可用的。 很好理解。</span><br><span class=\"line\"></span><br><span class=\"line\">//然后就是下面的switch逻辑 要自己梳理清楚。其实也不难，主要是下面几条原则</span><br><span class=\"line\">//如果view采用固定宽高，也就是写死的数值那种。那就不管父亲的spec的值了，view的spec 就肯定是exactly 并且大小遵循layout参数里设置的大小。</span><br><span class=\"line\"></span><br><span class=\"line\">//如果view的宽高是match_parent ，那么就要看父容器viewgroup的 spec的值了，如果父view的spec是exactly模式，</span><br><span class=\"line\">//那view也肯定是exactly,并且大小就是父容器剩下的空间。如果父容器是at_most模式，那view也是at_most 并且不会超过剩余空间大小</span><br><span class=\"line\"></span><br><span class=\"line\">//如果view的宽高是wrap_content, 那就不管父容器的spec了，view的spec一定是at_most 并且不会超过父view 剩余空间的大小。</span><br><span class=\"line\"></span><br><span class=\"line\">public static int getChildMeasureSpec(int spec, int padding, int childDimension) &#123;</span><br><span class=\"line\">        int specMode = MeasureSpec.getMode(spec);</span><br><span class=\"line\">        int specSize = MeasureSpec.getSize(spec);</span><br><span class=\"line\"></span><br><span class=\"line\">        int size = Math.max(0, specSize - padding);</span><br><span class=\"line\"></span><br><span class=\"line\">        int resultSize = 0;</span><br><span class=\"line\">        int resultMode = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">        switch (specMode) &#123;</span><br><span class=\"line\">        // Parent has imposed an exact size on us</span><br><span class=\"line\">        case MeasureSpec.EXACTLY:</span><br><span class=\"line\">            if (childDimension &gt;= 0) &#123;</span><br><span class=\"line\">                resultSize = childDimension;</span><br><span class=\"line\">                resultMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\">            &#125; else if (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class=\"line\">                // Child wants to be our size. So be it.</span><br><span class=\"line\">                resultSize = size;</span><br><span class=\"line\">                resultMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\">            &#125; else if (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class=\"line\">                // Child wants to determine its own size. It can&apos;t be</span><br><span class=\"line\">                // bigger than us.</span><br><span class=\"line\">                resultSize = size;</span><br><span class=\"line\">                resultMode = MeasureSpec.AT_MOST;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            break;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Parent has imposed a maximum size on us</span><br><span class=\"line\">        case MeasureSpec.AT_MOST:</span><br><span class=\"line\">            if (childDimension &gt;= 0) &#123;</span><br><span class=\"line\">                // Child wants a specific size... so be it</span><br><span class=\"line\">                resultSize = childDimension;</span><br><span class=\"line\">                resultMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\">            &#125; else if (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class=\"line\">                // Child wants to be our size, but our size is not fixed.</span><br><span class=\"line\">                // Constrain child to not be bigger than us.</span><br><span class=\"line\">                resultSize = size;</span><br><span class=\"line\">                resultMode = MeasureSpec.AT_MOST;</span><br><span class=\"line\">            &#125; else if (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class=\"line\">                // Child wants to determine its own size. It can&apos;t be</span><br><span class=\"line\">                // bigger than us.</span><br><span class=\"line\">                resultSize = size;</span><br><span class=\"line\">                resultMode = MeasureSpec.AT_MOST;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            break;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Parent asked to see how big we want to be</span><br><span class=\"line\">        case MeasureSpec.UNSPECIFIED:</span><br><span class=\"line\">            if (childDimension &gt;= 0) &#123;</span><br><span class=\"line\">                // Child wants a specific size... let him have it</span><br><span class=\"line\">                resultSize = childDimension;</span><br><span class=\"line\">                resultMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\">            &#125; else if (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class=\"line\">                // Child wants to be our size... find out how big it should</span><br><span class=\"line\">                // be</span><br><span class=\"line\">                resultSize = View.sUseZeroUnspecifiedMeasureSpec ? 0 : size;</span><br><span class=\"line\">                resultMode = MeasureSpec.UNSPECIFIED;</span><br><span class=\"line\">            &#125; else if (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class=\"line\">                // Child wants to determine its own size.... find out how</span><br><span class=\"line\">                // big it should be</span><br><span class=\"line\">                resultSize = View.sUseZeroUnspecifiedMeasureSpec ? 0 : size;</span><br><span class=\"line\">                resultMode = MeasureSpec.UNSPECIFIED;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return MeasureSpec.makeMeasureSpec(resultSize, resultMode);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>.view的meaure和onMeasure有什么关系？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//view的measure是final 方法 我们子类无法修改的。</span><br><span class=\"line\"> public final void measure(int widthMeasureSpec, int heightMeasureSpec) &#123;</span><br><span class=\"line\">        boolean optical = isLayoutModeOptical(this);</span><br><span class=\"line\">        if (optical != isLayoutModeOptical(mParent)) &#123;</span><br><span class=\"line\">            Insets insets = getOpticalInsets();</span><br><span class=\"line\">            int oWidth  = insets.left + insets.right;</span><br><span class=\"line\">            int oHeight = insets.top  + insets.bottom;</span><br><span class=\"line\">            widthMeasureSpec  = MeasureSpec.adjust(widthMeasureSpec,  optical ? -oWidth  : oWidth);</span><br><span class=\"line\">            heightMeasureSpec = MeasureSpec.adjust(heightMeasureSpec, optical ? -oHeight : oHeight);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Suppress sign extension for the low bytes</span><br><span class=\"line\">        long key = (long) widthMeasureSpec &lt;&lt; 32 | (long) heightMeasureSpec &amp; 0xffffffffL;</span><br><span class=\"line\">        if (mMeasureCache == null) mMeasureCache = new LongSparseLongArray(2);</span><br><span class=\"line\"></span><br><span class=\"line\">        if ((mPrivateFlags &amp; PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT ||</span><br><span class=\"line\">                widthMeasureSpec != mOldWidthMeasureSpec ||</span><br><span class=\"line\">                heightMeasureSpec != mOldHeightMeasureSpec) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            // first clears the measured dimension flag</span><br><span class=\"line\">            mPrivateFlags &amp;= ~PFLAG_MEASURED_DIMENSION_SET;</span><br><span class=\"line\"></span><br><span class=\"line\">            resolveRtlPropertiesIfNeeded();</span><br><span class=\"line\"></span><br><span class=\"line\">            int cacheIndex = (mPrivateFlags &amp; PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT ? -1 :</span><br><span class=\"line\">                    mMeasureCache.indexOfKey(key);</span><br><span class=\"line\">            if (cacheIndex &lt; 0 || sIgnoreMeasureCache) &#123;</span><br><span class=\"line\">                // measure ourselves, this should set the measured dimension flag back</span><br><span class=\"line\">                onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">                mPrivateFlags3 &amp;= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                long value = mMeasureCache.valueAt(cacheIndex);</span><br><span class=\"line\">                // Casting a long to int drops the high 32 bits, no mask needed</span><br><span class=\"line\">                setMeasuredDimensionRaw((int) (value &gt;&gt; 32), (int) value);</span><br><span class=\"line\">                mPrivateFlags3 |= PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            // flag not set, setMeasuredDimension() was not invoked, we raise</span><br><span class=\"line\">            // an exception to warn the developer</span><br><span class=\"line\">            if ((mPrivateFlags &amp; PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET) &#123;</span><br><span class=\"line\">                throw new IllegalStateException(&quot;View with id &quot; + getId() + &quot;: &quot;</span><br><span class=\"line\">                        + getClass().getName() + &quot;#onMeasure() did not set the&quot;</span><br><span class=\"line\">                        + &quot; measured dimension by calling&quot;</span><br><span class=\"line\">                        + &quot; setMeasuredDimension()&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            mPrivateFlags |= PFLAG_LAYOUT_REQUIRED;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        mOldWidthMeasureSpec = widthMeasureSpec;</span><br><span class=\"line\">        mOldHeightMeasureSpec = heightMeasureSpec;</span><br><span class=\"line\"></span><br><span class=\"line\">        mMeasureCache.put(key, ((long) mMeasuredWidth) &lt;&lt; 32 |</span><br><span class=\"line\">                (long) mMeasuredHeight &amp; 0xffffffffL); // suppress sign extension</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//不过可以看到的是在measure方法里调用了onMeasure方法</span><br><span class=\"line\">//所以就能知道 我们在自定义view的时候一定是重写这个方法！</span><br><span class=\"line\"> protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</span><br><span class=\"line\">        setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</span><br><span class=\"line\">                getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>简要分析view的measure流程？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">viewgroup 算出子view的spec以后 会调用子view的measure方法，而子view的measure方法 我们问题5也看过了实际上是调用的onMeasure方法。</span><br><span class=\"line\"></span><br><span class=\"line\">所以我们只要分析好onMeasure方法即可，注意onMeasure方法的参数 正是他的父view算出来的那2个spec的值(这里view的measure方法会把这个spec里的specSize值做略微的修改 这个部分 不做分析 因为measure方法修改specSize的部分很简单)。</span><br><span class=\"line\"></span><br><span class=\"line\">//可以看出来这个就是setMeasuredDimension方法的调用 这个方法看名字就知道就是确定view的测量宽高的</span><br><span class=\"line\">//所以我们分析的重点就是看这个getDefaultSize 方法 是怎么确定view的测量宽高的</span><br><span class=\"line\"> protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</span><br><span class=\"line\">        setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</span><br><span class=\"line\">                getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//这个方法特别简单 基本可以认为就是近似的返回spec中的specSize，除非你的specMode是UNSPECIFIED</span><br><span class=\"line\">//UNSPECIFIED 这个一般都是系统内部测量才用的到，这种时候返回size 也就是getSuggestedMinimumWidth的返回值</span><br><span class=\"line\"> public static int getDefaultSize(int size, int measureSpec) &#123;</span><br><span class=\"line\">        int result = size;</span><br><span class=\"line\">        int specMode = MeasureSpec.getMode(measureSpec);</span><br><span class=\"line\">        int specSize = MeasureSpec.getSize(measureSpec);</span><br><span class=\"line\"></span><br><span class=\"line\">        switch (specMode) &#123;</span><br><span class=\"line\">        case MeasureSpec.UNSPECIFIED:</span><br><span class=\"line\">            result = size;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case MeasureSpec.AT_MOST:</span><br><span class=\"line\">        case MeasureSpec.EXACTLY:</span><br><span class=\"line\">            result = specSize;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//跟view的背景相关 这里不多做分析了</span><br><span class=\"line\">protected int getSuggestedMinimumWidth() &#123;</span><br><span class=\"line\">        return (mBackground == null) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>.自定义view中 如果onMeasure方法 没有对wrap_content 做处理 会发生什么？为什么？怎么解决？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 如果没有对wrap_content做处理 ，那即使你在xml里设置为wrap_content.其效果也和match_parent相同。看问题4的分析。我们可以知道view自己的layout为wrap，那mode就是at_most（不管父亲view是什么specmode）.</span><br><span class=\"line\"></span><br><span class=\"line\">这种模式下宽高就是等于specSize(getDefaultSize函数分析可知)，而这里的specSize显然就是parentSize的大小。也就是父容器剩余的大小。那不就和我们直接设置成match_parent是一样的效果了么？</span><br><span class=\"line\"></span><br><span class=\"line\">解决方式就是在onMeasure里 针对wrap 来做特殊处理 比如指定一个默认的宽高，当发现是wrap_content 就设置这个默认宽高即可。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>为什么在activity的生命周期里无法获得测量宽高？有什么方法可以解决这个问题吗？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">因为measure的过程和activity的生命周期  没有任何关系。你无法确定在哪个生命周期执行完毕以后 view的measure过程一定走完。可以尝试如下几种方法 获取view的测量宽高。</span><br><span class=\"line\"></span><br><span class=\"line\">//重写activity的这个方法</span><br><span class=\"line\">public void onWindowFocusChanged(boolean hasFocus) &#123;</span><br><span class=\"line\">        super.onWindowFocusChanged(hasFocus);</span><br><span class=\"line\">        if (hasFocus) &#123;</span><br><span class=\"line\">            int width = tv.getMeasuredWidth();</span><br><span class=\"line\">            int height = tv.getMeasuredHeight();</span><br><span class=\"line\">            Log.v(&quot;burning&quot;, &quot;width==&quot; + width);</span><br><span class=\"line\">            Log.v(&quot;burning&quot;, &quot;height==&quot; + height);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">或者重写这个方法</span><br><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\">    protected void onStart() &#123;</span><br><span class=\"line\">        super.onStart();</span><br><span class=\"line\">        tv.post(new Runnable() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">                int width = tv.getMeasuredWidth();</span><br><span class=\"line\">                int height = tv.getMeasuredHeight();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">再或者：</span><br><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\">    protected void onStart() &#123;</span><br><span class=\"line\">        super.onStart();</span><br><span class=\"line\">        ViewTreeObserver observer = tv.getViewTreeObserver();</span><br><span class=\"line\">        observer.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onGlobalLayout() &#123;</span><br><span class=\"line\">                int width = tv.getMeasuredWidth();</span><br><span class=\"line\">                int height = tv.getMeasuredHeight();</span><br><span class=\"line\">                tv.getViewTreeObserver().removeOnGlobalLayoutListener(this);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>layout和onLayout方法有什么区别？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">layout是确定本身view的位置 而onLayout是确定所有子元素的位置。layout里面 就是通过serFrame方法设设定本身view的 四个顶点的位置。这4个位置以确定 自己view的位置就固定了。</span><br><span class=\"line\"></span><br><span class=\"line\">然后就调用onLayout来确定子元素的位置。view和viewgroup的onlayout方法都没有写。都留给我们自己给子元素布局</span><br></pre></td></tr></table></figure>\n<ul>\n<li>draw方法 大概有几个步骤？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一共是4个步骤， 绘制背景---------绘制自己--------绘制chrildren----绘制装饰。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>setWillNotDraw方法有什么用？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这个方法在view里。</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">     * If this view doesn&apos;t do any drawing on its own, set this flag to</span><br><span class=\"line\">     * allow further optimizations. By default, this flag is not set on</span><br><span class=\"line\">     * View, but could be set on some View subclasses such as ViewGroup.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * Typically, if you override &#123;@link #onDraw(android.graphics.Canvas)&#125;</span><br><span class=\"line\">     * you should clear this flag.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param willNotDraw whether or not this View draw on its own</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void setWillNotDraw(boolean willNotDraw) &#123;</span><br><span class=\"line\">        setFlags(willNotDraw ? WILL_NOT_DRAW : 0, DRAW_MASK);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">用于设置标志位的 也就是说 如果你的自定义view 不需要draw的话，就可以设置这个方法为true。这样系统知道你这个view 不需要draw 可以优化执行速度。viewgroup 一般都默认设置这个为true，因为viewgroup多数都是只负责布局，不负责draw的。而view 这个标志位 默认一般都是关闭的。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>自定义view 有哪些需要注意的点？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 主要是要处理wrap_content 和padding。否则xml 那边设置这2个属性就根本没用了。还有不要在view中使用handler 因为人家已经提供了post方法。如果是继承自viewGroup,那在onMeasure和onLayout里面 也要考虑padding和layout的影响。也就是说specSize 要算一下 。最后就是如果view的动画或者线程需要停止，可以考虑在onDetachedFromWindow里面来做。</span><br><span class=\"line\"></span><br><span class=\"line\">针对上述的几点，给出几个简单的自定义view 供大家理解。</span><br><span class=\"line\"></span><br><span class=\"line\">给出一个圆形的view 范例：</span><br><span class=\"line\"></span><br><span class=\"line\">package com.example.administrator.motioneventtest;</span><br><span class=\"line\"></span><br><span class=\"line\">import android.content.Context;</span><br><span class=\"line\">import android.graphics.Canvas;</span><br><span class=\"line\">import android.graphics.Color;</span><br><span class=\"line\">import android.graphics.Paint;</span><br><span class=\"line\">import android.util.AttributeSet;</span><br><span class=\"line\">import android.view.View;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by Administrator on 2016/2/4.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class CircleView extends View &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int mColor = Color.RED;</span><br><span class=\"line\">    private Paint mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);</span><br><span class=\"line\"></span><br><span class=\"line\">    private void init() &#123;</span><br><span class=\"line\">        mPaint.setColor(mColor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</span><br><span class=\"line\">        super.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">        int widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);</span><br><span class=\"line\">        int widthSpecSize = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class=\"line\">        int heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);</span><br><span class=\"line\">        int heightSpecSize = MeasureSpec.getSize(heightMeasureSpec);</span><br><span class=\"line\"></span><br><span class=\"line\">        //处理为wrap_content时的情况</span><br><span class=\"line\">        if (widthSpecMode == MeasureSpec.AT_MOST &amp;&amp; heightSpecMode == MeasureSpec.AT_MOST) &#123;</span><br><span class=\"line\">            setMeasuredDimension(200, 200);</span><br><span class=\"line\">        &#125; else if (widthSpecMode == MeasureSpec.AT_MOST) &#123;</span><br><span class=\"line\">            setMeasuredDimension(200, heightSpecSize);</span><br><span class=\"line\">        &#125; else if (heightSpecMode == MeasureSpec.AT_MOST) &#123;</span><br><span class=\"line\">            setMeasuredDimension(widthSpecSize, 200);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onDraw(Canvas canvas) &#123;</span><br><span class=\"line\">        super.onDraw(canvas);</span><br><span class=\"line\">        //处理padding的情况</span><br><span class=\"line\">        final int paddingLeft = getPaddingLeft();</span><br><span class=\"line\">        final int paddingRight = getPaddingRight();</span><br><span class=\"line\">        final int paddingTop = getPaddingTop();</span><br><span class=\"line\">        final int paddingBottom = getPaddingBottom();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        int width = getWidth() - paddingLeft - paddingRight;</span><br><span class=\"line\">        int height = getHeight() - paddingTop - paddingBottom;</span><br><span class=\"line\">        int radius = Math.min(width, height) / 2;</span><br><span class=\"line\">        canvas.drawCircle(paddingLeft + width / 2, paddingTop + height / 2, radius, mPaint);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public CircleView(Context context, AttributeSet attrs, int defStyleAttr) &#123;</span><br><span class=\"line\">        super(context, attrs, defStyleAttr);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public CircleView(Context context) &#123;</span><br><span class=\"line\">        super(context);</span><br><span class=\"line\">        init();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public CircleView(Context context, AttributeSet attrs) &#123;</span><br><span class=\"line\">        super(context, attrs);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">1. Measure 过程决定了 View 的测量宽/高，measure 过程结束后可以通过 getMeasuredWidth 和 getMeasuredHeight 方法获取 View 测量后的宽/高（正常情况下它都等于 View 最后的宽高，但是也有特殊情况）</span><br><span class=\"line\">2. Layout 决定了四个顶点的坐标和实际 View 的宽和高，完成以后可以通过 getTop,getBottom,getLeft,getRight 拿到四个顶点的坐标，通过 getWidth,getHeight得到最终实际的宽高。</span><br><span class=\"line\">3. Draw 决定 View 的显示，只有 draw 执行完毕以后，View 的内容才最终显示到屏幕上。</span><br></pre></td></tr></table></figure>"},{"title":"Android线程","toc":true,"date":"2016-05-30T14:27:26.000Z","_content":"- 进程优先级（Process Priority）\n  \n    - Foreground Process\n    ```\n    Foreground一般意味着用户双眼可见，可见却不一定是active。    在Android的世界里，一个Activity处于前台之时，如果能采集用    户的input事件，就可以判定为active，如果中途弹出一个Dialog    ，Dialog变成新的active实体，直接面对用户的操作。被部分遮    挡的activity尽管依然可见，但状态却变为inactive。\n    \n    ```\n    - Background Process\n    \n    ```\n    所谓的Background可以理解为不可见（invisible）。对于不可见的任务，Android也有重要性的区分。重要的后台任务定义为Service，如果一个进程包含Service（称为Service Process），那么在“重要性”上就会被系统区别对待，其优先级自然会高于不包含Service的进程（称为Background Process），最后还剩一类空进程（Empty Process）。Empty Process初看有些费解，一个Process如果什么都不做，还有什么存在的必要。其实Empty Process并不Empty，还存在不少的内存占用。\n    \n    ```\n<!-- more-->\n- 线程调度（Thread Scheduling）\n  \n```\nAndroid将线程分为多个group，其中两类group尤其重要。一类是default group，UI线程属于这一类。另一类是background group，工作线程应该归属到这一类。background group当中所有的线程加起来总共也只能分配到5～10%的time slice，剩下的全部分配给default group，这样设计显然能保证UI线程绘制UI的流畅性。\n\nAndroid开发者需要显式的将工作线程归于background group。\n\nnew Thread(new Runnable() {\n  @Override\n  public void run() {\n    Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);\n  }\n}).start();\n\n虽说Android系统在任务调度上是以线程为基础单位，设置单个thread的优先级也可以改变其所属的control groups，从而影响CPU time slice的分配。但进程的属性变化也会影响到线程的调度，当一个App进入后台的时候，该App所属的整个进程都将进入background group，以确保处于foreground，用户可见的新进程能获取到尽可能多的CPU资源。用adb可以查看不同进程的当前调度策略。\n\n$ adb shell ps -P\n\n当你的App重新被用户切换到前台的时候，进程当中所属的线程又会回归的原来的group。在这些用户频繁切换的过程当中，thread的优先级并不会发生变化，但系统在time slice的分配上却在不停的调整。\n\n移动端App新启线程一般都是为了保证UI的流畅性，增加App用户操作的响应度。但是否需要将任务放入工作线程需要先了解任务的瓶颈在哪，是i/o，gpu还是cpu？UI出现卡顿并不一定是UI线程出现了费时的计算，有可能是其它原因，比如layout层级太深。\n\n```\n- 用什么姿势开线程？\n\n    - new Thread()\n    - AsyncTask\n    - HandlerThread\n    - ThreadPoolExecutor\n    - IntentService\n```\n这是Android系统里开线程最简单的方式，也只能应用于最简单的场景，简单的好处却伴随不少的隐患。\n\nnew Thread(new Runnable() {\n            @Override\n            public void run() {\n \n            }\n        }).start();\n\n这种方式仅仅是起动了一个新的线程，没有任务的概念，不能做状态的管理。start之后，run当中的代码就一定会执行到底，无法中途取消。\n\nRunnable作为匿名内部类还持有了外部类的引用，在线程退出之前，该引用会一直存在，阻碍外部类对象被GC回收，在一段时间内造成内存泄漏。\n\n没有线程切换的接口，要传递处理结果到UI线程的话，需要写额外的线程切换代码。\n\n如果从UI线程启动，则该线程优先级默认为Default，归于default cgroup，会平等的和UI线程争夺CPU资源。这一点尤其需要注意，在对UI性能要求高的场景下要记得\n\nProcess.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);\n\n虽说处于background group的线程总共只能争取到5～10%的CPU资源，但这对绝大部分的后台任务处理都绰绰有余了，1ms和10ms对用户来说，都是快到无法感知，所以我们一般都偏向于在background group当中执行工作线程任务。\n\n```\n  \n  \n```\n一个典型的AsyncTask实现如下：\n\npublic class MyAsyncTask extends AsyncTask {\n \n        @Override\n        protected Object doInBackground(Object[] params) {\n            return null;\n        }\n \n        @Override\n        protected void onPreExecute() {\n            super.onPreExecute();\n        }\n \n        @Override\n        protected void onPostExecute(Object o) {\n            super.onPostExecute(o);\n        }\n    }\n\n和使用Thread()不同的是，多了几处API回调来严格规范工作线程与UI线程之间的交互。我们大部分的业务场景几乎都符合这种规范，比如去磁盘读取图片，缩放处理需要在工作线程执行，最后绘制到ImageView控件需要切换到UI线程。\n\nAsyncTask的几处回调都给了我们机会去中断任务，在任务状态的管理上较之Thread()方式更为灵活。值得注意的是AsyncTask的cancel()方法并不会终止任务的执行，开发者需要自己去检查cancel的状态值来决定是否中止任务。\n\nAsyncTask也有隐式的持有外部类对象引用的问题，需要特别注意防止出现意外的内存泄漏。\n\nAsyncTask由于在不同的系统版本上串行与并行的执行行为不一致，被不少开发者所诟病，这确实是硬伤，绝大部分的多线程场景都需要明确任务是串行还是并行。\n\n线程优先级为background，对UI线程的执行影响极小。\n\n```\n\n```\n\n在需要对多任务做更精细控制，线程切换更频繁的场景之下，Thread()和AsyncTask都会显得力不从心。HandlerThread却能胜任这些需求甚至更多。\n\nHandlerThread将Handler，Thread，Looper，MessageQueue几个概念相结合。Handler是线程对外的接口，所有新的message或者runnable都通过handler post到工作线程。Looper在MessageQueue取到新的任务就切换到工作线程去执行。不同的post方法可以让我们对任务做精细的控制，什么时候执行，执行的顺序都可以控制。HandlerThread最大的优势在于引入MessageQueue概念，可以进行多任务队列管理。\n\nHandlerThread背后只有一个线程，所以任务是串行执行的。串行相对于并行来说更安全，各任务之间不会存在多线程安全问题。\n\nHandlerThread所产生的线程会一直存活，Looper会在该线程中持续的检查MessageQueue。这一点和Thread()，AsyncTask都不同，thread实例的重用可以避免线程相关的对象的频繁重建和销毁。\n\nHandlerThread较之Thread()，AsyncTask需要写更多的代码，但在实用性，灵活度，安全性上都有更好的表现。\n\n```\n\n```\nThread(),AsyncTask适合处理单个任务的场景，HandlerThread适合串行处理多任务的场景。当需要并行的处理多任务之时，ThreadPoolExecutor是更好的选择。\n\npublic static Executor THREAD_POOL_EXECUTOR\n= new ThreadPoolExecutor(CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE,\nTimeUnit.SECONDS, sPoolWorkQueue, sThreadFactory);\n\n线程池可以避免线程的频繁创建和销毁，显然性能更好，但线程池并发的特性往往也是疑难杂症的源头，是代码降级和失控的开始。多线程并行导致的bug往往是偶现的，不方便调试，一旦出现就会耗掉大量的开发精力。\n\nThreadPool较之HandlerThread在处理多任务上有更高的灵活性，但也带来了更大的复杂度和不确定性。\n\n```\n\n```\nIntentService又是另一种开工作线程的方式，从名字就可以看出这个工作线程会带有service的属性。和AsyncTask不同，没有和UI线程的交互，也不像HandlerThread的工作线程会一直存活。IntentService背后其实也有一个HandlerThread来串行的处理Message Queue，从IntentService的onCreate方法可以看出：\n\n@Override\n    public void onCreate() {\n        // TODO: It would be nice to have an option to hold a partial wakelock\n        // during processing, and to have a static startService(Context, Intent)\n        // method that would launch the service & hand off a wakelock.\n \n        super.onCreate();\n        HandlerThread thread = new HandlerThread(\"IntentService[\" + mName + \"]\");\n        thread.start();\n \n        mServiceLooper = thread.getLooper();\n        mServiceHandler = new ServiceHandler(mServiceLooper);\n    }\n\n只不过在所有的Message处理完毕之后，工作线程会自动结束。所以可以把IntentService看做是Service和HandlerThread的结合体，适合需要在工作线程处理UI无关任务的场景。\n\n```\n\n","source":"_posts/Android线程.md","raw":"---\ntitle: Android线程\ntoc: true\ndate: 2016-05-30 22:27:26\ntags: 线程\ncategories: 性能优化\n---\n- 进程优先级（Process Priority）\n  \n    - Foreground Process\n    ```\n    Foreground一般意味着用户双眼可见，可见却不一定是active。    在Android的世界里，一个Activity处于前台之时，如果能采集用    户的input事件，就可以判定为active，如果中途弹出一个Dialog    ，Dialog变成新的active实体，直接面对用户的操作。被部分遮    挡的activity尽管依然可见，但状态却变为inactive。\n    \n    ```\n    - Background Process\n    \n    ```\n    所谓的Background可以理解为不可见（invisible）。对于不可见的任务，Android也有重要性的区分。重要的后台任务定义为Service，如果一个进程包含Service（称为Service Process），那么在“重要性”上就会被系统区别对待，其优先级自然会高于不包含Service的进程（称为Background Process），最后还剩一类空进程（Empty Process）。Empty Process初看有些费解，一个Process如果什么都不做，还有什么存在的必要。其实Empty Process并不Empty，还存在不少的内存占用。\n    \n    ```\n<!-- more-->\n- 线程调度（Thread Scheduling）\n  \n```\nAndroid将线程分为多个group，其中两类group尤其重要。一类是default group，UI线程属于这一类。另一类是background group，工作线程应该归属到这一类。background group当中所有的线程加起来总共也只能分配到5～10%的time slice，剩下的全部分配给default group，这样设计显然能保证UI线程绘制UI的流畅性。\n\nAndroid开发者需要显式的将工作线程归于background group。\n\nnew Thread(new Runnable() {\n  @Override\n  public void run() {\n    Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);\n  }\n}).start();\n\n虽说Android系统在任务调度上是以线程为基础单位，设置单个thread的优先级也可以改变其所属的control groups，从而影响CPU time slice的分配。但进程的属性变化也会影响到线程的调度，当一个App进入后台的时候，该App所属的整个进程都将进入background group，以确保处于foreground，用户可见的新进程能获取到尽可能多的CPU资源。用adb可以查看不同进程的当前调度策略。\n\n$ adb shell ps -P\n\n当你的App重新被用户切换到前台的时候，进程当中所属的线程又会回归的原来的group。在这些用户频繁切换的过程当中，thread的优先级并不会发生变化，但系统在time slice的分配上却在不停的调整。\n\n移动端App新启线程一般都是为了保证UI的流畅性，增加App用户操作的响应度。但是否需要将任务放入工作线程需要先了解任务的瓶颈在哪，是i/o，gpu还是cpu？UI出现卡顿并不一定是UI线程出现了费时的计算，有可能是其它原因，比如layout层级太深。\n\n```\n- 用什么姿势开线程？\n\n    - new Thread()\n    - AsyncTask\n    - HandlerThread\n    - ThreadPoolExecutor\n    - IntentService\n```\n这是Android系统里开线程最简单的方式，也只能应用于最简单的场景，简单的好处却伴随不少的隐患。\n\nnew Thread(new Runnable() {\n            @Override\n            public void run() {\n \n            }\n        }).start();\n\n这种方式仅仅是起动了一个新的线程，没有任务的概念，不能做状态的管理。start之后，run当中的代码就一定会执行到底，无法中途取消。\n\nRunnable作为匿名内部类还持有了外部类的引用，在线程退出之前，该引用会一直存在，阻碍外部类对象被GC回收，在一段时间内造成内存泄漏。\n\n没有线程切换的接口，要传递处理结果到UI线程的话，需要写额外的线程切换代码。\n\n如果从UI线程启动，则该线程优先级默认为Default，归于default cgroup，会平等的和UI线程争夺CPU资源。这一点尤其需要注意，在对UI性能要求高的场景下要记得\n\nProcess.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);\n\n虽说处于background group的线程总共只能争取到5～10%的CPU资源，但这对绝大部分的后台任务处理都绰绰有余了，1ms和10ms对用户来说，都是快到无法感知，所以我们一般都偏向于在background group当中执行工作线程任务。\n\n```\n  \n  \n```\n一个典型的AsyncTask实现如下：\n\npublic class MyAsyncTask extends AsyncTask {\n \n        @Override\n        protected Object doInBackground(Object[] params) {\n            return null;\n        }\n \n        @Override\n        protected void onPreExecute() {\n            super.onPreExecute();\n        }\n \n        @Override\n        protected void onPostExecute(Object o) {\n            super.onPostExecute(o);\n        }\n    }\n\n和使用Thread()不同的是，多了几处API回调来严格规范工作线程与UI线程之间的交互。我们大部分的业务场景几乎都符合这种规范，比如去磁盘读取图片，缩放处理需要在工作线程执行，最后绘制到ImageView控件需要切换到UI线程。\n\nAsyncTask的几处回调都给了我们机会去中断任务，在任务状态的管理上较之Thread()方式更为灵活。值得注意的是AsyncTask的cancel()方法并不会终止任务的执行，开发者需要自己去检查cancel的状态值来决定是否中止任务。\n\nAsyncTask也有隐式的持有外部类对象引用的问题，需要特别注意防止出现意外的内存泄漏。\n\nAsyncTask由于在不同的系统版本上串行与并行的执行行为不一致，被不少开发者所诟病，这确实是硬伤，绝大部分的多线程场景都需要明确任务是串行还是并行。\n\n线程优先级为background，对UI线程的执行影响极小。\n\n```\n\n```\n\n在需要对多任务做更精细控制，线程切换更频繁的场景之下，Thread()和AsyncTask都会显得力不从心。HandlerThread却能胜任这些需求甚至更多。\n\nHandlerThread将Handler，Thread，Looper，MessageQueue几个概念相结合。Handler是线程对外的接口，所有新的message或者runnable都通过handler post到工作线程。Looper在MessageQueue取到新的任务就切换到工作线程去执行。不同的post方法可以让我们对任务做精细的控制，什么时候执行，执行的顺序都可以控制。HandlerThread最大的优势在于引入MessageQueue概念，可以进行多任务队列管理。\n\nHandlerThread背后只有一个线程，所以任务是串行执行的。串行相对于并行来说更安全，各任务之间不会存在多线程安全问题。\n\nHandlerThread所产生的线程会一直存活，Looper会在该线程中持续的检查MessageQueue。这一点和Thread()，AsyncTask都不同，thread实例的重用可以避免线程相关的对象的频繁重建和销毁。\n\nHandlerThread较之Thread()，AsyncTask需要写更多的代码，但在实用性，灵活度，安全性上都有更好的表现。\n\n```\n\n```\nThread(),AsyncTask适合处理单个任务的场景，HandlerThread适合串行处理多任务的场景。当需要并行的处理多任务之时，ThreadPoolExecutor是更好的选择。\n\npublic static Executor THREAD_POOL_EXECUTOR\n= new ThreadPoolExecutor(CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE,\nTimeUnit.SECONDS, sPoolWorkQueue, sThreadFactory);\n\n线程池可以避免线程的频繁创建和销毁，显然性能更好，但线程池并发的特性往往也是疑难杂症的源头，是代码降级和失控的开始。多线程并行导致的bug往往是偶现的，不方便调试，一旦出现就会耗掉大量的开发精力。\n\nThreadPool较之HandlerThread在处理多任务上有更高的灵活性，但也带来了更大的复杂度和不确定性。\n\n```\n\n```\nIntentService又是另一种开工作线程的方式，从名字就可以看出这个工作线程会带有service的属性。和AsyncTask不同，没有和UI线程的交互，也不像HandlerThread的工作线程会一直存活。IntentService背后其实也有一个HandlerThread来串行的处理Message Queue，从IntentService的onCreate方法可以看出：\n\n@Override\n    public void onCreate() {\n        // TODO: It would be nice to have an option to hold a partial wakelock\n        // during processing, and to have a static startService(Context, Intent)\n        // method that would launch the service & hand off a wakelock.\n \n        super.onCreate();\n        HandlerThread thread = new HandlerThread(\"IntentService[\" + mName + \"]\");\n        thread.start();\n \n        mServiceLooper = thread.getLooper();\n        mServiceHandler = new ServiceHandler(mServiceLooper);\n    }\n\n只不过在所有的Message处理完毕之后，工作线程会自动结束。所以可以把IntentService看做是Service和HandlerThread的结合体，适合需要在工作线程处理UI无关任务的场景。\n\n```\n\n","slug":"Android线程","published":1,"updated":"2016-05-30T14:30:49.340Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou5386d0006f0vc06400pfs","content":"<ul>\n<li><p>进程优先级（Process Priority）</p>\n<ul>\n<li><p>Foreground Process</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Foreground一般意味着用户双眼可见，可见却不一定是active。    在Android的世界里，一个Activity处于前台之时，如果能采集用    户的input事件，就可以判定为active，如果中途弹出一个Dialog    ，Dialog变成新的active实体，直接面对用户的操作。被部分遮    挡的activity尽管依然可见，但状态却变为inactive。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Background Process</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">所谓的Background可以理解为不可见（invisible）。对于不可见的任务，Android也有重要性的区分。重要的后台任务定义为Service，如果一个进程包含Service（称为Service Process），那么在“重要性”上就会被系统区别对待，其优先级自然会高于不包含Service的进程（称为Background Process），最后还剩一类空进程（Empty Process）。Empty Process初看有些费解，一个Process如果什么都不做，还有什么存在的必要。其实Empty Process并不Empty，还存在不少的内存占用。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li>线程调度（Thread Scheduling）</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Android将线程分为多个group，其中两类group尤其重要。一类是default group，UI线程属于这一类。另一类是background group，工作线程应该归属到这一类。background group当中所有的线程加起来总共也只能分配到5～10%的time slice，剩下的全部分配给default group，这样设计显然能保证UI线程绘制UI的流畅性。</span><br><span class=\"line\"></span><br><span class=\"line\">Android开发者需要显式的将工作线程归于background group。</span><br><span class=\"line\"></span><br><span class=\"line\">new Thread(new Runnable() &#123;</span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public void run() &#123;</span><br><span class=\"line\">    Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">虽说Android系统在任务调度上是以线程为基础单位，设置单个thread的优先级也可以改变其所属的control groups，从而影响CPU time slice的分配。但进程的属性变化也会影响到线程的调度，当一个App进入后台的时候，该App所属的整个进程都将进入background group，以确保处于foreground，用户可见的新进程能获取到尽可能多的CPU资源。用adb可以查看不同进程的当前调度策略。</span><br><span class=\"line\"></span><br><span class=\"line\">$ adb shell ps -P</span><br><span class=\"line\"></span><br><span class=\"line\">当你的App重新被用户切换到前台的时候，进程当中所属的线程又会回归的原来的group。在这些用户频繁切换的过程当中，thread的优先级并不会发生变化，但系统在time slice的分配上却在不停的调整。</span><br><span class=\"line\"></span><br><span class=\"line\">移动端App新启线程一般都是为了保证UI的流畅性，增加App用户操作的响应度。但是否需要将任务放入工作线程需要先了解任务的瓶颈在哪，是i/o，gpu还是cpu？UI出现卡顿并不一定是UI线程出现了费时的计算，有可能是其它原因，比如layout层级太深。</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>用什么姿势开线程？</p>\n<ul>\n<li>new Thread()</li>\n<li>AsyncTask</li>\n<li>HandlerThread</li>\n<li>ThreadPoolExecutor</li>\n<li>IntentService<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是Android系统里开线程最简单的方式，也只能应用于最简单的场景，简单的好处却伴随不少的隐患。</span><br><span class=\"line\"></span><br><span class=\"line\">new Thread(new Runnable() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">这种方式仅仅是起动了一个新的线程，没有任务的概念，不能做状态的管理。start之后，run当中的代码就一定会执行到底，无法中途取消。</span><br><span class=\"line\"></span><br><span class=\"line\">Runnable作为匿名内部类还持有了外部类的引用，在线程退出之前，该引用会一直存在，阻碍外部类对象被GC回收，在一段时间内造成内存泄漏。</span><br><span class=\"line\"></span><br><span class=\"line\">没有线程切换的接口，要传递处理结果到UI线程的话，需要写额外的线程切换代码。</span><br><span class=\"line\"></span><br><span class=\"line\">如果从UI线程启动，则该线程优先级默认为Default，归于default cgroup，会平等的和UI线程争夺CPU资源。这一点尤其需要注意，在对UI性能要求高的场景下要记得</span><br><span class=\"line\"></span><br><span class=\"line\">Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</span><br><span class=\"line\"></span><br><span class=\"line\">虽说处于background group的线程总共只能争取到5～10%的CPU资源，但这对绝大部分的后台任务处理都绰绰有余了，1ms和10ms对用户来说，都是快到无法感知，所以我们一般都偏向于在background group当中执行工作线程任务。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个典型的AsyncTask实现如下：</span><br><span class=\"line\"></span><br><span class=\"line\">public class MyAsyncTask extends AsyncTask &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        protected Object doInBackground(Object[] params) &#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        protected void onPreExecute() &#123;</span><br><span class=\"line\">            super.onPreExecute();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        protected void onPostExecute(Object o) &#123;</span><br><span class=\"line\">            super.onPostExecute(o);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">和使用Thread()不同的是，多了几处API回调来严格规范工作线程与UI线程之间的交互。我们大部分的业务场景几乎都符合这种规范，比如去磁盘读取图片，缩放处理需要在工作线程执行，最后绘制到ImageView控件需要切换到UI线程。</span><br><span class=\"line\"></span><br><span class=\"line\">AsyncTask的几处回调都给了我们机会去中断任务，在任务状态的管理上较之Thread()方式更为灵活。值得注意的是AsyncTask的cancel()方法并不会终止任务的执行，开发者需要自己去检查cancel的状态值来决定是否中止任务。</span><br><span class=\"line\"></span><br><span class=\"line\">AsyncTask也有隐式的持有外部类对象引用的问题，需要特别注意防止出现意外的内存泄漏。</span><br><span class=\"line\"></span><br><span class=\"line\">AsyncTask由于在不同的系统版本上串行与并行的执行行为不一致，被不少开发者所诟病，这确实是硬伤，绝大部分的多线程场景都需要明确任务是串行还是并行。</span><br><span class=\"line\"></span><br><span class=\"line\">线程优先级为background，对UI线程的执行影响极小。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">在需要对多任务做更精细控制，线程切换更频繁的场景之下，Thread()和AsyncTask都会显得力不从心。HandlerThread却能胜任这些需求甚至更多。</span><br><span class=\"line\"></span><br><span class=\"line\">HandlerThread将Handler，Thread，Looper，MessageQueue几个概念相结合。Handler是线程对外的接口，所有新的message或者runnable都通过handler post到工作线程。Looper在MessageQueue取到新的任务就切换到工作线程去执行。不同的post方法可以让我们对任务做精细的控制，什么时候执行，执行的顺序都可以控制。HandlerThread最大的优势在于引入MessageQueue概念，可以进行多任务队列管理。</span><br><span class=\"line\"></span><br><span class=\"line\">HandlerThread背后只有一个线程，所以任务是串行执行的。串行相对于并行来说更安全，各任务之间不会存在多线程安全问题。</span><br><span class=\"line\"></span><br><span class=\"line\">HandlerThread所产生的线程会一直存活，Looper会在该线程中持续的检查MessageQueue。这一点和Thread()，AsyncTask都不同，thread实例的重用可以避免线程相关的对象的频繁重建和销毁。</span><br><span class=\"line\"></span><br><span class=\"line\">HandlerThread较之Thread()，AsyncTask需要写更多的代码，但在实用性，灵活度，安全性上都有更好的表现。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread(),AsyncTask适合处理单个任务的场景，HandlerThread适合串行处理多任务的场景。当需要并行的处理多任务之时，ThreadPoolExecutor是更好的选择。</span><br><span class=\"line\"></span><br><span class=\"line\">public static Executor THREAD_POOL_EXECUTOR</span><br><span class=\"line\">= new ThreadPoolExecutor(CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE,</span><br><span class=\"line\">TimeUnit.SECONDS, sPoolWorkQueue, sThreadFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">线程池可以避免线程的频繁创建和销毁，显然性能更好，但线程池并发的特性往往也是疑难杂症的源头，是代码降级和失控的开始。多线程并行导致的bug往往是偶现的，不方便调试，一旦出现就会耗掉大量的开发精力。</span><br><span class=\"line\"></span><br><span class=\"line\">ThreadPool较之HandlerThread在处理多任务上有更高的灵活性，但也带来了更大的复杂度和不确定性。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IntentService又是另一种开工作线程的方式，从名字就可以看出这个工作线程会带有service的属性。和AsyncTask不同，没有和UI线程的交互，也不像HandlerThread的工作线程会一直存活。IntentService背后其实也有一个HandlerThread来串行的处理Message Queue，从IntentService的onCreate方法可以看出：</span><br><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\">    public void onCreate() &#123;</span><br><span class=\"line\">        // TODO: It would be nice to have an option to hold a partial wakelock</span><br><span class=\"line\">        // during processing, and to have a static startService(Context, Intent)</span><br><span class=\"line\">        // method that would launch the service &amp; hand off a wakelock.</span><br><span class=\"line\"> </span><br><span class=\"line\">        super.onCreate();</span><br><span class=\"line\">        HandlerThread thread = new HandlerThread(&quot;IntentService[&quot; + mName + &quot;]&quot;);</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\"> </span><br><span class=\"line\">        mServiceLooper = thread.getLooper();</span><br><span class=\"line\">        mServiceHandler = new ServiceHandler(mServiceLooper);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">只不过在所有的Message处理完毕之后，工作线程会自动结束。所以可以把IntentService看做是Service和HandlerThread的结合体，适合需要在工作线程处理UI无关任务的场景。</span><br></pre></td></tr></table></figure>\n","excerpt":"<ul>\n<li><p>进程优先级（Process Priority）</p>\n<ul>\n<li><p>Foreground Process</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Foreground一般意味着用户双眼可见，可见却不一定是active。    在Android的世界里，一个Activity处于前台之时，如果能采集用    户的input事件，就可以判定为active，如果中途弹出一个Dialog    ，Dialog变成新的active实体，直接面对用户的操作。被部分遮    挡的activity尽管依然可见，但状态却变为inactive。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Background Process</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">所谓的Background可以理解为不可见（invisible）。对于不可见的任务，Android也有重要性的区分。重要的后台任务定义为Service，如果一个进程包含Service（称为Service Process），那么在“重要性”上就会被系统区别对待，其优先级自然会高于不包含Service的进程（称为Background Process），最后还剩一类空进程（Empty Process）。Empty Process初看有些费解，一个Process如果什么都不做，还有什么存在的必要。其实Empty Process并不Empty，还存在不少的内存占用。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>","more":"<ul>\n<li>线程调度（Thread Scheduling）</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Android将线程分为多个group，其中两类group尤其重要。一类是default group，UI线程属于这一类。另一类是background group，工作线程应该归属到这一类。background group当中所有的线程加起来总共也只能分配到5～10%的time slice，剩下的全部分配给default group，这样设计显然能保证UI线程绘制UI的流畅性。</span><br><span class=\"line\"></span><br><span class=\"line\">Android开发者需要显式的将工作线程归于background group。</span><br><span class=\"line\"></span><br><span class=\"line\">new Thread(new Runnable() &#123;</span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public void run() &#123;</span><br><span class=\"line\">    Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">虽说Android系统在任务调度上是以线程为基础单位，设置单个thread的优先级也可以改变其所属的control groups，从而影响CPU time slice的分配。但进程的属性变化也会影响到线程的调度，当一个App进入后台的时候，该App所属的整个进程都将进入background group，以确保处于foreground，用户可见的新进程能获取到尽可能多的CPU资源。用adb可以查看不同进程的当前调度策略。</span><br><span class=\"line\"></span><br><span class=\"line\">$ adb shell ps -P</span><br><span class=\"line\"></span><br><span class=\"line\">当你的App重新被用户切换到前台的时候，进程当中所属的线程又会回归的原来的group。在这些用户频繁切换的过程当中，thread的优先级并不会发生变化，但系统在time slice的分配上却在不停的调整。</span><br><span class=\"line\"></span><br><span class=\"line\">移动端App新启线程一般都是为了保证UI的流畅性，增加App用户操作的响应度。但是否需要将任务放入工作线程需要先了解任务的瓶颈在哪，是i/o，gpu还是cpu？UI出现卡顿并不一定是UI线程出现了费时的计算，有可能是其它原因，比如layout层级太深。</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>用什么姿势开线程？</p>\n<ul>\n<li>new Thread()</li>\n<li>AsyncTask</li>\n<li>HandlerThread</li>\n<li>ThreadPoolExecutor</li>\n<li>IntentService<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是Android系统里开线程最简单的方式，也只能应用于最简单的场景，简单的好处却伴随不少的隐患。</span><br><span class=\"line\"></span><br><span class=\"line\">new Thread(new Runnable() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">这种方式仅仅是起动了一个新的线程，没有任务的概念，不能做状态的管理。start之后，run当中的代码就一定会执行到底，无法中途取消。</span><br><span class=\"line\"></span><br><span class=\"line\">Runnable作为匿名内部类还持有了外部类的引用，在线程退出之前，该引用会一直存在，阻碍外部类对象被GC回收，在一段时间内造成内存泄漏。</span><br><span class=\"line\"></span><br><span class=\"line\">没有线程切换的接口，要传递处理结果到UI线程的话，需要写额外的线程切换代码。</span><br><span class=\"line\"></span><br><span class=\"line\">如果从UI线程启动，则该线程优先级默认为Default，归于default cgroup，会平等的和UI线程争夺CPU资源。这一点尤其需要注意，在对UI性能要求高的场景下要记得</span><br><span class=\"line\"></span><br><span class=\"line\">Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</span><br><span class=\"line\"></span><br><span class=\"line\">虽说处于background group的线程总共只能争取到5～10%的CPU资源，但这对绝大部分的后台任务处理都绰绰有余了，1ms和10ms对用户来说，都是快到无法感知，所以我们一般都偏向于在background group当中执行工作线程任务。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个典型的AsyncTask实现如下：</span><br><span class=\"line\"></span><br><span class=\"line\">public class MyAsyncTask extends AsyncTask &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        protected Object doInBackground(Object[] params) &#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        protected void onPreExecute() &#123;</span><br><span class=\"line\">            super.onPreExecute();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        protected void onPostExecute(Object o) &#123;</span><br><span class=\"line\">            super.onPostExecute(o);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">和使用Thread()不同的是，多了几处API回调来严格规范工作线程与UI线程之间的交互。我们大部分的业务场景几乎都符合这种规范，比如去磁盘读取图片，缩放处理需要在工作线程执行，最后绘制到ImageView控件需要切换到UI线程。</span><br><span class=\"line\"></span><br><span class=\"line\">AsyncTask的几处回调都给了我们机会去中断任务，在任务状态的管理上较之Thread()方式更为灵活。值得注意的是AsyncTask的cancel()方法并不会终止任务的执行，开发者需要自己去检查cancel的状态值来决定是否中止任务。</span><br><span class=\"line\"></span><br><span class=\"line\">AsyncTask也有隐式的持有外部类对象引用的问题，需要特别注意防止出现意外的内存泄漏。</span><br><span class=\"line\"></span><br><span class=\"line\">AsyncTask由于在不同的系统版本上串行与并行的执行行为不一致，被不少开发者所诟病，这确实是硬伤，绝大部分的多线程场景都需要明确任务是串行还是并行。</span><br><span class=\"line\"></span><br><span class=\"line\">线程优先级为background，对UI线程的执行影响极小。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">在需要对多任务做更精细控制，线程切换更频繁的场景之下，Thread()和AsyncTask都会显得力不从心。HandlerThread却能胜任这些需求甚至更多。</span><br><span class=\"line\"></span><br><span class=\"line\">HandlerThread将Handler，Thread，Looper，MessageQueue几个概念相结合。Handler是线程对外的接口，所有新的message或者runnable都通过handler post到工作线程。Looper在MessageQueue取到新的任务就切换到工作线程去执行。不同的post方法可以让我们对任务做精细的控制，什么时候执行，执行的顺序都可以控制。HandlerThread最大的优势在于引入MessageQueue概念，可以进行多任务队列管理。</span><br><span class=\"line\"></span><br><span class=\"line\">HandlerThread背后只有一个线程，所以任务是串行执行的。串行相对于并行来说更安全，各任务之间不会存在多线程安全问题。</span><br><span class=\"line\"></span><br><span class=\"line\">HandlerThread所产生的线程会一直存活，Looper会在该线程中持续的检查MessageQueue。这一点和Thread()，AsyncTask都不同，thread实例的重用可以避免线程相关的对象的频繁重建和销毁。</span><br><span class=\"line\"></span><br><span class=\"line\">HandlerThread较之Thread()，AsyncTask需要写更多的代码，但在实用性，灵活度，安全性上都有更好的表现。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread(),AsyncTask适合处理单个任务的场景，HandlerThread适合串行处理多任务的场景。当需要并行的处理多任务之时，ThreadPoolExecutor是更好的选择。</span><br><span class=\"line\"></span><br><span class=\"line\">public static Executor THREAD_POOL_EXECUTOR</span><br><span class=\"line\">= new ThreadPoolExecutor(CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE,</span><br><span class=\"line\">TimeUnit.SECONDS, sPoolWorkQueue, sThreadFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">线程池可以避免线程的频繁创建和销毁，显然性能更好，但线程池并发的特性往往也是疑难杂症的源头，是代码降级和失控的开始。多线程并行导致的bug往往是偶现的，不方便调试，一旦出现就会耗掉大量的开发精力。</span><br><span class=\"line\"></span><br><span class=\"line\">ThreadPool较之HandlerThread在处理多任务上有更高的灵活性，但也带来了更大的复杂度和不确定性。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IntentService又是另一种开工作线程的方式，从名字就可以看出这个工作线程会带有service的属性。和AsyncTask不同，没有和UI线程的交互，也不像HandlerThread的工作线程会一直存活。IntentService背后其实也有一个HandlerThread来串行的处理Message Queue，从IntentService的onCreate方法可以看出：</span><br><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\">    public void onCreate() &#123;</span><br><span class=\"line\">        // TODO: It would be nice to have an option to hold a partial wakelock</span><br><span class=\"line\">        // during processing, and to have a static startService(Context, Intent)</span><br><span class=\"line\">        // method that would launch the service &amp; hand off a wakelock.</span><br><span class=\"line\"> </span><br><span class=\"line\">        super.onCreate();</span><br><span class=\"line\">        HandlerThread thread = new HandlerThread(&quot;IntentService[&quot; + mName + &quot;]&quot;);</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\"> </span><br><span class=\"line\">        mServiceLooper = thread.getLooper();</span><br><span class=\"line\">        mServiceHandler = new ServiceHandler(mServiceLooper);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">只不过在所有的Message处理完毕之后，工作线程会自动结束。所以可以把IntentService看做是Service和HandlerThread的结合体，适合需要在工作线程处理UI无关任务的场景。</span><br></pre></td></tr></table></figure>"},{"title":"Drawable、Bitmap、String、InputStream、Bitmap、byte数组互转","toc":true,"date":"2016-05-30T14:53:04.000Z","_content":"```\n对于Drawable、Bitmap、Canvas和Paint它们之间的概念不是很清楚，其实它们除了Drawable外早在Sun的J2ME中就已经出现了，但是在Android平台中，Bitmap、Canvas相关的都有所变化。首先让我们理解下Android平台中的显示类是View，但是还提供了底层图形类android.graphics，今天所说的这些均为graphics底层图形接口。 Bitmap - 称作位图，一般位图的文件格式后缀为bmp，当然编码器也有很多如RGB565、RGB888。作为一种逐像素的显示对象执行效率高，但是缺点也很明显存储效率低。我们理解为一种存储对象比较好。 Drawable - 作为Android平下通用的图形对象，它可以装载常用格式的图像，比如GIF、PNG、JPG，当然也支持BMP，当然还提供一些高级的可视化对象，比如渐变、图形等。 Canvas - 名为画布，我们可以看作是一种处理过程，使用各种方法来管理Bitmap、GL或者Path路径，同时它可以配合Matrix矩阵类给图像做旋转、缩放等操作，同时Canvas类还提供了裁剪、选取等操作。 Paint - 我们可以把它看做一个画图工具，比如画笔、画刷。他管理了每个画图工具的字体、颜色、样式。如果涉及一些Android游戏开发、显示特效可以通过这些底层图形类来高效实现自己的应用\n\n```\n<!-- more-->\n\nDrawable转Bitmap\n\n```\nResources res = getResources();\nDrawable drawable = res.getDrawable(R.drawable.myimage);\nBitmapDrawable bd = (BitmapDrawable) d;\nBitmap bm = bd.getBitmap();\n\n\npublic static Bitmap drawableToBitmap(Drawable drawable) {\nBitmap bitmap = Bitmap.createBitmap(\ndrawable.getIntrinsicWidth(),\ndrawable.getIntrinsicHeight(),\ndrawable.getOpacity() != PixelFormat.OPAQUE ?Bitmap.Config.ARGB_8888\n: Bitmap.Config.RGB_565);\nCanvas canvas = new Canvas(bitmap);\n//canvas.setBitmap(bitmap);\ndrawable.setBounds(0, 0, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());\ndrawable.draw(canvas);\nreturn bitmap;\n}\n\n```\n- Bitmap转Drawable\n\n```\n\nBitmap bm=xxx; //xxx根据你的情况获取\nBitmapDrawable bd=BitmapDrawable(bm);\nBtimapDrawable是Drawable的子类，最终直接使用bd对象即可。\n\nmPicPath//本地图片路径转成Bitmap格式\nBitmap pic = BitmapFactory.decodeFile(this.mPicPath);\nimage.setImageBitmap(pic);\n转成Bitmap格式\n\n```\n\n- String to InputStream\n\n```\n\nString str = \"String与InputStream相互转换\";\nInputStream   in_nocode   =   new   ByteArrayInputStream(str.getBytes());   \nInputStream   in_withcode   =   new   ByteArrayInputStream(str.getBytes(\"UTF-8\"));\n\n```\n\n- InputStream to String\n\n```\npublic String convertStreamToString(InputStream is) {\nBufferedReader reader = new BufferedReader(new InputStreamReader(is));\nStringBuilder sb = new StringBuilder();\n\nString line = null;\ntry {\nwhile ((line = reader.readLine()) != null) {\nsb.append(line + \"/n\");\n}\n} catch (IOException e) {\ne.printStackTrace();\n} finally {\ntry {\nis.close();\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\n\nreturn sb.toString();\n}\n\n---\n\npublic String inputStream2String (InputStream in) throws IOException {\nStringBuffer out = new StringBuffer();\nbyte[] b = new byte[4096];\nfor (int n; (n = in.read(b)) != -1;) {\nout.append(new String(b, 0, n));\n}\nreturn out.toString();\n}\n\n---\n\npublic static String inputStream2String(InputStream is) throws IOException{\nByteArrayOutputStream baos = new ByteArrayOutputStream();\nint i=-1;\nwhile((i=is.read())!=-1){\nbaos.write(i);\n}\nreturn baos.toString();\n}\n\n```\n\n- Bitmap → byte[]\n\n```\n\nprivate byte[] Bitmap2Bytes(Bitmap bm){\nByteArrayOutputStream baos = new ByteArrayOutputStream();\nbm.compress(Bitmap.CompressFormat.PNG, 100, baos);\nreturn baos.toByteArray(); }\n\n```\n\n- byte[] → Bitmap\n\n```\nprivate Bitmap Bytes2Bimap(byte[] b){\nif(b.length!=0){\nreturn BitmapFactory.decodeByteArray(b, 0, b.length);\n}\nelse {\nreturn null;\n}\n}\n\n```\n","source":"_posts/Drawable、Bitmap、String、InputStream、Bitmap、byte数组互转.md","raw":"---\ntitle: Drawable、Bitmap、String、InputStream、Bitmap、byte数组互转\ntoc: true\ndate: 2016-05-30 22:53:04\ntags: \n- Bitmap\n- Drawable\ncategories: Utils\n---\n```\n对于Drawable、Bitmap、Canvas和Paint它们之间的概念不是很清楚，其实它们除了Drawable外早在Sun的J2ME中就已经出现了，但是在Android平台中，Bitmap、Canvas相关的都有所变化。首先让我们理解下Android平台中的显示类是View，但是还提供了底层图形类android.graphics，今天所说的这些均为graphics底层图形接口。 Bitmap - 称作位图，一般位图的文件格式后缀为bmp，当然编码器也有很多如RGB565、RGB888。作为一种逐像素的显示对象执行效率高，但是缺点也很明显存储效率低。我们理解为一种存储对象比较好。 Drawable - 作为Android平下通用的图形对象，它可以装载常用格式的图像，比如GIF、PNG、JPG，当然也支持BMP，当然还提供一些高级的可视化对象，比如渐变、图形等。 Canvas - 名为画布，我们可以看作是一种处理过程，使用各种方法来管理Bitmap、GL或者Path路径，同时它可以配合Matrix矩阵类给图像做旋转、缩放等操作，同时Canvas类还提供了裁剪、选取等操作。 Paint - 我们可以把它看做一个画图工具，比如画笔、画刷。他管理了每个画图工具的字体、颜色、样式。如果涉及一些Android游戏开发、显示特效可以通过这些底层图形类来高效实现自己的应用\n\n```\n<!-- more-->\n\nDrawable转Bitmap\n\n```\nResources res = getResources();\nDrawable drawable = res.getDrawable(R.drawable.myimage);\nBitmapDrawable bd = (BitmapDrawable) d;\nBitmap bm = bd.getBitmap();\n\n\npublic static Bitmap drawableToBitmap(Drawable drawable) {\nBitmap bitmap = Bitmap.createBitmap(\ndrawable.getIntrinsicWidth(),\ndrawable.getIntrinsicHeight(),\ndrawable.getOpacity() != PixelFormat.OPAQUE ?Bitmap.Config.ARGB_8888\n: Bitmap.Config.RGB_565);\nCanvas canvas = new Canvas(bitmap);\n//canvas.setBitmap(bitmap);\ndrawable.setBounds(0, 0, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());\ndrawable.draw(canvas);\nreturn bitmap;\n}\n\n```\n- Bitmap转Drawable\n\n```\n\nBitmap bm=xxx; //xxx根据你的情况获取\nBitmapDrawable bd=BitmapDrawable(bm);\nBtimapDrawable是Drawable的子类，最终直接使用bd对象即可。\n\nmPicPath//本地图片路径转成Bitmap格式\nBitmap pic = BitmapFactory.decodeFile(this.mPicPath);\nimage.setImageBitmap(pic);\n转成Bitmap格式\n\n```\n\n- String to InputStream\n\n```\n\nString str = \"String与InputStream相互转换\";\nInputStream   in_nocode   =   new   ByteArrayInputStream(str.getBytes());   \nInputStream   in_withcode   =   new   ByteArrayInputStream(str.getBytes(\"UTF-8\"));\n\n```\n\n- InputStream to String\n\n```\npublic String convertStreamToString(InputStream is) {\nBufferedReader reader = new BufferedReader(new InputStreamReader(is));\nStringBuilder sb = new StringBuilder();\n\nString line = null;\ntry {\nwhile ((line = reader.readLine()) != null) {\nsb.append(line + \"/n\");\n}\n} catch (IOException e) {\ne.printStackTrace();\n} finally {\ntry {\nis.close();\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\n\nreturn sb.toString();\n}\n\n---\n\npublic String inputStream2String (InputStream in) throws IOException {\nStringBuffer out = new StringBuffer();\nbyte[] b = new byte[4096];\nfor (int n; (n = in.read(b)) != -1;) {\nout.append(new String(b, 0, n));\n}\nreturn out.toString();\n}\n\n---\n\npublic static String inputStream2String(InputStream is) throws IOException{\nByteArrayOutputStream baos = new ByteArrayOutputStream();\nint i=-1;\nwhile((i=is.read())!=-1){\nbaos.write(i);\n}\nreturn baos.toString();\n}\n\n```\n\n- Bitmap → byte[]\n\n```\n\nprivate byte[] Bitmap2Bytes(Bitmap bm){\nByteArrayOutputStream baos = new ByteArrayOutputStream();\nbm.compress(Bitmap.CompressFormat.PNG, 100, baos);\nreturn baos.toByteArray(); }\n\n```\n\n- byte[] → Bitmap\n\n```\nprivate Bitmap Bytes2Bimap(byte[] b){\nif(b.length!=0){\nreturn BitmapFactory.decodeByteArray(b, 0, b.length);\n}\nelse {\nreturn null;\n}\n}\n\n```\n","slug":"Drawable、Bitmap、String、InputStream、Bitmap、byte数组互转","published":1,"updated":"2016-05-30T14:55:16.669Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou5386k0007f0vcstcxrhpk","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对于Drawable、Bitmap、Canvas和Paint它们之间的概念不是很清楚，其实它们除了Drawable外早在Sun的J2ME中就已经出现了，但是在Android平台中，Bitmap、Canvas相关的都有所变化。首先让我们理解下Android平台中的显示类是View，但是还提供了底层图形类android.graphics，今天所说的这些均为graphics底层图形接口。 Bitmap - 称作位图，一般位图的文件格式后缀为bmp，当然编码器也有很多如RGB565、RGB888。作为一种逐像素的显示对象执行效率高，但是缺点也很明显存储效率低。我们理解为一种存储对象比较好。 Drawable - 作为Android平下通用的图形对象，它可以装载常用格式的图像，比如GIF、PNG、JPG，当然也支持BMP，当然还提供一些高级的可视化对象，比如渐变、图形等。 Canvas - 名为画布，我们可以看作是一种处理过程，使用各种方法来管理Bitmap、GL或者Path路径，同时它可以配合Matrix矩阵类给图像做旋转、缩放等操作，同时Canvas类还提供了裁剪、选取等操作。 Paint - 我们可以把它看做一个画图工具，比如画笔、画刷。他管理了每个画图工具的字体、颜色、样式。如果涉及一些Android游戏开发、显示特效可以通过这些底层图形类来高效实现自己的应用</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>Drawable转Bitmap</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Resources res = getResources();</span><br><span class=\"line\">Drawable drawable = res.getDrawable(R.drawable.myimage);</span><br><span class=\"line\">BitmapDrawable bd = (BitmapDrawable) d;</span><br><span class=\"line\">Bitmap bm = bd.getBitmap();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public static Bitmap drawableToBitmap(Drawable drawable) &#123;</span><br><span class=\"line\">Bitmap bitmap = Bitmap.createBitmap(</span><br><span class=\"line\">drawable.getIntrinsicWidth(),</span><br><span class=\"line\">drawable.getIntrinsicHeight(),</span><br><span class=\"line\">drawable.getOpacity() != PixelFormat.OPAQUE ?Bitmap.Config.ARGB_8888</span><br><span class=\"line\">: Bitmap.Config.RGB_565);</span><br><span class=\"line\">Canvas canvas = new Canvas(bitmap);</span><br><span class=\"line\">//canvas.setBitmap(bitmap);</span><br><span class=\"line\">drawable.setBounds(0, 0, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());</span><br><span class=\"line\">drawable.draw(canvas);</span><br><span class=\"line\">return bitmap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Bitmap转Drawable</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Bitmap bm=xxx; //xxx根据你的情况获取</span><br><span class=\"line\">BitmapDrawable bd=BitmapDrawable(bm);</span><br><span class=\"line\">BtimapDrawable是Drawable的子类，最终直接使用bd对象即可。</span><br><span class=\"line\"></span><br><span class=\"line\">mPicPath//本地图片路径转成Bitmap格式</span><br><span class=\"line\">Bitmap pic = BitmapFactory.decodeFile(this.mPicPath);</span><br><span class=\"line\">image.setImageBitmap(pic);</span><br><span class=\"line\">转成Bitmap格式</span><br></pre></td></tr></table></figure>\n<ul>\n<li>String to InputStream</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">String str = &quot;String与InputStream相互转换&quot;;</span><br><span class=\"line\">InputStream   in_nocode   =   new   ByteArrayInputStream(str.getBytes());   </span><br><span class=\"line\">InputStream   in_withcode   =   new   ByteArrayInputStream(str.getBytes(&quot;UTF-8&quot;));</span><br></pre></td></tr></table></figure>\n<ul>\n<li>InputStream to String</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public String convertStreamToString(InputStream is) &#123;</span><br><span class=\"line\">BufferedReader reader = new BufferedReader(new InputStreamReader(is));</span><br><span class=\"line\">StringBuilder sb = new StringBuilder();</span><br><span class=\"line\"></span><br><span class=\"line\">String line = null;</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">while ((line = reader.readLine()) != null) &#123;</span><br><span class=\"line\">sb.append(line + &quot;/n&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125; catch (IOException e) &#123;</span><br><span class=\"line\">e.printStackTrace();</span><br><span class=\"line\">&#125; finally &#123;</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">is.close();</span><br><span class=\"line\">&#125; catch (IOException e) &#123;</span><br><span class=\"line\">e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">return sb.toString();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">public String inputStream2String (InputStream in) throws IOException &#123;</span><br><span class=\"line\">StringBuffer out = new StringBuffer();</span><br><span class=\"line\">byte[] b = new byte[4096];</span><br><span class=\"line\">for (int n; (n = in.read(b)) != -1;) &#123;</span><br><span class=\"line\">out.append(new String(b, 0, n));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return out.toString();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">public static String inputStream2String(InputStream is) throws IOException&#123;</span><br><span class=\"line\">ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class=\"line\">int i=-1;</span><br><span class=\"line\">while((i=is.read())!=-1)&#123;</span><br><span class=\"line\">baos.write(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return baos.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Bitmap → byte[]</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">private byte[] Bitmap2Bytes(Bitmap bm)&#123;</span><br><span class=\"line\">ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class=\"line\">bm.compress(Bitmap.CompressFormat.PNG, 100, baos);</span><br><span class=\"line\">return baos.toByteArray(); &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>byte[] → Bitmap</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private Bitmap Bytes2Bimap(byte[] b)&#123;</span><br><span class=\"line\">if(b.length!=0)&#123;</span><br><span class=\"line\">return BitmapFactory.decodeByteArray(b, 0, b.length);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else &#123;</span><br><span class=\"line\">return null;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对于Drawable、Bitmap、Canvas和Paint它们之间的概念不是很清楚，其实它们除了Drawable外早在Sun的J2ME中就已经出现了，但是在Android平台中，Bitmap、Canvas相关的都有所变化。首先让我们理解下Android平台中的显示类是View，但是还提供了底层图形类android.graphics，今天所说的这些均为graphics底层图形接口。 Bitmap - 称作位图，一般位图的文件格式后缀为bmp，当然编码器也有很多如RGB565、RGB888。作为一种逐像素的显示对象执行效率高，但是缺点也很明显存储效率低。我们理解为一种存储对象比较好。 Drawable - 作为Android平下通用的图形对象，它可以装载常用格式的图像，比如GIF、PNG、JPG，当然也支持BMP，当然还提供一些高级的可视化对象，比如渐变、图形等。 Canvas - 名为画布，我们可以看作是一种处理过程，使用各种方法来管理Bitmap、GL或者Path路径，同时它可以配合Matrix矩阵类给图像做旋转、缩放等操作，同时Canvas类还提供了裁剪、选取等操作。 Paint - 我们可以把它看做一个画图工具，比如画笔、画刷。他管理了每个画图工具的字体、颜色、样式。如果涉及一些Android游戏开发、显示特效可以通过这些底层图形类来高效实现自己的应用</span><br></pre></td></tr></table></figure>","more":"<p>Drawable转Bitmap</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Resources res = getResources();</span><br><span class=\"line\">Drawable drawable = res.getDrawable(R.drawable.myimage);</span><br><span class=\"line\">BitmapDrawable bd = (BitmapDrawable) d;</span><br><span class=\"line\">Bitmap bm = bd.getBitmap();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public static Bitmap drawableToBitmap(Drawable drawable) &#123;</span><br><span class=\"line\">Bitmap bitmap = Bitmap.createBitmap(</span><br><span class=\"line\">drawable.getIntrinsicWidth(),</span><br><span class=\"line\">drawable.getIntrinsicHeight(),</span><br><span class=\"line\">drawable.getOpacity() != PixelFormat.OPAQUE ?Bitmap.Config.ARGB_8888</span><br><span class=\"line\">: Bitmap.Config.RGB_565);</span><br><span class=\"line\">Canvas canvas = new Canvas(bitmap);</span><br><span class=\"line\">//canvas.setBitmap(bitmap);</span><br><span class=\"line\">drawable.setBounds(0, 0, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());</span><br><span class=\"line\">drawable.draw(canvas);</span><br><span class=\"line\">return bitmap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Bitmap转Drawable</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Bitmap bm=xxx; //xxx根据你的情况获取</span><br><span class=\"line\">BitmapDrawable bd=BitmapDrawable(bm);</span><br><span class=\"line\">BtimapDrawable是Drawable的子类，最终直接使用bd对象即可。</span><br><span class=\"line\"></span><br><span class=\"line\">mPicPath//本地图片路径转成Bitmap格式</span><br><span class=\"line\">Bitmap pic = BitmapFactory.decodeFile(this.mPicPath);</span><br><span class=\"line\">image.setImageBitmap(pic);</span><br><span class=\"line\">转成Bitmap格式</span><br></pre></td></tr></table></figure>\n<ul>\n<li>String to InputStream</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">String str = &quot;String与InputStream相互转换&quot;;</span><br><span class=\"line\">InputStream   in_nocode   =   new   ByteArrayInputStream(str.getBytes());   </span><br><span class=\"line\">InputStream   in_withcode   =   new   ByteArrayInputStream(str.getBytes(&quot;UTF-8&quot;));</span><br></pre></td></tr></table></figure>\n<ul>\n<li>InputStream to String</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public String convertStreamToString(InputStream is) &#123;</span><br><span class=\"line\">BufferedReader reader = new BufferedReader(new InputStreamReader(is));</span><br><span class=\"line\">StringBuilder sb = new StringBuilder();</span><br><span class=\"line\"></span><br><span class=\"line\">String line = null;</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">while ((line = reader.readLine()) != null) &#123;</span><br><span class=\"line\">sb.append(line + &quot;/n&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125; catch (IOException e) &#123;</span><br><span class=\"line\">e.printStackTrace();</span><br><span class=\"line\">&#125; finally &#123;</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">is.close();</span><br><span class=\"line\">&#125; catch (IOException e) &#123;</span><br><span class=\"line\">e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">return sb.toString();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">public String inputStream2String (InputStream in) throws IOException &#123;</span><br><span class=\"line\">StringBuffer out = new StringBuffer();</span><br><span class=\"line\">byte[] b = new byte[4096];</span><br><span class=\"line\">for (int n; (n = in.read(b)) != -1;) &#123;</span><br><span class=\"line\">out.append(new String(b, 0, n));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return out.toString();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">public static String inputStream2String(InputStream is) throws IOException&#123;</span><br><span class=\"line\">ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class=\"line\">int i=-1;</span><br><span class=\"line\">while((i=is.read())!=-1)&#123;</span><br><span class=\"line\">baos.write(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return baos.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Bitmap → byte[]</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">private byte[] Bitmap2Bytes(Bitmap bm)&#123;</span><br><span class=\"line\">ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class=\"line\">bm.compress(Bitmap.CompressFormat.PNG, 100, baos);</span><br><span class=\"line\">return baos.toByteArray(); &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>byte[] → Bitmap</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private Bitmap Bytes2Bimap(byte[] b)&#123;</span><br><span class=\"line\">if(b.length!=0)&#123;</span><br><span class=\"line\">return BitmapFactory.decodeByteArray(b, 0, b.length);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else &#123;</span><br><span class=\"line\">return null;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Handler消息传递机制","date":"2016-05-30T14:02:13.000Z","_content":"- Handler消息传递机制\n\nHandler类的主要机制有两个：在子线程中发送消息；在主线程中获取处理消息。\nHandler包含如下方法用于发送处理消息：\n<!-- more-->\n\n```\nvoid handleMessage(Message msg)：处理消息\nfinal boolean hasMessages(int what, Object object)：检查消息队列中是否包含what属性为指定值且object属性为指定对象的消息\nboolean sendEmptyMessage(int what)：发送空消息\nboolean sendEmptyMessageDelayed(int what, long delayMillis)：延迟发送空消息\nboolean sendMessage(Message msg)：发送消息\nboolean sendMessageDelayed(Message msg, long delayMillis)：延迟发送消息\n\n```\n- Handler、Looper、MessageQueue\n    \nHandler、Looper、MessageQueue各自作用如下：\nHandler：能发送消息给MessageQueue，并能处理Looper分发给它的消息；\nLooper：每个线程只有一个Looper，负责管理MessageQueue，从MessageQueue中取出消息分发给对应的Handler；\nMessageQueue：采用先进先出管理Message；\n\n注意：避免在主线程中执行耗时操作，否则会引发ANR异常。","source":"_posts/Handler消息传递机制.md","raw":"---\ntitle: Handler消息传递机制\ndate: 2016-05-30 22:02:13\ntags: Handler\ncategories: Andoroid通信\n\n---\n- Handler消息传递机制\n\nHandler类的主要机制有两个：在子线程中发送消息；在主线程中获取处理消息。\nHandler包含如下方法用于发送处理消息：\n<!-- more-->\n\n```\nvoid handleMessage(Message msg)：处理消息\nfinal boolean hasMessages(int what, Object object)：检查消息队列中是否包含what属性为指定值且object属性为指定对象的消息\nboolean sendEmptyMessage(int what)：发送空消息\nboolean sendEmptyMessageDelayed(int what, long delayMillis)：延迟发送空消息\nboolean sendMessage(Message msg)：发送消息\nboolean sendMessageDelayed(Message msg, long delayMillis)：延迟发送消息\n\n```\n- Handler、Looper、MessageQueue\n    \nHandler、Looper、MessageQueue各自作用如下：\nHandler：能发送消息给MessageQueue，并能处理Looper分发给它的消息；\nLooper：每个线程只有一个Looper，负责管理MessageQueue，从MessageQueue中取出消息分发给对应的Handler；\nMessageQueue：采用先进先出管理Message；\n\n注意：避免在主线程中执行耗时操作，否则会引发ANR异常。","slug":"Handler消息传递机制","published":1,"updated":"2016-05-30T14:25:31.178Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou5386q0009f0vchotlf5wd","content":"<ul>\n<li>Handler消息传递机制</li>\n</ul>\n<p>Handler类的主要机制有两个：在子线程中发送消息；在主线程中获取处理消息。<br>Handler包含如下方法用于发送处理消息：<br><a id=\"more\"></a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void handleMessage(Message msg)：处理消息</span><br><span class=\"line\">final boolean hasMessages(int what, Object object)：检查消息队列中是否包含what属性为指定值且object属性为指定对象的消息</span><br><span class=\"line\">boolean sendEmptyMessage(int what)：发送空消息</span><br><span class=\"line\">boolean sendEmptyMessageDelayed(int what, long delayMillis)：延迟发送空消息</span><br><span class=\"line\">boolean sendMessage(Message msg)：发送消息</span><br><span class=\"line\">boolean sendMessageDelayed(Message msg, long delayMillis)：延迟发送消息</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Handler、Looper、MessageQueue</li>\n</ul>\n<p>Handler、Looper、MessageQueue各自作用如下：<br>Handler：能发送消息给MessageQueue，并能处理Looper分发给它的消息；<br>Looper：每个线程只有一个Looper，负责管理MessageQueue，从MessageQueue中取出消息分发给对应的Handler；<br>MessageQueue：采用先进先出管理Message；</p>\n<p>注意：避免在主线程中执行耗时操作，否则会引发ANR异常。</p>\n","excerpt":"<ul>\n<li>Handler消息传递机制</li>\n</ul>\n<p>Handler类的主要机制有两个：在子线程中发送消息；在主线程中获取处理消息。<br>Handler包含如下方法用于发送处理消息：<br>","more":"</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void handleMessage(Message msg)：处理消息</span><br><span class=\"line\">final boolean hasMessages(int what, Object object)：检查消息队列中是否包含what属性为指定值且object属性为指定对象的消息</span><br><span class=\"line\">boolean sendEmptyMessage(int what)：发送空消息</span><br><span class=\"line\">boolean sendEmptyMessageDelayed(int what, long delayMillis)：延迟发送空消息</span><br><span class=\"line\">boolean sendMessage(Message msg)：发送消息</span><br><span class=\"line\">boolean sendMessageDelayed(Message msg, long delayMillis)：延迟发送消息</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Handler、Looper、MessageQueue</li>\n</ul>\n<p>Handler、Looper、MessageQueue各自作用如下：<br>Handler：能发送消息给MessageQueue，并能处理Looper分发给它的消息；<br>Looper：每个线程只有一个Looper，负责管理MessageQueue，从MessageQueue中取出消息分发给对应的Handler；<br>MessageQueue：采用先进先出管理Message；</p>\n<p>注意：避免在主线程中执行耗时操作，否则会引发ANR异常。</p>"},{"title":"Surfaceview","toc":true,"date":"2016-05-30T14:56:56.000Z","_content":"# Surfaceview \n- SurfaceHolder\n\n```\n  SurfaceHolder.Callback主要是当底层的Surface被创建、销毁或者改变时提供回调通知，由于绘制必须在Surface被创建后才能进行，因此SurfaceHolder.Callback中的surfaceCreated 和surfaceDestroyed 就成了绘图处理代码的边界。\n \n        SurfaceHolder.Callback中定义了三个接口方法：\n \n        1、abstract void surfaceChanged(SurfaceHolder holder, int format, int width, int height)：当surface发生任何结构性的变化时（格式或者大小），该方法就会被立即调用。\n \n        2、abstract void surfaceCreated(SurfaceHolder holder)：当surface对象创建后，该方法就会被立即调用。\n \n        3、abstract void  surfaceDestroyed(SurfaceHolder holder)：当surface对象在将要销毁前，该方法会被立即调\n\n```\n\n<!-- more-->\n- setFixSize\n\n```\nsetFixSize 不是设置SurfaceView的大小，而是告诉系统真     实的 video Size的大小。\n改变SurfaceView大小，就是改变SurfaceView layout的大小surfaceView里面有两个大小。一个是surface的大小，在sur  facechanged里面输出width和height的值来查看；还有一个就    是surfaceView本身的大小，重写onMeasure函数可以得到。具    体看下面的代码。而且，视频播放只与surfaceView的大小有关。\n ```\n\n\n- Surfaceview 简单应用\n\n```\n 1、在Activity的OnCreate函数中设置好SurfaceView，包括设置SurfaceHolder.Callback对象和SurfaceHolder对象的类型，具体如下\nSurfaceView mpreview = (SurfaceView) this.findViewById(R.id.camera_preview);\nSurfaceHolder mSurfaceHolder = mpreview.getHolder();\nmSurfaceHolder.addCallback(this);\n\n\t1. //为了实现照片预览功能，需要将SurfaceHolder的类型设置为PUSH  \n\t2.         //这样，画图缓存就由Camera类来管理，画图缓存是独立于Surface的\n\nmSurfaceHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);\n\n2、在SurfaceHolder.Callback的surfaceCreated函数中，使用Camera的Open函数开机摄像头硬件，这个API在SDK 2.3之前，是没有参数的，2.3以后支持多摄像头，所以开启前可以通过getNumberOfCameras先获取摄像头数目，再通过getCameraInfo得到需要开启的摄像头id，然后传入Open函数开启摄像头，假如摄像头开启成功则返回一个Camera对象，否则就抛出异常；\n\n3、开启成功的情况下，在SurfaceHolder.Callback的surfaceChanged函数中调用getParameters函数得到已打开的摄像头的配置参数Parameters对象，如果有需要就修改对象的参数，然后调用setParameters函数设置进去（SDK2.2以后，还可以通过Camera：：setDisplayOrientation设置方向）\n\n4、同样在surfaceChanged函数中，通过Camera：：setPreviewDisplay为摄像头设置SurfaceHolder对象，设置成功后调用Camera::startPreview函数开启预览功能，上面3,4两步的代码可以如下所示\npublic void surfaceChanged(SurfaceHolder holder, int format, int w, int h)\n{\n//已经获得Surface的width和height，设置Camera的参数\nCamera.Parameters parameters = camera.getParameters();\nparameters.setPreviewSize(w, h);\nList<Size> vSizeList = .getSupportedPictureSizes();\nfor(int num = 0; num < vSizeList.size(); num++)\n{\nSize vSize = vSizeList.get(num);\n}\nif(this.getResources().getConfiguration().orientation != Configuration.ORIENTATION_LANDSCAPE)\n{\n//如果是竖屏\nparameters.set(\"orientation\", \"portrait\");\n//在2.2以上可以使用\n//camera.setDisplayOrientation(90);\n}\nelse\n{\nparameters.set(\"orientation\", \"landscape\");\n//在2.2以上可以使用\n//camera.setDisplayOrientation(0);\n}\ncamera.setParameters(parameters);\ntry {\n//设置显示\ncamera.setPreviewDisplay(holder);\n} catch (IOException exception) {\ncamera.release();\ncamera = null;\n}\n//开始预览\ncamera.startPreview();\n}\n\n---\n\n\n\t // 当Surface被创建的时候，该方法被调用，可以在这里实例化Camera对象  \n\t         //同时可以对Camera进行定制  \n\t         camera = Camera.open(); //获取Camera实例  \n\n\n\t  /** \n\t          * Camera对象中含有一个内部类Camera.Parameters.该类可以对Camera的特性进行定制 \n\t          * 在Parameters中设置完成后，需要调用Camera.setParameters()方法，相应的设置才会生效 \n\t          * 由于不同的设备，Camera的特性是不同的，所以在设置时，需要首先判断设备对应的特性，再加以设置 \n\t          * 比如在调用setEffects之前最好先调用getSupportedColorEffects。如果设备不支持颜色特性，那么该方法将 \n\t          * 返回一个null \n\t          */  \n\t         try {  \n\t               \n\t             Camera.Parameters param = camera.getParameters();  \n\t             if(this.getResources().getConfiguration().orientation != Configuration.ORIENTATION_LANDSCAPE){  \n\t                 //如果是竖屏  \n\t                 param.set(\"orientation\", \"portrait\");  \n\t                 //在2.2以上可以使用  \n\t                 //camera.setDisplayOrientation(90);  \n\t             }else{  \n\t                 param.set(\"orientation\", \"landscape\");  \n\t                //在2.2以上可以使用  \n\t                 //camera.setDisplayOrientation(0);                \n\t             }  \n\t             //首先获取系统设备支持的所有颜色特效，有复合我们的，则设置；否则不设置  \n\t            List<String> colorEffects = param.getSupportedColorEffects();  \n\t             Iterator<String> colorItor = colorEffects.iterator();  \n\t             while(colorItor.hasNext()){  \n\t                 String currColor = colorItor.next();  \n\t                 if(currColor.equals(Camera.Parameters.EFFECT_SOLARIZE)){  \n\t                     param.setColorEffect(Camera.Parameters.EFFECT_SOLARIZE);  \n\t                     break;  \n\t                }  \n\t             }  \n\t             //设置完成需要再次调用setParameter方法才能生效  \n\t             camera.setParameters(param);  \n\t               \n\t            camera.setPreviewDisplay(holder);  \n\t               \n            /** \n\t              * 在显示了预览后，我们有时候希望限制预览的Size \n\t             * 我们并不是自己指定一个SIze而是指定一个Size，然后 \n\t              * 获取系统支持的SIZE，然后选择一个比指定SIZE小且最接近所指定SIZE的一个 \n\t              * Camera.Size对象就是该SIZE。 \n\t             *  \n\t            */  \n\t             int bestWidth = 0;  \n\t             int bestHeight = 0;  \n\t               \n\t             List<Camera.Size> sizeList = param.getSupportedPreviewSizes();  \n\t             //如果sizeList只有一个我们也没有必要做什么了，因为就他一个别无选择  \n\t             if(sizeList.size() > 1){  \n\t                 Iterator<Camera.Size> itor = sizeList.iterator();  \n\t                 while(itor.hasNext()){  \n\t                     Camera.Size cur = itor.next();  \n\t                     if(cur.width > bestWidth && cur.height>bestHeight && cur.width <MAX_WIDTH && cur.height < MAX_HEIGHT){  \n\t                         bestWidth = cur.width;  \n\t                         bestHeight = cur.height;  \n\t                    }  \n\t                 }  \n\t                 if(bestWidth != 0 && bestHeight != 0){  \n\t                     param.setPreviewSize(bestWidth, bestHeight);  \n\t                    //这里改变了SIze后，我们还要告诉SurfaceView，否则，Surface将不会改变大小，进入Camera的图像将质量很差  \n\t                    surfaceView.setLayoutParams(new LinearLayout.LayoutParams(bestWidth, bestHeight));  \n\t                }  \n\t             }  \n\t             camera.setParameters(param);  \n\t         } catch (Exception e) {  \n\t             // 如果出现异常，则释放Camera对象  \n\t             camera.release();  \n\t         }  \n\t           \n\t        //启动预览功能  \n\t         camera.startPreview();  \n\n\n\t1.  // 当Surface被销毁的时候，该方法被调用  \n\t2.         //在这里需要释放Camera资源  \n\t3.         camera.stopPreview();  \n\t4.         camera.release();  \n\n---\n\n5、假设要支持自动对焦功能，则在需要的情况下，或者在上述surfaceChanged调用完startPreview函数后，可以调用Camera::autoFocus函数来设置自动对焦回调函数，该步是可选操作，有些设备可能不支持，可以通过Camera::getFocusMode函数查询。代码可以参考如下：\n// 自动对焦\ncamera.autoFocus(new AutoFocusCallback()\n{\n@Override\npublic void onAutoFocus(boolean success, Camera camera)\n{\nif (success)\n{\n// success为true表示对焦成功，改变对焦状态图像\nivFocus.setImageResource(R.drawable.focus2);\n}\n}\n});\n\n\n6、在需要拍照的时候，调用takePicture(Camera.ShutterCallback, Camera.PictureCallback, Camera.PictureCallback, Camera.PictureCallback)函数来完成拍照，这个函数中可以四个回调接口，ShutterCallback是快门按下的回调，在这里我们可以设置播放“咔嚓”声之类的操作，后面有三个PictureCallback接口，分别对应三份图像数据，分别是原始图像、缩放和压缩图像和JPG图像，图像数据可以在PictureCallback接口的void onPictureTaken(byte[] data, Camera camera)中获得，三份数据相应的三个回调正好按照参数顺序调用，通常我们只关心JPG图像数据，此时前面两个PictureCallback接口参数可以直接传null；\n\n7、每次调用takePicture获取图像后，摄像头会停止预览，假如需要继续拍照，则我们需要在上面的PictureCallback的onPictureTaken函数末尾，再次掉哟更Camera::startPreview函数；\n\n8、在不需要拍照的时候，我们需要主动调用Camera::stopPreview函数停止预览功能，并且调用Camera::release函数释放Camera，以便其他应用程序调用。SDK中建议放在Activity的Pause函数中，但是我觉得放在surfaceDestroyed函数中更好，示例代码如下\n// 停止拍照时调用该方法\npublic void surfaceDestroyed(SurfaceHolder holder)\n{\n// 释放手机摄像头\ncamera.release();\n}\n以上就是自己实现拍照程序的的流程，一般还可以还可以获取预览帧的图像数据，可以分别通过Camera::setPreviewCallback和Camera::setOneShotPreviewCallback来设置每帧或下一帧图像数据的回调，这里就不做展开了。\n\n---\n\n/** A safe way to get an instance of the Camera object. */\npublic static Camera getCameraInstance(){\n    Camera c = null;\n    try {\n        c = Camera.open(); // attempt to get a Camera instance\n    }\n    catch (Exception e){\n        // Camera is not available (in use or does not exist)\n    }\n    return c; // returns null if camera is unavailable\n}\n\n---\n\n```","source":"_posts/Surfaceview.md","raw":"---\ntitle: Surfaceview\ntoc: true\ndate: 2016-05-30 22:56:56\ntags: View\ncategories: View\n---\n# Surfaceview \n- SurfaceHolder\n\n```\n  SurfaceHolder.Callback主要是当底层的Surface被创建、销毁或者改变时提供回调通知，由于绘制必须在Surface被创建后才能进行，因此SurfaceHolder.Callback中的surfaceCreated 和surfaceDestroyed 就成了绘图处理代码的边界。\n \n        SurfaceHolder.Callback中定义了三个接口方法：\n \n        1、abstract void surfaceChanged(SurfaceHolder holder, int format, int width, int height)：当surface发生任何结构性的变化时（格式或者大小），该方法就会被立即调用。\n \n        2、abstract void surfaceCreated(SurfaceHolder holder)：当surface对象创建后，该方法就会被立即调用。\n \n        3、abstract void  surfaceDestroyed(SurfaceHolder holder)：当surface对象在将要销毁前，该方法会被立即调\n\n```\n\n<!-- more-->\n- setFixSize\n\n```\nsetFixSize 不是设置SurfaceView的大小，而是告诉系统真     实的 video Size的大小。\n改变SurfaceView大小，就是改变SurfaceView layout的大小surfaceView里面有两个大小。一个是surface的大小，在sur  facechanged里面输出width和height的值来查看；还有一个就    是surfaceView本身的大小，重写onMeasure函数可以得到。具    体看下面的代码。而且，视频播放只与surfaceView的大小有关。\n ```\n\n\n- Surfaceview 简单应用\n\n```\n 1、在Activity的OnCreate函数中设置好SurfaceView，包括设置SurfaceHolder.Callback对象和SurfaceHolder对象的类型，具体如下\nSurfaceView mpreview = (SurfaceView) this.findViewById(R.id.camera_preview);\nSurfaceHolder mSurfaceHolder = mpreview.getHolder();\nmSurfaceHolder.addCallback(this);\n\n\t1. //为了实现照片预览功能，需要将SurfaceHolder的类型设置为PUSH  \n\t2.         //这样，画图缓存就由Camera类来管理，画图缓存是独立于Surface的\n\nmSurfaceHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);\n\n2、在SurfaceHolder.Callback的surfaceCreated函数中，使用Camera的Open函数开机摄像头硬件，这个API在SDK 2.3之前，是没有参数的，2.3以后支持多摄像头，所以开启前可以通过getNumberOfCameras先获取摄像头数目，再通过getCameraInfo得到需要开启的摄像头id，然后传入Open函数开启摄像头，假如摄像头开启成功则返回一个Camera对象，否则就抛出异常；\n\n3、开启成功的情况下，在SurfaceHolder.Callback的surfaceChanged函数中调用getParameters函数得到已打开的摄像头的配置参数Parameters对象，如果有需要就修改对象的参数，然后调用setParameters函数设置进去（SDK2.2以后，还可以通过Camera：：setDisplayOrientation设置方向）\n\n4、同样在surfaceChanged函数中，通过Camera：：setPreviewDisplay为摄像头设置SurfaceHolder对象，设置成功后调用Camera::startPreview函数开启预览功能，上面3,4两步的代码可以如下所示\npublic void surfaceChanged(SurfaceHolder holder, int format, int w, int h)\n{\n//已经获得Surface的width和height，设置Camera的参数\nCamera.Parameters parameters = camera.getParameters();\nparameters.setPreviewSize(w, h);\nList<Size> vSizeList = .getSupportedPictureSizes();\nfor(int num = 0; num < vSizeList.size(); num++)\n{\nSize vSize = vSizeList.get(num);\n}\nif(this.getResources().getConfiguration().orientation != Configuration.ORIENTATION_LANDSCAPE)\n{\n//如果是竖屏\nparameters.set(\"orientation\", \"portrait\");\n//在2.2以上可以使用\n//camera.setDisplayOrientation(90);\n}\nelse\n{\nparameters.set(\"orientation\", \"landscape\");\n//在2.2以上可以使用\n//camera.setDisplayOrientation(0);\n}\ncamera.setParameters(parameters);\ntry {\n//设置显示\ncamera.setPreviewDisplay(holder);\n} catch (IOException exception) {\ncamera.release();\ncamera = null;\n}\n//开始预览\ncamera.startPreview();\n}\n\n---\n\n\n\t // 当Surface被创建的时候，该方法被调用，可以在这里实例化Camera对象  \n\t         //同时可以对Camera进行定制  \n\t         camera = Camera.open(); //获取Camera实例  \n\n\n\t  /** \n\t          * Camera对象中含有一个内部类Camera.Parameters.该类可以对Camera的特性进行定制 \n\t          * 在Parameters中设置完成后，需要调用Camera.setParameters()方法，相应的设置才会生效 \n\t          * 由于不同的设备，Camera的特性是不同的，所以在设置时，需要首先判断设备对应的特性，再加以设置 \n\t          * 比如在调用setEffects之前最好先调用getSupportedColorEffects。如果设备不支持颜色特性，那么该方法将 \n\t          * 返回一个null \n\t          */  \n\t         try {  \n\t               \n\t             Camera.Parameters param = camera.getParameters();  \n\t             if(this.getResources().getConfiguration().orientation != Configuration.ORIENTATION_LANDSCAPE){  \n\t                 //如果是竖屏  \n\t                 param.set(\"orientation\", \"portrait\");  \n\t                 //在2.2以上可以使用  \n\t                 //camera.setDisplayOrientation(90);  \n\t             }else{  \n\t                 param.set(\"orientation\", \"landscape\");  \n\t                //在2.2以上可以使用  \n\t                 //camera.setDisplayOrientation(0);                \n\t             }  \n\t             //首先获取系统设备支持的所有颜色特效，有复合我们的，则设置；否则不设置  \n\t            List<String> colorEffects = param.getSupportedColorEffects();  \n\t             Iterator<String> colorItor = colorEffects.iterator();  \n\t             while(colorItor.hasNext()){  \n\t                 String currColor = colorItor.next();  \n\t                 if(currColor.equals(Camera.Parameters.EFFECT_SOLARIZE)){  \n\t                     param.setColorEffect(Camera.Parameters.EFFECT_SOLARIZE);  \n\t                     break;  \n\t                }  \n\t             }  \n\t             //设置完成需要再次调用setParameter方法才能生效  \n\t             camera.setParameters(param);  \n\t               \n\t            camera.setPreviewDisplay(holder);  \n\t               \n            /** \n\t              * 在显示了预览后，我们有时候希望限制预览的Size \n\t             * 我们并不是自己指定一个SIze而是指定一个Size，然后 \n\t              * 获取系统支持的SIZE，然后选择一个比指定SIZE小且最接近所指定SIZE的一个 \n\t              * Camera.Size对象就是该SIZE。 \n\t             *  \n\t            */  \n\t             int bestWidth = 0;  \n\t             int bestHeight = 0;  \n\t               \n\t             List<Camera.Size> sizeList = param.getSupportedPreviewSizes();  \n\t             //如果sizeList只有一个我们也没有必要做什么了，因为就他一个别无选择  \n\t             if(sizeList.size() > 1){  \n\t                 Iterator<Camera.Size> itor = sizeList.iterator();  \n\t                 while(itor.hasNext()){  \n\t                     Camera.Size cur = itor.next();  \n\t                     if(cur.width > bestWidth && cur.height>bestHeight && cur.width <MAX_WIDTH && cur.height < MAX_HEIGHT){  \n\t                         bestWidth = cur.width;  \n\t                         bestHeight = cur.height;  \n\t                    }  \n\t                 }  \n\t                 if(bestWidth != 0 && bestHeight != 0){  \n\t                     param.setPreviewSize(bestWidth, bestHeight);  \n\t                    //这里改变了SIze后，我们还要告诉SurfaceView，否则，Surface将不会改变大小，进入Camera的图像将质量很差  \n\t                    surfaceView.setLayoutParams(new LinearLayout.LayoutParams(bestWidth, bestHeight));  \n\t                }  \n\t             }  \n\t             camera.setParameters(param);  \n\t         } catch (Exception e) {  \n\t             // 如果出现异常，则释放Camera对象  \n\t             camera.release();  \n\t         }  \n\t           \n\t        //启动预览功能  \n\t         camera.startPreview();  \n\n\n\t1.  // 当Surface被销毁的时候，该方法被调用  \n\t2.         //在这里需要释放Camera资源  \n\t3.         camera.stopPreview();  \n\t4.         camera.release();  \n\n---\n\n5、假设要支持自动对焦功能，则在需要的情况下，或者在上述surfaceChanged调用完startPreview函数后，可以调用Camera::autoFocus函数来设置自动对焦回调函数，该步是可选操作，有些设备可能不支持，可以通过Camera::getFocusMode函数查询。代码可以参考如下：\n// 自动对焦\ncamera.autoFocus(new AutoFocusCallback()\n{\n@Override\npublic void onAutoFocus(boolean success, Camera camera)\n{\nif (success)\n{\n// success为true表示对焦成功，改变对焦状态图像\nivFocus.setImageResource(R.drawable.focus2);\n}\n}\n});\n\n\n6、在需要拍照的时候，调用takePicture(Camera.ShutterCallback, Camera.PictureCallback, Camera.PictureCallback, Camera.PictureCallback)函数来完成拍照，这个函数中可以四个回调接口，ShutterCallback是快门按下的回调，在这里我们可以设置播放“咔嚓”声之类的操作，后面有三个PictureCallback接口，分别对应三份图像数据，分别是原始图像、缩放和压缩图像和JPG图像，图像数据可以在PictureCallback接口的void onPictureTaken(byte[] data, Camera camera)中获得，三份数据相应的三个回调正好按照参数顺序调用，通常我们只关心JPG图像数据，此时前面两个PictureCallback接口参数可以直接传null；\n\n7、每次调用takePicture获取图像后，摄像头会停止预览，假如需要继续拍照，则我们需要在上面的PictureCallback的onPictureTaken函数末尾，再次掉哟更Camera::startPreview函数；\n\n8、在不需要拍照的时候，我们需要主动调用Camera::stopPreview函数停止预览功能，并且调用Camera::release函数释放Camera，以便其他应用程序调用。SDK中建议放在Activity的Pause函数中，但是我觉得放在surfaceDestroyed函数中更好，示例代码如下\n// 停止拍照时调用该方法\npublic void surfaceDestroyed(SurfaceHolder holder)\n{\n// 释放手机摄像头\ncamera.release();\n}\n以上就是自己实现拍照程序的的流程，一般还可以还可以获取预览帧的图像数据，可以分别通过Camera::setPreviewCallback和Camera::setOneShotPreviewCallback来设置每帧或下一帧图像数据的回调，这里就不做展开了。\n\n---\n\n/** A safe way to get an instance of the Camera object. */\npublic static Camera getCameraInstance(){\n    Camera c = null;\n    try {\n        c = Camera.open(); // attempt to get a Camera instance\n    }\n    catch (Exception e){\n        // Camera is not available (in use or does not exist)\n    }\n    return c; // returns null if camera is unavailable\n}\n\n---\n\n```","slug":"Surfaceview","published":1,"updated":"2016-05-30T14:57:36.166Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou53871000cf0vcpb3sab9n","content":"<h1 id=\"Surfaceview\"><a href=\"#Surfaceview\" class=\"headerlink\" title=\"Surfaceview\"></a>Surfaceview</h1><ul>\n<li>SurfaceHolder</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SurfaceHolder.Callback主要是当底层的Surface被创建、销毁或者改变时提供回调通知，由于绘制必须在Surface被创建后才能进行，因此SurfaceHolder.Callback中的surfaceCreated 和surfaceDestroyed 就成了绘图处理代码的边界。</span><br><span class=\"line\"> </span><br><span class=\"line\">      SurfaceHolder.Callback中定义了三个接口方法：</span><br><span class=\"line\"> </span><br><span class=\"line\">      1、abstract void surfaceChanged(SurfaceHolder holder, int format, int width, int height)：当surface发生任何结构性的变化时（格式或者大小），该方法就会被立即调用。</span><br><span class=\"line\"> </span><br><span class=\"line\">      2、abstract void surfaceCreated(SurfaceHolder holder)：当surface对象创建后，该方法就会被立即调用。</span><br><span class=\"line\"> </span><br><span class=\"line\">      3、abstract void  surfaceDestroyed(SurfaceHolder holder)：当surface对象在将要销毁前，该方法会被立即调</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<ul>\n<li>setFixSize</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setFixSize 不是设置SurfaceView的大小，而是告诉系统真     实的 video Size的大小。</span><br><span class=\"line\">改变SurfaceView大小，就是改变SurfaceView layout的大小surfaceView里面有两个大小。一个是surface的大小，在sur  facechanged里面输出width和height的值来查看；还有一个就    是surfaceView本身的大小，重写onMeasure函数可以得到。具    体看下面的代码。而且，视频播放只与surfaceView的大小有关。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Surfaceview 简单应用</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 1、在Activity的OnCreate函数中设置好SurfaceView，包括设置SurfaceHolder.Callback对象和SurfaceHolder对象的类型，具体如下</span><br><span class=\"line\">SurfaceView mpreview = (SurfaceView) this.findViewById(R.id.camera_preview);</span><br><span class=\"line\">SurfaceHolder mSurfaceHolder = mpreview.getHolder();</span><br><span class=\"line\">mSurfaceHolder.addCallback(this);</span><br><span class=\"line\"></span><br><span class=\"line\">\t1. //为了实现照片预览功能，需要将SurfaceHolder的类型设置为PUSH  </span><br><span class=\"line\">\t2.         //这样，画图缓存就由Camera类来管理，画图缓存是独立于Surface的</span><br><span class=\"line\"></span><br><span class=\"line\">mSurfaceHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);</span><br><span class=\"line\"></span><br><span class=\"line\">2、在SurfaceHolder.Callback的surfaceCreated函数中，使用Camera的Open函数开机摄像头硬件，这个API在SDK 2.3之前，是没有参数的，2.3以后支持多摄像头，所以开启前可以通过getNumberOfCameras先获取摄像头数目，再通过getCameraInfo得到需要开启的摄像头id，然后传入Open函数开启摄像头，假如摄像头开启成功则返回一个Camera对象，否则就抛出异常；</span><br><span class=\"line\"></span><br><span class=\"line\">3、开启成功的情况下，在SurfaceHolder.Callback的surfaceChanged函数中调用getParameters函数得到已打开的摄像头的配置参数Parameters对象，如果有需要就修改对象的参数，然后调用setParameters函数设置进去（SDK2.2以后，还可以通过Camera：：setDisplayOrientation设置方向）</span><br><span class=\"line\"></span><br><span class=\"line\">4、同样在surfaceChanged函数中，通过Camera：：setPreviewDisplay为摄像头设置SurfaceHolder对象，设置成功后调用Camera::startPreview函数开启预览功能，上面3,4两步的代码可以如下所示</span><br><span class=\"line\">public void surfaceChanged(SurfaceHolder holder, int format, int w, int h)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">//已经获得Surface的width和height，设置Camera的参数</span><br><span class=\"line\">Camera.Parameters parameters = camera.getParameters();</span><br><span class=\"line\">parameters.setPreviewSize(w, h);</span><br><span class=\"line\">List&lt;Size&gt; vSizeList = .getSupportedPictureSizes();</span><br><span class=\"line\">for(int num = 0; num &lt; vSizeList.size(); num++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">Size vSize = vSizeList.get(num);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if(this.getResources().getConfiguration().orientation != Configuration.ORIENTATION_LANDSCAPE)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">//如果是竖屏</span><br><span class=\"line\">parameters.set(&quot;orientation&quot;, &quot;portrait&quot;);</span><br><span class=\"line\">//在2.2以上可以使用</span><br><span class=\"line\">//camera.setDisplayOrientation(90);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">parameters.set(&quot;orientation&quot;, &quot;landscape&quot;);</span><br><span class=\"line\">//在2.2以上可以使用</span><br><span class=\"line\">//camera.setDisplayOrientation(0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">camera.setParameters(parameters);</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">//设置显示</span><br><span class=\"line\">camera.setPreviewDisplay(holder);</span><br><span class=\"line\">&#125; catch (IOException exception) &#123;</span><br><span class=\"line\">camera.release();</span><br><span class=\"line\">camera = null;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//开始预览</span><br><span class=\"line\">camera.startPreview();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t // 当Surface被创建的时候，该方法被调用，可以在这里实例化Camera对象  </span><br><span class=\"line\">\t         //同时可以对Camera进行定制  </span><br><span class=\"line\">\t         camera = Camera.open(); //获取Camera实例  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t  /** </span><br><span class=\"line\">\t          * Camera对象中含有一个内部类Camera.Parameters.该类可以对Camera的特性进行定制 </span><br><span class=\"line\">\t          * 在Parameters中设置完成后，需要调用Camera.setParameters()方法，相应的设置才会生效 </span><br><span class=\"line\">\t          * 由于不同的设备，Camera的特性是不同的，所以在设置时，需要首先判断设备对应的特性，再加以设置 </span><br><span class=\"line\">\t          * 比如在调用setEffects之前最好先调用getSupportedColorEffects。如果设备不支持颜色特性，那么该方法将 </span><br><span class=\"line\">\t          * 返回一个null </span><br><span class=\"line\">\t          */  </span><br><span class=\"line\">\t         try &#123;  </span><br><span class=\"line\">\t               </span><br><span class=\"line\">\t             Camera.Parameters param = camera.getParameters();  </span><br><span class=\"line\">\t             if(this.getResources().getConfiguration().orientation != Configuration.ORIENTATION_LANDSCAPE)&#123;  </span><br><span class=\"line\">\t                 //如果是竖屏  </span><br><span class=\"line\">\t                 param.set(&quot;orientation&quot;, &quot;portrait&quot;);  </span><br><span class=\"line\">\t                 //在2.2以上可以使用  </span><br><span class=\"line\">\t                 //camera.setDisplayOrientation(90);  </span><br><span class=\"line\">\t             &#125;else&#123;  </span><br><span class=\"line\">\t                 param.set(&quot;orientation&quot;, &quot;landscape&quot;);  </span><br><span class=\"line\">\t                //在2.2以上可以使用  </span><br><span class=\"line\">\t                 //camera.setDisplayOrientation(0);                </span><br><span class=\"line\">\t             &#125;  </span><br><span class=\"line\">\t             //首先获取系统设备支持的所有颜色特效，有复合我们的，则设置；否则不设置  </span><br><span class=\"line\">\t            List&lt;String&gt; colorEffects = param.getSupportedColorEffects();  </span><br><span class=\"line\">\t             Iterator&lt;String&gt; colorItor = colorEffects.iterator();  </span><br><span class=\"line\">\t             while(colorItor.hasNext())&#123;  </span><br><span class=\"line\">\t                 String currColor = colorItor.next();  </span><br><span class=\"line\">\t                 if(currColor.equals(Camera.Parameters.EFFECT_SOLARIZE))&#123;  </span><br><span class=\"line\">\t                     param.setColorEffect(Camera.Parameters.EFFECT_SOLARIZE);  </span><br><span class=\"line\">\t                     break;  </span><br><span class=\"line\">\t                &#125;  </span><br><span class=\"line\">\t             &#125;  </span><br><span class=\"line\">\t             //设置完成需要再次调用setParameter方法才能生效  </span><br><span class=\"line\">\t             camera.setParameters(param);  </span><br><span class=\"line\">\t               </span><br><span class=\"line\">\t            camera.setPreviewDisplay(holder);  </span><br><span class=\"line\">\t               </span><br><span class=\"line\">            /** </span><br><span class=\"line\">\t              * 在显示了预览后，我们有时候希望限制预览的Size </span><br><span class=\"line\">\t             * 我们并不是自己指定一个SIze而是指定一个Size，然后 </span><br><span class=\"line\">\t              * 获取系统支持的SIZE，然后选择一个比指定SIZE小且最接近所指定SIZE的一个 </span><br><span class=\"line\">\t              * Camera.Size对象就是该SIZE。 </span><br><span class=\"line\">\t             *  </span><br><span class=\"line\">\t            */  </span><br><span class=\"line\">\t             int bestWidth = 0;  </span><br><span class=\"line\">\t             int bestHeight = 0;  </span><br><span class=\"line\">\t               </span><br><span class=\"line\">\t             List&lt;Camera.Size&gt; sizeList = param.getSupportedPreviewSizes();  </span><br><span class=\"line\">\t             //如果sizeList只有一个我们也没有必要做什么了，因为就他一个别无选择  </span><br><span class=\"line\">\t             if(sizeList.size() &gt; 1)&#123;  </span><br><span class=\"line\">\t                 Iterator&lt;Camera.Size&gt; itor = sizeList.iterator();  </span><br><span class=\"line\">\t                 while(itor.hasNext())&#123;  </span><br><span class=\"line\">\t                     Camera.Size cur = itor.next();  </span><br><span class=\"line\">\t                     if(cur.width &gt; bestWidth &amp;&amp; cur.height&gt;bestHeight &amp;&amp; cur.width &lt;MAX_WIDTH &amp;&amp; cur.height &lt; MAX_HEIGHT)&#123;  </span><br><span class=\"line\">\t                         bestWidth = cur.width;  </span><br><span class=\"line\">\t                         bestHeight = cur.height;  </span><br><span class=\"line\">\t                    &#125;  </span><br><span class=\"line\">\t                 &#125;  </span><br><span class=\"line\">\t                 if(bestWidth != 0 &amp;&amp; bestHeight != 0)&#123;  </span><br><span class=\"line\">\t                     param.setPreviewSize(bestWidth, bestHeight);  </span><br><span class=\"line\">\t                    //这里改变了SIze后，我们还要告诉SurfaceView，否则，Surface将不会改变大小，进入Camera的图像将质量很差  </span><br><span class=\"line\">\t                    surfaceView.setLayoutParams(new LinearLayout.LayoutParams(bestWidth, bestHeight));  </span><br><span class=\"line\">\t                &#125;  </span><br><span class=\"line\">\t             &#125;  </span><br><span class=\"line\">\t             camera.setParameters(param);  </span><br><span class=\"line\">\t         &#125; catch (Exception e) &#123;  </span><br><span class=\"line\">\t             // 如果出现异常，则释放Camera对象  </span><br><span class=\"line\">\t             camera.release();  </span><br><span class=\"line\">\t         &#125;  </span><br><span class=\"line\">\t           </span><br><span class=\"line\">\t        //启动预览功能  </span><br><span class=\"line\">\t         camera.startPreview();  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t1.  // 当Surface被销毁的时候，该方法被调用  </span><br><span class=\"line\">\t2.         //在这里需要释放Camera资源  </span><br><span class=\"line\">\t3.         camera.stopPreview();  </span><br><span class=\"line\">\t4.         camera.release();  </span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">5、假设要支持自动对焦功能，则在需要的情况下，或者在上述surfaceChanged调用完startPreview函数后，可以调用Camera::autoFocus函数来设置自动对焦回调函数，该步是可选操作，有些设备可能不支持，可以通过Camera::getFocusMode函数查询。代码可以参考如下：</span><br><span class=\"line\">// 自动对焦</span><br><span class=\"line\">camera.autoFocus(new AutoFocusCallback()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onAutoFocus(boolean success, Camera camera)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">if (success)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">// success为true表示对焦成功，改变对焦状态图像</span><br><span class=\"line\">ivFocus.setImageResource(R.drawable.focus2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">6、在需要拍照的时候，调用takePicture(Camera.ShutterCallback, Camera.PictureCallback, Camera.PictureCallback, Camera.PictureCallback)函数来完成拍照，这个函数中可以四个回调接口，ShutterCallback是快门按下的回调，在这里我们可以设置播放“咔嚓”声之类的操作，后面有三个PictureCallback接口，分别对应三份图像数据，分别是原始图像、缩放和压缩图像和JPG图像，图像数据可以在PictureCallback接口的void onPictureTaken(byte[] data, Camera camera)中获得，三份数据相应的三个回调正好按照参数顺序调用，通常我们只关心JPG图像数据，此时前面两个PictureCallback接口参数可以直接传null；</span><br><span class=\"line\"></span><br><span class=\"line\">7、每次调用takePicture获取图像后，摄像头会停止预览，假如需要继续拍照，则我们需要在上面的PictureCallback的onPictureTaken函数末尾，再次掉哟更Camera::startPreview函数；</span><br><span class=\"line\"></span><br><span class=\"line\">8、在不需要拍照的时候，我们需要主动调用Camera::stopPreview函数停止预览功能，并且调用Camera::release函数释放Camera，以便其他应用程序调用。SDK中建议放在Activity的Pause函数中，但是我觉得放在surfaceDestroyed函数中更好，示例代码如下</span><br><span class=\"line\">// 停止拍照时调用该方法</span><br><span class=\"line\">public void surfaceDestroyed(SurfaceHolder holder)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">// 释放手机摄像头</span><br><span class=\"line\">camera.release();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">以上就是自己实现拍照程序的的流程，一般还可以还可以获取预览帧的图像数据，可以分别通过Camera::setPreviewCallback和Camera::setOneShotPreviewCallback来设置每帧或下一帧图像数据的回调，这里就不做展开了。</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">/** A safe way to get an instance of the Camera object. */</span><br><span class=\"line\">public static Camera getCameraInstance()&#123;</span><br><span class=\"line\">    Camera c = null;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        c = Camera.open(); // attempt to get a Camera instance</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    catch (Exception e)&#123;</span><br><span class=\"line\">        // Camera is not available (in use or does not exist)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return c; // returns null if camera is unavailable</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>","excerpt":"<h1 id=\"Surfaceview\"><a href=\"#Surfaceview\" class=\"headerlink\" title=\"Surfaceview\"></a>Surfaceview</h1><ul>\n<li>SurfaceHolder</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SurfaceHolder.Callback主要是当底层的Surface被创建、销毁或者改变时提供回调通知，由于绘制必须在Surface被创建后才能进行，因此SurfaceHolder.Callback中的surfaceCreated 和surfaceDestroyed 就成了绘图处理代码的边界。</span><br><span class=\"line\"> </span><br><span class=\"line\">      SurfaceHolder.Callback中定义了三个接口方法：</span><br><span class=\"line\"> </span><br><span class=\"line\">      1、abstract void surfaceChanged(SurfaceHolder holder, int format, int width, int height)：当surface发生任何结构性的变化时（格式或者大小），该方法就会被立即调用。</span><br><span class=\"line\"> </span><br><span class=\"line\">      2、abstract void surfaceCreated(SurfaceHolder holder)：当surface对象创建后，该方法就会被立即调用。</span><br><span class=\"line\"> </span><br><span class=\"line\">      3、abstract void  surfaceDestroyed(SurfaceHolder holder)：当surface对象在将要销毁前，该方法会被立即调</span><br></pre></td></tr></table></figure>","more":"<ul>\n<li>setFixSize</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setFixSize 不是设置SurfaceView的大小，而是告诉系统真     实的 video Size的大小。</span><br><span class=\"line\">改变SurfaceView大小，就是改变SurfaceView layout的大小surfaceView里面有两个大小。一个是surface的大小，在sur  facechanged里面输出width和height的值来查看；还有一个就    是surfaceView本身的大小，重写onMeasure函数可以得到。具    体看下面的代码。而且，视频播放只与surfaceView的大小有关。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Surfaceview 简单应用</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 1、在Activity的OnCreate函数中设置好SurfaceView，包括设置SurfaceHolder.Callback对象和SurfaceHolder对象的类型，具体如下</span><br><span class=\"line\">SurfaceView mpreview = (SurfaceView) this.findViewById(R.id.camera_preview);</span><br><span class=\"line\">SurfaceHolder mSurfaceHolder = mpreview.getHolder();</span><br><span class=\"line\">mSurfaceHolder.addCallback(this);</span><br><span class=\"line\"></span><br><span class=\"line\">\t1. //为了实现照片预览功能，需要将SurfaceHolder的类型设置为PUSH  </span><br><span class=\"line\">\t2.         //这样，画图缓存就由Camera类来管理，画图缓存是独立于Surface的</span><br><span class=\"line\"></span><br><span class=\"line\">mSurfaceHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);</span><br><span class=\"line\"></span><br><span class=\"line\">2、在SurfaceHolder.Callback的surfaceCreated函数中，使用Camera的Open函数开机摄像头硬件，这个API在SDK 2.3之前，是没有参数的，2.3以后支持多摄像头，所以开启前可以通过getNumberOfCameras先获取摄像头数目，再通过getCameraInfo得到需要开启的摄像头id，然后传入Open函数开启摄像头，假如摄像头开启成功则返回一个Camera对象，否则就抛出异常；</span><br><span class=\"line\"></span><br><span class=\"line\">3、开启成功的情况下，在SurfaceHolder.Callback的surfaceChanged函数中调用getParameters函数得到已打开的摄像头的配置参数Parameters对象，如果有需要就修改对象的参数，然后调用setParameters函数设置进去（SDK2.2以后，还可以通过Camera：：setDisplayOrientation设置方向）</span><br><span class=\"line\"></span><br><span class=\"line\">4、同样在surfaceChanged函数中，通过Camera：：setPreviewDisplay为摄像头设置SurfaceHolder对象，设置成功后调用Camera::startPreview函数开启预览功能，上面3,4两步的代码可以如下所示</span><br><span class=\"line\">public void surfaceChanged(SurfaceHolder holder, int format, int w, int h)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">//已经获得Surface的width和height，设置Camera的参数</span><br><span class=\"line\">Camera.Parameters parameters = camera.getParameters();</span><br><span class=\"line\">parameters.setPreviewSize(w, h);</span><br><span class=\"line\">List&lt;Size&gt; vSizeList = .getSupportedPictureSizes();</span><br><span class=\"line\">for(int num = 0; num &lt; vSizeList.size(); num++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">Size vSize = vSizeList.get(num);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if(this.getResources().getConfiguration().orientation != Configuration.ORIENTATION_LANDSCAPE)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">//如果是竖屏</span><br><span class=\"line\">parameters.set(&quot;orientation&quot;, &quot;portrait&quot;);</span><br><span class=\"line\">//在2.2以上可以使用</span><br><span class=\"line\">//camera.setDisplayOrientation(90);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">parameters.set(&quot;orientation&quot;, &quot;landscape&quot;);</span><br><span class=\"line\">//在2.2以上可以使用</span><br><span class=\"line\">//camera.setDisplayOrientation(0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">camera.setParameters(parameters);</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">//设置显示</span><br><span class=\"line\">camera.setPreviewDisplay(holder);</span><br><span class=\"line\">&#125; catch (IOException exception) &#123;</span><br><span class=\"line\">camera.release();</span><br><span class=\"line\">camera = null;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//开始预览</span><br><span class=\"line\">camera.startPreview();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t // 当Surface被创建的时候，该方法被调用，可以在这里实例化Camera对象  </span><br><span class=\"line\">\t         //同时可以对Camera进行定制  </span><br><span class=\"line\">\t         camera = Camera.open(); //获取Camera实例  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t  /** </span><br><span class=\"line\">\t          * Camera对象中含有一个内部类Camera.Parameters.该类可以对Camera的特性进行定制 </span><br><span class=\"line\">\t          * 在Parameters中设置完成后，需要调用Camera.setParameters()方法，相应的设置才会生效 </span><br><span class=\"line\">\t          * 由于不同的设备，Camera的特性是不同的，所以在设置时，需要首先判断设备对应的特性，再加以设置 </span><br><span class=\"line\">\t          * 比如在调用setEffects之前最好先调用getSupportedColorEffects。如果设备不支持颜色特性，那么该方法将 </span><br><span class=\"line\">\t          * 返回一个null </span><br><span class=\"line\">\t          */  </span><br><span class=\"line\">\t         try &#123;  </span><br><span class=\"line\">\t               </span><br><span class=\"line\">\t             Camera.Parameters param = camera.getParameters();  </span><br><span class=\"line\">\t             if(this.getResources().getConfiguration().orientation != Configuration.ORIENTATION_LANDSCAPE)&#123;  </span><br><span class=\"line\">\t                 //如果是竖屏  </span><br><span class=\"line\">\t                 param.set(&quot;orientation&quot;, &quot;portrait&quot;);  </span><br><span class=\"line\">\t                 //在2.2以上可以使用  </span><br><span class=\"line\">\t                 //camera.setDisplayOrientation(90);  </span><br><span class=\"line\">\t             &#125;else&#123;  </span><br><span class=\"line\">\t                 param.set(&quot;orientation&quot;, &quot;landscape&quot;);  </span><br><span class=\"line\">\t                //在2.2以上可以使用  </span><br><span class=\"line\">\t                 //camera.setDisplayOrientation(0);                </span><br><span class=\"line\">\t             &#125;  </span><br><span class=\"line\">\t             //首先获取系统设备支持的所有颜色特效，有复合我们的，则设置；否则不设置  </span><br><span class=\"line\">\t            List&lt;String&gt; colorEffects = param.getSupportedColorEffects();  </span><br><span class=\"line\">\t             Iterator&lt;String&gt; colorItor = colorEffects.iterator();  </span><br><span class=\"line\">\t             while(colorItor.hasNext())&#123;  </span><br><span class=\"line\">\t                 String currColor = colorItor.next();  </span><br><span class=\"line\">\t                 if(currColor.equals(Camera.Parameters.EFFECT_SOLARIZE))&#123;  </span><br><span class=\"line\">\t                     param.setColorEffect(Camera.Parameters.EFFECT_SOLARIZE);  </span><br><span class=\"line\">\t                     break;  </span><br><span class=\"line\">\t                &#125;  </span><br><span class=\"line\">\t             &#125;  </span><br><span class=\"line\">\t             //设置完成需要再次调用setParameter方法才能生效  </span><br><span class=\"line\">\t             camera.setParameters(param);  </span><br><span class=\"line\">\t               </span><br><span class=\"line\">\t            camera.setPreviewDisplay(holder);  </span><br><span class=\"line\">\t               </span><br><span class=\"line\">            /** </span><br><span class=\"line\">\t              * 在显示了预览后，我们有时候希望限制预览的Size </span><br><span class=\"line\">\t             * 我们并不是自己指定一个SIze而是指定一个Size，然后 </span><br><span class=\"line\">\t              * 获取系统支持的SIZE，然后选择一个比指定SIZE小且最接近所指定SIZE的一个 </span><br><span class=\"line\">\t              * Camera.Size对象就是该SIZE。 </span><br><span class=\"line\">\t             *  </span><br><span class=\"line\">\t            */  </span><br><span class=\"line\">\t             int bestWidth = 0;  </span><br><span class=\"line\">\t             int bestHeight = 0;  </span><br><span class=\"line\">\t               </span><br><span class=\"line\">\t             List&lt;Camera.Size&gt; sizeList = param.getSupportedPreviewSizes();  </span><br><span class=\"line\">\t             //如果sizeList只有一个我们也没有必要做什么了，因为就他一个别无选择  </span><br><span class=\"line\">\t             if(sizeList.size() &gt; 1)&#123;  </span><br><span class=\"line\">\t                 Iterator&lt;Camera.Size&gt; itor = sizeList.iterator();  </span><br><span class=\"line\">\t                 while(itor.hasNext())&#123;  </span><br><span class=\"line\">\t                     Camera.Size cur = itor.next();  </span><br><span class=\"line\">\t                     if(cur.width &gt; bestWidth &amp;&amp; cur.height&gt;bestHeight &amp;&amp; cur.width &lt;MAX_WIDTH &amp;&amp; cur.height &lt; MAX_HEIGHT)&#123;  </span><br><span class=\"line\">\t                         bestWidth = cur.width;  </span><br><span class=\"line\">\t                         bestHeight = cur.height;  </span><br><span class=\"line\">\t                    &#125;  </span><br><span class=\"line\">\t                 &#125;  </span><br><span class=\"line\">\t                 if(bestWidth != 0 &amp;&amp; bestHeight != 0)&#123;  </span><br><span class=\"line\">\t                     param.setPreviewSize(bestWidth, bestHeight);  </span><br><span class=\"line\">\t                    //这里改变了SIze后，我们还要告诉SurfaceView，否则，Surface将不会改变大小，进入Camera的图像将质量很差  </span><br><span class=\"line\">\t                    surfaceView.setLayoutParams(new LinearLayout.LayoutParams(bestWidth, bestHeight));  </span><br><span class=\"line\">\t                &#125;  </span><br><span class=\"line\">\t             &#125;  </span><br><span class=\"line\">\t             camera.setParameters(param);  </span><br><span class=\"line\">\t         &#125; catch (Exception e) &#123;  </span><br><span class=\"line\">\t             // 如果出现异常，则释放Camera对象  </span><br><span class=\"line\">\t             camera.release();  </span><br><span class=\"line\">\t         &#125;  </span><br><span class=\"line\">\t           </span><br><span class=\"line\">\t        //启动预览功能  </span><br><span class=\"line\">\t         camera.startPreview();  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t1.  // 当Surface被销毁的时候，该方法被调用  </span><br><span class=\"line\">\t2.         //在这里需要释放Camera资源  </span><br><span class=\"line\">\t3.         camera.stopPreview();  </span><br><span class=\"line\">\t4.         camera.release();  </span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">5、假设要支持自动对焦功能，则在需要的情况下，或者在上述surfaceChanged调用完startPreview函数后，可以调用Camera::autoFocus函数来设置自动对焦回调函数，该步是可选操作，有些设备可能不支持，可以通过Camera::getFocusMode函数查询。代码可以参考如下：</span><br><span class=\"line\">// 自动对焦</span><br><span class=\"line\">camera.autoFocus(new AutoFocusCallback()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onAutoFocus(boolean success, Camera camera)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">if (success)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">// success为true表示对焦成功，改变对焦状态图像</span><br><span class=\"line\">ivFocus.setImageResource(R.drawable.focus2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">6、在需要拍照的时候，调用takePicture(Camera.ShutterCallback, Camera.PictureCallback, Camera.PictureCallback, Camera.PictureCallback)函数来完成拍照，这个函数中可以四个回调接口，ShutterCallback是快门按下的回调，在这里我们可以设置播放“咔嚓”声之类的操作，后面有三个PictureCallback接口，分别对应三份图像数据，分别是原始图像、缩放和压缩图像和JPG图像，图像数据可以在PictureCallback接口的void onPictureTaken(byte[] data, Camera camera)中获得，三份数据相应的三个回调正好按照参数顺序调用，通常我们只关心JPG图像数据，此时前面两个PictureCallback接口参数可以直接传null；</span><br><span class=\"line\"></span><br><span class=\"line\">7、每次调用takePicture获取图像后，摄像头会停止预览，假如需要继续拍照，则我们需要在上面的PictureCallback的onPictureTaken函数末尾，再次掉哟更Camera::startPreview函数；</span><br><span class=\"line\"></span><br><span class=\"line\">8、在不需要拍照的时候，我们需要主动调用Camera::stopPreview函数停止预览功能，并且调用Camera::release函数释放Camera，以便其他应用程序调用。SDK中建议放在Activity的Pause函数中，但是我觉得放在surfaceDestroyed函数中更好，示例代码如下</span><br><span class=\"line\">// 停止拍照时调用该方法</span><br><span class=\"line\">public void surfaceDestroyed(SurfaceHolder holder)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">// 释放手机摄像头</span><br><span class=\"line\">camera.release();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">以上就是自己实现拍照程序的的流程，一般还可以还可以获取预览帧的图像数据，可以分别通过Camera::setPreviewCallback和Camera::setOneShotPreviewCallback来设置每帧或下一帧图像数据的回调，这里就不做展开了。</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">/** A safe way to get an instance of the Camera object. */</span><br><span class=\"line\">public static Camera getCameraInstance()&#123;</span><br><span class=\"line\">    Camera c = null;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        c = Camera.open(); // attempt to get a Camera instance</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    catch (Exception e)&#123;</span><br><span class=\"line\">        // Camera is not available (in use or does not exist)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return c; // returns null if camera is unavailable</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>"},{"title":"View事件处理","toc":true,"_content":"- 基础知识\n\n```\n(1) 所有Touch事件都被封装成了MotionEvent对象，包括Touch的位置、时间、历史记录以及第几个手指(多指触摸)等。\n(2) 事件类型分为ACTION_DOWN, ACTION_UP, ACTION_MOVE, ACTION_POINTER_DOWN, ACTION_POINTER_UP, ACTION_CANCEL，每个事件都是以ACTION_DOWN开始ACTION_UP结束。\n(3) 对事件的处理包括三类，分别为传递——dispatchTouchEvent()函数、拦截——onInterceptTouchEvent()函数、消费——onTouchEvent()函数和OnTouchListener\n\n```\n\n\n- 传递流程\n\n```\n (1) 事件从Activity.dispatchTouchEvent()开始传递，只要没有被停止或拦截，从最上层的View(ViewGroup)开始一直往下(子View)传递。子View可以通过onTouchEvent()对事件进行处理。\n(2) 事件由父View(ViewGroup)传递给子View，ViewGroup可以通过onInterceptTouchEvent()对事件做拦截，停止其往下传递。\n(3) 如果事件从上往下传递过程中一直没有被停止，且最底层子View没有消费事件，事件会反向往上传递，这时父View(ViewGroup)可以进行消费，如果还是没有被消费的话，最后会到Activity的onTouchEvent()函数。\n(4) 如果View没有对ACTION_DOWN进行消费，之后的其他事件不会传递过来。\n(5) OnTouchListener优先于onTouchEvent()对事件进行消费。\n上面的消费即表示相应函数返回值为true。\n\n\n(01) View中的dispatchTouchEvent()会将事件传递给\"自己的onTouch()\", \"自己的onTouchEvent()\"进行处理。而且onTouch()的优先级比onTouchEvent()的优先级要高。 \n(02) onTouch()与onTouchEvent()都是View中用户处理触摸事件的API。onTouch是OnTouchListener接口中的函数，OnTouchListener接口需要用户自己实现。onTouchEvent()是View自带的接口，Android系统提供了默认的实现；当然，用户可以重载该API。\n(03) onTouch()与onTouchEvent()有两个不同之处：(01), onTouch()是View提供给用户，让用户自己处理触摸事件的接口。而onTouchEvent()是Android系统自己实现的接口。(02)，onTouch()的优先级比onTouchEvent()的优先级更高。dispatchTouchEvent()中分发事件的时候，会先将事件分配给onTouch()进行处理，然后才分配给onTouchEvent()进行处理。 如果onTouch()对触摸事件进行了处理，并且返回true；那么，该触摸事件就不会分配在分配给onTouchEvent()进行处理了。只有当onTouch()没有处理，或者处理了但返回false时，才会分配给onTouchEvent()进行处理。\n\n\n```\n<!-- more-->\n\n- view的事件传递机制 如何用伪代码来表示？\n\n```\n/**\n     * 对于一个root viewgroup来说，如果接受了一个点击事件，那么首先会调用他的dispatchTouchEvent方法。\n     * 如果这个viewgroup的onInterceptTouchEvent 返回true，那就代表要拦截这个事件。接下来这个事件就\n     * 给viewgroup自己处理了，从而viewgroup的onTouchEvent方法就会被调用。如果如果这个viewgroup的onInterceptTouchEvent\n     * 返回false就代表我不拦截这个事件，然后就把这个事件传递给自己的子元素，然后子元素的dispatchTouchEvent\n     * 就会被调用，就是这样一个循环直到 事件被处理。\n     *\n     */\npublic　boolean dispatchTouchEvent(MotionEvent ev)\n{\n    boolean consume=false;\n    if (onInterceptTouchEvent(ev)) {\n        consume=onTouchEvent(ev);\n    }else\n    {\n        consume=child.dispatchTouchEvent(ev);\n    }\n    return consume;\n}\n\n```\n- .view的onTouchEvent，OnClickListerner和OnTouchListener的onTouch方法 三者优先级如何？\n\n\n```\nonTouchListener优先级最高，如果onTouch方法返回 false ，那onTouchEvent就被调用了，返回true 就不会被调用。至于onClick 优先级最低。\n\n```\n- 点击事件的传递顺序如何？\n\n\n```\nActivity-Window-View。从上到下依次传递，当然了如果你最低的那个view onTouchEvent返回false 那就说明他不想处理 那就再往上抛，都不处理的话\n最终就还是让Activity自己处理了。举个例子，pm下发一个任务给leader，leader自己不做 给架构师a，小a也不做 给程序员b，b如果做了那就结束了这个任务。\n\nb如果发现自己搞不定，那就找a做，a要是也搞不定 就会不断向上发起请求，最终可能还是pm做。\n\n//activity的dispatchTouchEvent 方法 一开始就是交给window去处理的\n//win的superDispatchTouchEvent 返回true 那就直接结束了 这个函数了。返回false就意味\n//这事件没人处理，最终还是给activity的onTouchEvent 自己处理 这里的getwindow 其实就是phonewindow\n public boolean dispatchTouchEvent(MotionEvent ev) {\n        if (ev.getAction() == MotionEvent.ACTION_DOWN) {\n            onUserInteraction();\n        }\n        if (getWindow().superDispatchTouchEvent(ev)) {\n            return true;\n        }\n        return onTouchEvent(ev);\n    }\n\n\n//来看phonewindow的这个函数 直接把事件传递给了mDecor\n\n @Override\n    public boolean superDispatchTouchEvent(MotionEvent event) {\n        return mDecor.superDispatchTouchEvent(event);\n    }\n\n//devorview就是 我们的rootview了 就是那个framelayout 我们的setContentView里面传递的那个layout\n//就是这个decorview的 子view了\n     @Override\n    public final View getDecorView() {\n        if (mDecor == null) {\n            installDecor();\n        }\n        return mDecor;\n    }\n\n```\n\n- 事件分为几个步骤？\n\n```\n\ndown事件开头，up事件结尾，中间可能会有数目不定的move事件。\n\n```\n\n- ViewGroup如何对点击事件分发？\n\n```\n\nviewgroup就是在actionMasked == MotionEvent.ACTION_DOWN 和 mFirstTouchTarget != null 这两种情况来判断是否会进入拦截事件的流程\n\n看代码可以知道 如果是ACTION_DOWN事件  那就肯定进入 是否要拦截事件的流程\n\n如果不是ACTION_DOWN事件 那就要看mFirstTouchTarget != null 这个条件是否成立\n\n这个地方有点绕但是也好理解，其实就是 对于一个事件序列来说 down是事件的开头 所以肯定进入了这个事件是否拦截的流程 也就是if 括号内。\n\n\nmFirstTouchTarget其实是一个单链表结构他指向的是 成功处理事件的子元素。\n\n也就是说 如果有子元素成功处理了 事件，那这个值就不为NULL。反过来说\n\n只要viewgroup拦截了事件，mFirstTouchTarget就不为NULL，所以括号内就不会执行，也就侧面说明了一个结论：\n\n某个view 一旦决定拦截事件，那么这个事件所属的事件序列 都只能由他来执行。并且onInterceptTouchEvent 这个方法不会被调用了\n\n            final boolean intercepted;\n            if (actionMasked == MotionEvent.ACTION_DOWN\n                    || mFirstTouchTarget != null) {\n                final boolean disallowIntercept = (mGroupFlags & FLAG_DISALLOW_INTERCEPT) != 0;\n                if (!disallowIntercept) {\n                    intercepted = onInterceptTouchEvent(ev);\n                    ev.setAction(action); // restore action in case it was changed\n                } else {\n                    intercepted = false;\n                }\n            } else {\n                // There are no touch targets and this action is not an initial down\n                // so this view group continues to intercept touches.\n                intercepted = true;\n            }\n            \n```\n\n- .如果某个view 处理事件的时候 没有消耗down事件 会有什么结果？\n\n```\n \n 假如一个view，在down事件来的时候 他的onTouchEvent返回false， 那么这个down事件 所属的事件序列 就是他后续的move 和up 都不会给他处理了，全部都给他的父view处理。\n\n```\n- 如果view 不消耗move或者up事件 会有什么结果？\n\n```\n那这个事件所属的事件序列就消失了，父view也不会处理的，最终都给activity 去处理了。\n\n```\n\n- .ViewGroup 默认拦截事件吗？\n\n```\n默认不拦截任何事件，onInterceptTouchEvent返回的是false。\n\n```\n\n- .requestDisallowInterceptTouchEvent 可以在子元素中干扰父元素的事件分发吗？如果可以，是全部都可以干扰吗？\n\n```\n肯定可以，但是down事件干扰不了。\n\n```\n\n- dispatchTouchEvent每次都会被调用吗？\n\n```\n是的，onInterceptTouchEvent则不会。\n```\n\n- 滑动冲突问题如何解决 思路是什么？\n\n```\n要解决滑动冲突 其实最主要的就是有一个核心思想。你到底想在一个事件序列中，让哪个view 来响应你的滑动？比如 从上到下滑，是哪个view来处理这个事件，从左到右呢？\n\n用业务需求 来想明白以后 剩下的 其实就很好做了。核心的方法 就是2个 外部拦截也就是父亲拦截，另外就是内部拦截，也就是子view拦截法。 学会这2种 基本上所有的滑动冲突\n\n都是这2种的变种，而且核心代码思想都一样。\n\n外部拦截法：思路就是重写父容器的onInterceptTouchEvent即可。子元素一般不需要管。可以很容易理解，因为这和android自身的事件处理机制 逻辑是一模一样的\n\n@Override\n    public boolean onInterceptTouchEvent(MotionEvent ev) {\n\n        boolean intercepted = false;\n        int x = (int) ev.getX();\n        int y = (int) ev.getY();\n\n        switch (ev.getAction()) {\n            //down事件肯定不能拦截 拦截了后面的就收不到了\n            case MotionEvent.ACTION_DOWN:\n                intercepted = false;\n                break;\n            case MotionEvent.ACTION_MOVE:\n                if (你的业务需求) {\n                    //如果确定拦截了 就去自己的onTouchEvent里 处理拦截之后的操作和效果 即可了\n                    intercepted = true;\n                } else {\n                    intercepted = false;\n                }\n                break;\n            case MotionEvent.ACTION_UP:\n                //up事件 我们一般都是返回false的 一般父容器都不会拦截他。 因为up是事件的最后一步。这里返回true也没啥意义\n                //唯一的意义就是因为 父元素 up被拦截。导致子元素 收不到up事件，那子元素 就肯定没有onClick事件触发了，这里的\n                //小细节 要想明白\n                intercepted = false;\n                break;\n            default:\n                break;\n        }\n        return intercepted;\n    }\n\n内部拦截法：内部拦截法稍微复杂一点，就是事件到来的时候，父容器不管，让子元素自己来决定是否处理。如果消耗了 就最好，没消耗 自然就转给父容器处理了。\n\n子元素代码：\n\n@Override\n    public boolean dispatchTouchEvent(MotionEvent event) {\n        int x = (int) event.getX();\n        int y = (int) event.getY();\n        switch (event.getAction()) {\n            case MotionEvent.ACTION_DOWN:\n                getParent().requestDisallowInterceptTouchEvent(true);\n                break;\n            case MotionEvent.ACTION_MOVE:\n                if (如果父容器需要这个点击事件) {\n                    getParent().requestDisallowInterceptTouchEvent(false);\n                }//否则的话 就交给自己本身view的onTouchEvent自动处理了\n                break;\n            case MotionEvent.ACTION_UP:\n                break;\n            default:\n                break;\n        }\n        return super.dispatchTouchEvent(event);\n    }\n\n父亲容器代码也要修改一下，其实就是保证父亲别拦截down：\n\n@Override\n    public boolean onInterceptTouchEvent(MotionEvent ev) {\n\n        if (ev.getAction() == MotionEvent.ACTION_DOWN) {\n            return false;\n\n        }\n        return true;\n    }\n    \n```\n\n- 事件来源\n\n```\nInputEvent有2个子类：KeyEvent和MotionEvent，其中KeyEvent表示键盘事件，而MotionEvent表示点击事件\n\n```\n\n- 基于监听的事件监听器\n\n```\nView.OnClickListener    // 单击事件\nView.OnCreateContextMenuListener    // 创建上下文菜单事件\nView.OnFocusChangeListener    // 焦点改变事件\nView.OnKeyListener    // 按钮事件\nView.OnLongClickListener    // 长点击事件\nView.OnTouchListener    // 触摸屏事件\n\n```\n- 基于回调的事件处理\n\n```\n   boolean onKeyDown(int keyCode, KeyEvent event)    // 按下\nboolean onKeyLongPress(int keyCode, KeyEvent event)    // 长按\nboolean onKeyUp(int keyCode, KeyEvent event)    // 松开\nboolean onKeyShortcut(int keyCode, KeyEvent event)        // 键盘快捷键触发时\nboolean onTouchEvent(MotionEvent event)        // 触摸屏事件\n\n基于监听的事件处理更有优势：可维护性高、保证监听的事件监听器会被优先触发。\n基于回调的事件处理更适合于那些比较固定的View。\n\n    *事件传递*\n\n所有基于回调的事件处理的回调方法返回true，表明已处理完成，不会继续传递；返回false，表明未处理完成，该事件继续传递下去。\n\n当某个键被按下时候，Android最先触发的是该按键上绑定的事件监听器，然后触发该组件提供的事件回调方法，最后传递到该组件所在的Activity。\n\n---\n\n一种是委托式一种是回调式。第一种就是将事件的处理委托给监听器处理，你可以定义一个View.OnTouchListener接口的子类作为监听器，其中有onTouch()方法。而第二种是重写View类自己本身的onTouchEvent方法，也就是控件自己处理事件。onTouch方法接收一个MotionEvent参数和一个View参数，而onTouchEvent方法仅接收MotionEvent参数。这是因为监听器可以监听多个View控件的事件。无论是通过onTouchEvent还是onTouch方法 它们的返回值都是boolean类型。true的含义是如果当前处理程序在处理完毕该事件后不希望传播给其他控件，则返回true。如果View对象不但对此事件不感兴趣，而且对与此触摸序列相关的任何未来事件都不感兴趣，那么返回false。比如如果Button的onTouchEvent方法想要处理用户的一次点击 则会有2个事件产生ACTION_DOWN和ACTION_UP，按道理这两个事件都会调用onTouchEvent方法，如果方法返回false则在按下时你可以做一些操作，但是手指抬起时你将不能再接收到MotionEvent对象了，所以你也就无从处理抬起事件了。\n\n---\n```\n","source":"_posts/View事件处理.md","raw":"---\ntitle: View事件处理\ncategories: View\ntags: View\ntoc: true  \n---\n- 基础知识\n\n```\n(1) 所有Touch事件都被封装成了MotionEvent对象，包括Touch的位置、时间、历史记录以及第几个手指(多指触摸)等。\n(2) 事件类型分为ACTION_DOWN, ACTION_UP, ACTION_MOVE, ACTION_POINTER_DOWN, ACTION_POINTER_UP, ACTION_CANCEL，每个事件都是以ACTION_DOWN开始ACTION_UP结束。\n(3) 对事件的处理包括三类，分别为传递——dispatchTouchEvent()函数、拦截——onInterceptTouchEvent()函数、消费——onTouchEvent()函数和OnTouchListener\n\n```\n\n\n- 传递流程\n\n```\n (1) 事件从Activity.dispatchTouchEvent()开始传递，只要没有被停止或拦截，从最上层的View(ViewGroup)开始一直往下(子View)传递。子View可以通过onTouchEvent()对事件进行处理。\n(2) 事件由父View(ViewGroup)传递给子View，ViewGroup可以通过onInterceptTouchEvent()对事件做拦截，停止其往下传递。\n(3) 如果事件从上往下传递过程中一直没有被停止，且最底层子View没有消费事件，事件会反向往上传递，这时父View(ViewGroup)可以进行消费，如果还是没有被消费的话，最后会到Activity的onTouchEvent()函数。\n(4) 如果View没有对ACTION_DOWN进行消费，之后的其他事件不会传递过来。\n(5) OnTouchListener优先于onTouchEvent()对事件进行消费。\n上面的消费即表示相应函数返回值为true。\n\n\n(01) View中的dispatchTouchEvent()会将事件传递给\"自己的onTouch()\", \"自己的onTouchEvent()\"进行处理。而且onTouch()的优先级比onTouchEvent()的优先级要高。 \n(02) onTouch()与onTouchEvent()都是View中用户处理触摸事件的API。onTouch是OnTouchListener接口中的函数，OnTouchListener接口需要用户自己实现。onTouchEvent()是View自带的接口，Android系统提供了默认的实现；当然，用户可以重载该API。\n(03) onTouch()与onTouchEvent()有两个不同之处：(01), onTouch()是View提供给用户，让用户自己处理触摸事件的接口。而onTouchEvent()是Android系统自己实现的接口。(02)，onTouch()的优先级比onTouchEvent()的优先级更高。dispatchTouchEvent()中分发事件的时候，会先将事件分配给onTouch()进行处理，然后才分配给onTouchEvent()进行处理。 如果onTouch()对触摸事件进行了处理，并且返回true；那么，该触摸事件就不会分配在分配给onTouchEvent()进行处理了。只有当onTouch()没有处理，或者处理了但返回false时，才会分配给onTouchEvent()进行处理。\n\n\n```\n<!-- more-->\n\n- view的事件传递机制 如何用伪代码来表示？\n\n```\n/**\n     * 对于一个root viewgroup来说，如果接受了一个点击事件，那么首先会调用他的dispatchTouchEvent方法。\n     * 如果这个viewgroup的onInterceptTouchEvent 返回true，那就代表要拦截这个事件。接下来这个事件就\n     * 给viewgroup自己处理了，从而viewgroup的onTouchEvent方法就会被调用。如果如果这个viewgroup的onInterceptTouchEvent\n     * 返回false就代表我不拦截这个事件，然后就把这个事件传递给自己的子元素，然后子元素的dispatchTouchEvent\n     * 就会被调用，就是这样一个循环直到 事件被处理。\n     *\n     */\npublic　boolean dispatchTouchEvent(MotionEvent ev)\n{\n    boolean consume=false;\n    if (onInterceptTouchEvent(ev)) {\n        consume=onTouchEvent(ev);\n    }else\n    {\n        consume=child.dispatchTouchEvent(ev);\n    }\n    return consume;\n}\n\n```\n- .view的onTouchEvent，OnClickListerner和OnTouchListener的onTouch方法 三者优先级如何？\n\n\n```\nonTouchListener优先级最高，如果onTouch方法返回 false ，那onTouchEvent就被调用了，返回true 就不会被调用。至于onClick 优先级最低。\n\n```\n- 点击事件的传递顺序如何？\n\n\n```\nActivity-Window-View。从上到下依次传递，当然了如果你最低的那个view onTouchEvent返回false 那就说明他不想处理 那就再往上抛，都不处理的话\n最终就还是让Activity自己处理了。举个例子，pm下发一个任务给leader，leader自己不做 给架构师a，小a也不做 给程序员b，b如果做了那就结束了这个任务。\n\nb如果发现自己搞不定，那就找a做，a要是也搞不定 就会不断向上发起请求，最终可能还是pm做。\n\n//activity的dispatchTouchEvent 方法 一开始就是交给window去处理的\n//win的superDispatchTouchEvent 返回true 那就直接结束了 这个函数了。返回false就意味\n//这事件没人处理，最终还是给activity的onTouchEvent 自己处理 这里的getwindow 其实就是phonewindow\n public boolean dispatchTouchEvent(MotionEvent ev) {\n        if (ev.getAction() == MotionEvent.ACTION_DOWN) {\n            onUserInteraction();\n        }\n        if (getWindow().superDispatchTouchEvent(ev)) {\n            return true;\n        }\n        return onTouchEvent(ev);\n    }\n\n\n//来看phonewindow的这个函数 直接把事件传递给了mDecor\n\n @Override\n    public boolean superDispatchTouchEvent(MotionEvent event) {\n        return mDecor.superDispatchTouchEvent(event);\n    }\n\n//devorview就是 我们的rootview了 就是那个framelayout 我们的setContentView里面传递的那个layout\n//就是这个decorview的 子view了\n     @Override\n    public final View getDecorView() {\n        if (mDecor == null) {\n            installDecor();\n        }\n        return mDecor;\n    }\n\n```\n\n- 事件分为几个步骤？\n\n```\n\ndown事件开头，up事件结尾，中间可能会有数目不定的move事件。\n\n```\n\n- ViewGroup如何对点击事件分发？\n\n```\n\nviewgroup就是在actionMasked == MotionEvent.ACTION_DOWN 和 mFirstTouchTarget != null 这两种情况来判断是否会进入拦截事件的流程\n\n看代码可以知道 如果是ACTION_DOWN事件  那就肯定进入 是否要拦截事件的流程\n\n如果不是ACTION_DOWN事件 那就要看mFirstTouchTarget != null 这个条件是否成立\n\n这个地方有点绕但是也好理解，其实就是 对于一个事件序列来说 down是事件的开头 所以肯定进入了这个事件是否拦截的流程 也就是if 括号内。\n\n\nmFirstTouchTarget其实是一个单链表结构他指向的是 成功处理事件的子元素。\n\n也就是说 如果有子元素成功处理了 事件，那这个值就不为NULL。反过来说\n\n只要viewgroup拦截了事件，mFirstTouchTarget就不为NULL，所以括号内就不会执行，也就侧面说明了一个结论：\n\n某个view 一旦决定拦截事件，那么这个事件所属的事件序列 都只能由他来执行。并且onInterceptTouchEvent 这个方法不会被调用了\n\n            final boolean intercepted;\n            if (actionMasked == MotionEvent.ACTION_DOWN\n                    || mFirstTouchTarget != null) {\n                final boolean disallowIntercept = (mGroupFlags & FLAG_DISALLOW_INTERCEPT) != 0;\n                if (!disallowIntercept) {\n                    intercepted = onInterceptTouchEvent(ev);\n                    ev.setAction(action); // restore action in case it was changed\n                } else {\n                    intercepted = false;\n                }\n            } else {\n                // There are no touch targets and this action is not an initial down\n                // so this view group continues to intercept touches.\n                intercepted = true;\n            }\n            \n```\n\n- .如果某个view 处理事件的时候 没有消耗down事件 会有什么结果？\n\n```\n \n 假如一个view，在down事件来的时候 他的onTouchEvent返回false， 那么这个down事件 所属的事件序列 就是他后续的move 和up 都不会给他处理了，全部都给他的父view处理。\n\n```\n- 如果view 不消耗move或者up事件 会有什么结果？\n\n```\n那这个事件所属的事件序列就消失了，父view也不会处理的，最终都给activity 去处理了。\n\n```\n\n- .ViewGroup 默认拦截事件吗？\n\n```\n默认不拦截任何事件，onInterceptTouchEvent返回的是false。\n\n```\n\n- .requestDisallowInterceptTouchEvent 可以在子元素中干扰父元素的事件分发吗？如果可以，是全部都可以干扰吗？\n\n```\n肯定可以，但是down事件干扰不了。\n\n```\n\n- dispatchTouchEvent每次都会被调用吗？\n\n```\n是的，onInterceptTouchEvent则不会。\n```\n\n- 滑动冲突问题如何解决 思路是什么？\n\n```\n要解决滑动冲突 其实最主要的就是有一个核心思想。你到底想在一个事件序列中，让哪个view 来响应你的滑动？比如 从上到下滑，是哪个view来处理这个事件，从左到右呢？\n\n用业务需求 来想明白以后 剩下的 其实就很好做了。核心的方法 就是2个 外部拦截也就是父亲拦截，另外就是内部拦截，也就是子view拦截法。 学会这2种 基本上所有的滑动冲突\n\n都是这2种的变种，而且核心代码思想都一样。\n\n外部拦截法：思路就是重写父容器的onInterceptTouchEvent即可。子元素一般不需要管。可以很容易理解，因为这和android自身的事件处理机制 逻辑是一模一样的\n\n@Override\n    public boolean onInterceptTouchEvent(MotionEvent ev) {\n\n        boolean intercepted = false;\n        int x = (int) ev.getX();\n        int y = (int) ev.getY();\n\n        switch (ev.getAction()) {\n            //down事件肯定不能拦截 拦截了后面的就收不到了\n            case MotionEvent.ACTION_DOWN:\n                intercepted = false;\n                break;\n            case MotionEvent.ACTION_MOVE:\n                if (你的业务需求) {\n                    //如果确定拦截了 就去自己的onTouchEvent里 处理拦截之后的操作和效果 即可了\n                    intercepted = true;\n                } else {\n                    intercepted = false;\n                }\n                break;\n            case MotionEvent.ACTION_UP:\n                //up事件 我们一般都是返回false的 一般父容器都不会拦截他。 因为up是事件的最后一步。这里返回true也没啥意义\n                //唯一的意义就是因为 父元素 up被拦截。导致子元素 收不到up事件，那子元素 就肯定没有onClick事件触发了，这里的\n                //小细节 要想明白\n                intercepted = false;\n                break;\n            default:\n                break;\n        }\n        return intercepted;\n    }\n\n内部拦截法：内部拦截法稍微复杂一点，就是事件到来的时候，父容器不管，让子元素自己来决定是否处理。如果消耗了 就最好，没消耗 自然就转给父容器处理了。\n\n子元素代码：\n\n@Override\n    public boolean dispatchTouchEvent(MotionEvent event) {\n        int x = (int) event.getX();\n        int y = (int) event.getY();\n        switch (event.getAction()) {\n            case MotionEvent.ACTION_DOWN:\n                getParent().requestDisallowInterceptTouchEvent(true);\n                break;\n            case MotionEvent.ACTION_MOVE:\n                if (如果父容器需要这个点击事件) {\n                    getParent().requestDisallowInterceptTouchEvent(false);\n                }//否则的话 就交给自己本身view的onTouchEvent自动处理了\n                break;\n            case MotionEvent.ACTION_UP:\n                break;\n            default:\n                break;\n        }\n        return super.dispatchTouchEvent(event);\n    }\n\n父亲容器代码也要修改一下，其实就是保证父亲别拦截down：\n\n@Override\n    public boolean onInterceptTouchEvent(MotionEvent ev) {\n\n        if (ev.getAction() == MotionEvent.ACTION_DOWN) {\n            return false;\n\n        }\n        return true;\n    }\n    \n```\n\n- 事件来源\n\n```\nInputEvent有2个子类：KeyEvent和MotionEvent，其中KeyEvent表示键盘事件，而MotionEvent表示点击事件\n\n```\n\n- 基于监听的事件监听器\n\n```\nView.OnClickListener    // 单击事件\nView.OnCreateContextMenuListener    // 创建上下文菜单事件\nView.OnFocusChangeListener    // 焦点改变事件\nView.OnKeyListener    // 按钮事件\nView.OnLongClickListener    // 长点击事件\nView.OnTouchListener    // 触摸屏事件\n\n```\n- 基于回调的事件处理\n\n```\n   boolean onKeyDown(int keyCode, KeyEvent event)    // 按下\nboolean onKeyLongPress(int keyCode, KeyEvent event)    // 长按\nboolean onKeyUp(int keyCode, KeyEvent event)    // 松开\nboolean onKeyShortcut(int keyCode, KeyEvent event)        // 键盘快捷键触发时\nboolean onTouchEvent(MotionEvent event)        // 触摸屏事件\n\n基于监听的事件处理更有优势：可维护性高、保证监听的事件监听器会被优先触发。\n基于回调的事件处理更适合于那些比较固定的View。\n\n    *事件传递*\n\n所有基于回调的事件处理的回调方法返回true，表明已处理完成，不会继续传递；返回false，表明未处理完成，该事件继续传递下去。\n\n当某个键被按下时候，Android最先触发的是该按键上绑定的事件监听器，然后触发该组件提供的事件回调方法，最后传递到该组件所在的Activity。\n\n---\n\n一种是委托式一种是回调式。第一种就是将事件的处理委托给监听器处理，你可以定义一个View.OnTouchListener接口的子类作为监听器，其中有onTouch()方法。而第二种是重写View类自己本身的onTouchEvent方法，也就是控件自己处理事件。onTouch方法接收一个MotionEvent参数和一个View参数，而onTouchEvent方法仅接收MotionEvent参数。这是因为监听器可以监听多个View控件的事件。无论是通过onTouchEvent还是onTouch方法 它们的返回值都是boolean类型。true的含义是如果当前处理程序在处理完毕该事件后不希望传播给其他控件，则返回true。如果View对象不但对此事件不感兴趣，而且对与此触摸序列相关的任何未来事件都不感兴趣，那么返回false。比如如果Button的onTouchEvent方法想要处理用户的一次点击 则会有2个事件产生ACTION_DOWN和ACTION_UP，按道理这两个事件都会调用onTouchEvent方法，如果方法返回false则在按下时你可以做一些操作，但是手指抬起时你将不能再接收到MotionEvent对象了，所以你也就无从处理抬起事件了。\n\n---\n```\n","slug":"View事件处理","published":1,"date":"2016-05-29T11:08:35.902Z","updated":"2016-05-30T12:15:07.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou5387b000ef0vch2zcsqtl","content":"<ul>\n<li>基础知识</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(1) 所有Touch事件都被封装成了MotionEvent对象，包括Touch的位置、时间、历史记录以及第几个手指(多指触摸)等。</span><br><span class=\"line\">(2) 事件类型分为ACTION_DOWN, ACTION_UP, ACTION_MOVE, ACTION_POINTER_DOWN, ACTION_POINTER_UP, ACTION_CANCEL，每个事件都是以ACTION_DOWN开始ACTION_UP结束。</span><br><span class=\"line\">(3) 对事件的处理包括三类，分别为传递——dispatchTouchEvent()函数、拦截——onInterceptTouchEvent()函数、消费——onTouchEvent()函数和OnTouchListener</span><br></pre></td></tr></table></figure>\n<ul>\n<li>传递流程</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> (1) 事件从Activity.dispatchTouchEvent()开始传递，只要没有被停止或拦截，从最上层的View(ViewGroup)开始一直往下(子View)传递。子View可以通过onTouchEvent()对事件进行处理。</span><br><span class=\"line\">(2) 事件由父View(ViewGroup)传递给子View，ViewGroup可以通过onInterceptTouchEvent()对事件做拦截，停止其往下传递。</span><br><span class=\"line\">(3) 如果事件从上往下传递过程中一直没有被停止，且最底层子View没有消费事件，事件会反向往上传递，这时父View(ViewGroup)可以进行消费，如果还是没有被消费的话，最后会到Activity的onTouchEvent()函数。</span><br><span class=\"line\">(4) 如果View没有对ACTION_DOWN进行消费，之后的其他事件不会传递过来。</span><br><span class=\"line\">(5) OnTouchListener优先于onTouchEvent()对事件进行消费。</span><br><span class=\"line\">上面的消费即表示相应函数返回值为true。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(01) View中的dispatchTouchEvent()会将事件传递给&quot;自己的onTouch()&quot;, &quot;自己的onTouchEvent()&quot;进行处理。而且onTouch()的优先级比onTouchEvent()的优先级要高。 </span><br><span class=\"line\">(02) onTouch()与onTouchEvent()都是View中用户处理触摸事件的API。onTouch是OnTouchListener接口中的函数，OnTouchListener接口需要用户自己实现。onTouchEvent()是View自带的接口，Android系统提供了默认的实现；当然，用户可以重载该API。</span><br><span class=\"line\">(03) onTouch()与onTouchEvent()有两个不同之处：(01), onTouch()是View提供给用户，让用户自己处理触摸事件的接口。而onTouchEvent()是Android系统自己实现的接口。(02)，onTouch()的优先级比onTouchEvent()的优先级更高。dispatchTouchEvent()中分发事件的时候，会先将事件分配给onTouch()进行处理，然后才分配给onTouchEvent()进行处理。 如果onTouch()对触摸事件进行了处理，并且返回true；那么，该触摸事件就不会分配在分配给onTouchEvent()进行处理了。只有当onTouch()没有处理，或者处理了但返回false时，才会分配给onTouchEvent()进行处理。</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<ul>\n<li>view的事件传递机制 如何用伪代码来表示？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">     * 对于一个root viewgroup来说，如果接受了一个点击事件，那么首先会调用他的dispatchTouchEvent方法。</span><br><span class=\"line\">     * 如果这个viewgroup的onInterceptTouchEvent 返回true，那就代表要拦截这个事件。接下来这个事件就</span><br><span class=\"line\">     * 给viewgroup自己处理了，从而viewgroup的onTouchEvent方法就会被调用。如果如果这个viewgroup的onInterceptTouchEvent</span><br><span class=\"line\">     * 返回false就代表我不拦截这个事件，然后就把这个事件传递给自己的子元素，然后子元素的dispatchTouchEvent</span><br><span class=\"line\">     * 就会被调用，就是这样一个循环直到 事件被处理。</span><br><span class=\"line\">     *</span><br><span class=\"line\">     */</span><br><span class=\"line\">public　boolean dispatchTouchEvent(MotionEvent ev)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    boolean consume=false;</span><br><span class=\"line\">    if (onInterceptTouchEvent(ev)) &#123;</span><br><span class=\"line\">        consume=onTouchEvent(ev);</span><br><span class=\"line\">    &#125;else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        consume=child.dispatchTouchEvent(ev);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return consume;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>.view的onTouchEvent，OnClickListerner和OnTouchListener的onTouch方法 三者优先级如何？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onTouchListener优先级最高，如果onTouch方法返回 false ，那onTouchEvent就被调用了，返回true 就不会被调用。至于onClick 优先级最低。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>点击事件的传递顺序如何？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Activity-Window-View。从上到下依次传递，当然了如果你最低的那个view onTouchEvent返回false 那就说明他不想处理 那就再往上抛，都不处理的话</span><br><span class=\"line\">最终就还是让Activity自己处理了。举个例子，pm下发一个任务给leader，leader自己不做 给架构师a，小a也不做 给程序员b，b如果做了那就结束了这个任务。</span><br><span class=\"line\"></span><br><span class=\"line\">b如果发现自己搞不定，那就找a做，a要是也搞不定 就会不断向上发起请求，最终可能还是pm做。</span><br><span class=\"line\"></span><br><span class=\"line\">//activity的dispatchTouchEvent 方法 一开始就是交给window去处理的</span><br><span class=\"line\">//win的superDispatchTouchEvent 返回true 那就直接结束了 这个函数了。返回false就意味</span><br><span class=\"line\">//这事件没人处理，最终还是给activity的onTouchEvent 自己处理 这里的getwindow 其实就是phonewindow</span><br><span class=\"line\"> public boolean dispatchTouchEvent(MotionEvent ev) &#123;</span><br><span class=\"line\">        if (ev.getAction() == MotionEvent.ACTION_DOWN) &#123;</span><br><span class=\"line\">            onUserInteraction();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (getWindow().superDispatchTouchEvent(ev)) &#123;</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return onTouchEvent(ev);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//来看phonewindow的这个函数 直接把事件传递给了mDecor</span><br><span class=\"line\"></span><br><span class=\"line\"> @Override</span><br><span class=\"line\">    public boolean superDispatchTouchEvent(MotionEvent event) &#123;</span><br><span class=\"line\">        return mDecor.superDispatchTouchEvent(event);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//devorview就是 我们的rootview了 就是那个framelayout 我们的setContentView里面传递的那个layout</span><br><span class=\"line\">//就是这个decorview的 子view了</span><br><span class=\"line\">     @Override</span><br><span class=\"line\">    public final View getDecorView() &#123;</span><br><span class=\"line\">        if (mDecor == null) &#123;</span><br><span class=\"line\">            installDecor();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return mDecor;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>事件分为几个步骤？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">down事件开头，up事件结尾，中间可能会有数目不定的move事件。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>ViewGroup如何对点击事件分发？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">viewgroup就是在actionMasked == MotionEvent.ACTION_DOWN 和 mFirstTouchTarget != null 这两种情况来判断是否会进入拦截事件的流程</span><br><span class=\"line\"></span><br><span class=\"line\">看代码可以知道 如果是ACTION_DOWN事件  那就肯定进入 是否要拦截事件的流程</span><br><span class=\"line\"></span><br><span class=\"line\">如果不是ACTION_DOWN事件 那就要看mFirstTouchTarget != null 这个条件是否成立</span><br><span class=\"line\"></span><br><span class=\"line\">这个地方有点绕但是也好理解，其实就是 对于一个事件序列来说 down是事件的开头 所以肯定进入了这个事件是否拦截的流程 也就是if 括号内。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">mFirstTouchTarget其实是一个单链表结构他指向的是 成功处理事件的子元素。</span><br><span class=\"line\"></span><br><span class=\"line\">也就是说 如果有子元素成功处理了 事件，那这个值就不为NULL。反过来说</span><br><span class=\"line\"></span><br><span class=\"line\">只要viewgroup拦截了事件，mFirstTouchTarget就不为NULL，所以括号内就不会执行，也就侧面说明了一个结论：</span><br><span class=\"line\"></span><br><span class=\"line\">某个view 一旦决定拦截事件，那么这个事件所属的事件序列 都只能由他来执行。并且onInterceptTouchEvent 这个方法不会被调用了</span><br><span class=\"line\"></span><br><span class=\"line\">            final boolean intercepted;</span><br><span class=\"line\">            if (actionMasked == MotionEvent.ACTION_DOWN</span><br><span class=\"line\">                    || mFirstTouchTarget != null) &#123;</span><br><span class=\"line\">                final boolean disallowIntercept = (mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != 0;</span><br><span class=\"line\">                if (!disallowIntercept) &#123;</span><br><span class=\"line\">                    intercepted = onInterceptTouchEvent(ev);</span><br><span class=\"line\">                    ev.setAction(action); // restore action in case it was changed</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    intercepted = false;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                // There are no touch targets and this action is not an initial down</span><br><span class=\"line\">                // so this view group continues to intercept touches.</span><br><span class=\"line\">                intercepted = true;</span><br><span class=\"line\">            &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>.如果某个view 处理事件的时候 没有消耗down事件 会有什么结果？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">假如一个view，在down事件来的时候 他的onTouchEvent返回false， 那么这个down事件 所属的事件序列 就是他后续的move 和up 都不会给他处理了，全部都给他的父view处理。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果view 不消耗move或者up事件 会有什么结果？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">那这个事件所属的事件序列就消失了，父view也不会处理的，最终都给activity 去处理了。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>.ViewGroup 默认拦截事件吗？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">默认不拦截任何事件，onInterceptTouchEvent返回的是false。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>.requestDisallowInterceptTouchEvent 可以在子元素中干扰父元素的事件分发吗？如果可以，是全部都可以干扰吗？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">肯定可以，但是down事件干扰不了。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>dispatchTouchEvent每次都会被调用吗？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">是的，onInterceptTouchEvent则不会。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>滑动冲突问题如何解决 思路是什么？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">要解决滑动冲突 其实最主要的就是有一个核心思想。你到底想在一个事件序列中，让哪个view 来响应你的滑动？比如 从上到下滑，是哪个view来处理这个事件，从左到右呢？</span><br><span class=\"line\"></span><br><span class=\"line\">用业务需求 来想明白以后 剩下的 其实就很好做了。核心的方法 就是2个 外部拦截也就是父亲拦截，另外就是内部拦截，也就是子view拦截法。 学会这2种 基本上所有的滑动冲突</span><br><span class=\"line\"></span><br><span class=\"line\">都是这2种的变种，而且核心代码思想都一样。</span><br><span class=\"line\"></span><br><span class=\"line\">外部拦截法：思路就是重写父容器的onInterceptTouchEvent即可。子元素一般不需要管。可以很容易理解，因为这和android自身的事件处理机制 逻辑是一模一样的</span><br><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\">    public boolean onInterceptTouchEvent(MotionEvent ev) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        boolean intercepted = false;</span><br><span class=\"line\">        int x = (int) ev.getX();</span><br><span class=\"line\">        int y = (int) ev.getY();</span><br><span class=\"line\"></span><br><span class=\"line\">        switch (ev.getAction()) &#123;</span><br><span class=\"line\">            //down事件肯定不能拦截 拦截了后面的就收不到了</span><br><span class=\"line\">            case MotionEvent.ACTION_DOWN:</span><br><span class=\"line\">                intercepted = false;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            case MotionEvent.ACTION_MOVE:</span><br><span class=\"line\">                if (你的业务需求) &#123;</span><br><span class=\"line\">                    //如果确定拦截了 就去自己的onTouchEvent里 处理拦截之后的操作和效果 即可了</span><br><span class=\"line\">                    intercepted = true;</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    intercepted = false;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            case MotionEvent.ACTION_UP:</span><br><span class=\"line\">                //up事件 我们一般都是返回false的 一般父容器都不会拦截他。 因为up是事件的最后一步。这里返回true也没啥意义</span><br><span class=\"line\">                //唯一的意义就是因为 父元素 up被拦截。导致子元素 收不到up事件，那子元素 就肯定没有onClick事件触发了，这里的</span><br><span class=\"line\">                //小细节 要想明白</span><br><span class=\"line\">                intercepted = false;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            default:</span><br><span class=\"line\">                break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return intercepted;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">内部拦截法：内部拦截法稍微复杂一点，就是事件到来的时候，父容器不管，让子元素自己来决定是否处理。如果消耗了 就最好，没消耗 自然就转给父容器处理了。</span><br><span class=\"line\"></span><br><span class=\"line\">子元素代码：</span><br><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\">    public boolean dispatchTouchEvent(MotionEvent event) &#123;</span><br><span class=\"line\">        int x = (int) event.getX();</span><br><span class=\"line\">        int y = (int) event.getY();</span><br><span class=\"line\">        switch (event.getAction()) &#123;</span><br><span class=\"line\">            case MotionEvent.ACTION_DOWN:</span><br><span class=\"line\">                getParent().requestDisallowInterceptTouchEvent(true);</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            case MotionEvent.ACTION_MOVE:</span><br><span class=\"line\">                if (如果父容器需要这个点击事件) &#123;</span><br><span class=\"line\">                    getParent().requestDisallowInterceptTouchEvent(false);</span><br><span class=\"line\">                &#125;//否则的话 就交给自己本身view的onTouchEvent自动处理了</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            case MotionEvent.ACTION_UP:</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            default:</span><br><span class=\"line\">                break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return super.dispatchTouchEvent(event);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">父亲容器代码也要修改一下，其实就是保证父亲别拦截down：</span><br><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\">    public boolean onInterceptTouchEvent(MotionEvent ev) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (ev.getAction() == MotionEvent.ACTION_DOWN) &#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>事件来源</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">InputEvent有2个子类：KeyEvent和MotionEvent，其中KeyEvent表示键盘事件，而MotionEvent表示点击事件</span><br></pre></td></tr></table></figure>\n<ul>\n<li>基于监听的事件监听器</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">View.OnClickListener    // 单击事件</span><br><span class=\"line\">View.OnCreateContextMenuListener    // 创建上下文菜单事件</span><br><span class=\"line\">View.OnFocusChangeListener    // 焦点改变事件</span><br><span class=\"line\">View.OnKeyListener    // 按钮事件</span><br><span class=\"line\">View.OnLongClickListener    // 长点击事件</span><br><span class=\"line\">View.OnTouchListener    // 触摸屏事件</span><br></pre></td></tr></table></figure>\n<ul>\n<li>基于回调的事件处理</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   boolean onKeyDown(int keyCode, KeyEvent event)    // 按下</span><br><span class=\"line\">boolean onKeyLongPress(int keyCode, KeyEvent event)    // 长按</span><br><span class=\"line\">boolean onKeyUp(int keyCode, KeyEvent event)    // 松开</span><br><span class=\"line\">boolean onKeyShortcut(int keyCode, KeyEvent event)        // 键盘快捷键触发时</span><br><span class=\"line\">boolean onTouchEvent(MotionEvent event)        // 触摸屏事件</span><br><span class=\"line\"></span><br><span class=\"line\">基于监听的事件处理更有优势：可维护性高、保证监听的事件监听器会被优先触发。</span><br><span class=\"line\">基于回调的事件处理更适合于那些比较固定的View。</span><br><span class=\"line\"></span><br><span class=\"line\">    *事件传递*</span><br><span class=\"line\"></span><br><span class=\"line\">所有基于回调的事件处理的回调方法返回true，表明已处理完成，不会继续传递；返回false，表明未处理完成，该事件继续传递下去。</span><br><span class=\"line\"></span><br><span class=\"line\">当某个键被按下时候，Android最先触发的是该按键上绑定的事件监听器，然后触发该组件提供的事件回调方法，最后传递到该组件所在的Activity。</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">一种是委托式一种是回调式。第一种就是将事件的处理委托给监听器处理，你可以定义一个View.OnTouchListener接口的子类作为监听器，其中有onTouch()方法。而第二种是重写View类自己本身的onTouchEvent方法，也就是控件自己处理事件。onTouch方法接收一个MotionEvent参数和一个View参数，而onTouchEvent方法仅接收MotionEvent参数。这是因为监听器可以监听多个View控件的事件。无论是通过onTouchEvent还是onTouch方法 它们的返回值都是boolean类型。true的含义是如果当前处理程序在处理完毕该事件后不希望传播给其他控件，则返回true。如果View对象不但对此事件不感兴趣，而且对与此触摸序列相关的任何未来事件都不感兴趣，那么返回false。比如如果Button的onTouchEvent方法想要处理用户的一次点击 则会有2个事件产生ACTION_DOWN和ACTION_UP，按道理这两个事件都会调用onTouchEvent方法，如果方法返回false则在按下时你可以做一些操作，但是手指抬起时你将不能再接收到MotionEvent对象了，所以你也就无从处理抬起事件了。</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n","excerpt":"<ul>\n<li>基础知识</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(1) 所有Touch事件都被封装成了MotionEvent对象，包括Touch的位置、时间、历史记录以及第几个手指(多指触摸)等。</span><br><span class=\"line\">(2) 事件类型分为ACTION_DOWN, ACTION_UP, ACTION_MOVE, ACTION_POINTER_DOWN, ACTION_POINTER_UP, ACTION_CANCEL，每个事件都是以ACTION_DOWN开始ACTION_UP结束。</span><br><span class=\"line\">(3) 对事件的处理包括三类，分别为传递——dispatchTouchEvent()函数、拦截——onInterceptTouchEvent()函数、消费——onTouchEvent()函数和OnTouchListener</span><br></pre></td></tr></table></figure>\n<ul>\n<li>传递流程</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> (1) 事件从Activity.dispatchTouchEvent()开始传递，只要没有被停止或拦截，从最上层的View(ViewGroup)开始一直往下(子View)传递。子View可以通过onTouchEvent()对事件进行处理。</span><br><span class=\"line\">(2) 事件由父View(ViewGroup)传递给子View，ViewGroup可以通过onInterceptTouchEvent()对事件做拦截，停止其往下传递。</span><br><span class=\"line\">(3) 如果事件从上往下传递过程中一直没有被停止，且最底层子View没有消费事件，事件会反向往上传递，这时父View(ViewGroup)可以进行消费，如果还是没有被消费的话，最后会到Activity的onTouchEvent()函数。</span><br><span class=\"line\">(4) 如果View没有对ACTION_DOWN进行消费，之后的其他事件不会传递过来。</span><br><span class=\"line\">(5) OnTouchListener优先于onTouchEvent()对事件进行消费。</span><br><span class=\"line\">上面的消费即表示相应函数返回值为true。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(01) View中的dispatchTouchEvent()会将事件传递给&quot;自己的onTouch()&quot;, &quot;自己的onTouchEvent()&quot;进行处理。而且onTouch()的优先级比onTouchEvent()的优先级要高。 </span><br><span class=\"line\">(02) onTouch()与onTouchEvent()都是View中用户处理触摸事件的API。onTouch是OnTouchListener接口中的函数，OnTouchListener接口需要用户自己实现。onTouchEvent()是View自带的接口，Android系统提供了默认的实现；当然，用户可以重载该API。</span><br><span class=\"line\">(03) onTouch()与onTouchEvent()有两个不同之处：(01), onTouch()是View提供给用户，让用户自己处理触摸事件的接口。而onTouchEvent()是Android系统自己实现的接口。(02)，onTouch()的优先级比onTouchEvent()的优先级更高。dispatchTouchEvent()中分发事件的时候，会先将事件分配给onTouch()进行处理，然后才分配给onTouchEvent()进行处理。 如果onTouch()对触摸事件进行了处理，并且返回true；那么，该触摸事件就不会分配在分配给onTouchEvent()进行处理了。只有当onTouch()没有处理，或者处理了但返回false时，才会分配给onTouchEvent()进行处理。</span><br></pre></td></tr></table></figure>","more":"<ul>\n<li>view的事件传递机制 如何用伪代码来表示？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">     * 对于一个root viewgroup来说，如果接受了一个点击事件，那么首先会调用他的dispatchTouchEvent方法。</span><br><span class=\"line\">     * 如果这个viewgroup的onInterceptTouchEvent 返回true，那就代表要拦截这个事件。接下来这个事件就</span><br><span class=\"line\">     * 给viewgroup自己处理了，从而viewgroup的onTouchEvent方法就会被调用。如果如果这个viewgroup的onInterceptTouchEvent</span><br><span class=\"line\">     * 返回false就代表我不拦截这个事件，然后就把这个事件传递给自己的子元素，然后子元素的dispatchTouchEvent</span><br><span class=\"line\">     * 就会被调用，就是这样一个循环直到 事件被处理。</span><br><span class=\"line\">     *</span><br><span class=\"line\">     */</span><br><span class=\"line\">public　boolean dispatchTouchEvent(MotionEvent ev)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    boolean consume=false;</span><br><span class=\"line\">    if (onInterceptTouchEvent(ev)) &#123;</span><br><span class=\"line\">        consume=onTouchEvent(ev);</span><br><span class=\"line\">    &#125;else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        consume=child.dispatchTouchEvent(ev);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return consume;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>.view的onTouchEvent，OnClickListerner和OnTouchListener的onTouch方法 三者优先级如何？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onTouchListener优先级最高，如果onTouch方法返回 false ，那onTouchEvent就被调用了，返回true 就不会被调用。至于onClick 优先级最低。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>点击事件的传递顺序如何？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Activity-Window-View。从上到下依次传递，当然了如果你最低的那个view onTouchEvent返回false 那就说明他不想处理 那就再往上抛，都不处理的话</span><br><span class=\"line\">最终就还是让Activity自己处理了。举个例子，pm下发一个任务给leader，leader自己不做 给架构师a，小a也不做 给程序员b，b如果做了那就结束了这个任务。</span><br><span class=\"line\"></span><br><span class=\"line\">b如果发现自己搞不定，那就找a做，a要是也搞不定 就会不断向上发起请求，最终可能还是pm做。</span><br><span class=\"line\"></span><br><span class=\"line\">//activity的dispatchTouchEvent 方法 一开始就是交给window去处理的</span><br><span class=\"line\">//win的superDispatchTouchEvent 返回true 那就直接结束了 这个函数了。返回false就意味</span><br><span class=\"line\">//这事件没人处理，最终还是给activity的onTouchEvent 自己处理 这里的getwindow 其实就是phonewindow</span><br><span class=\"line\"> public boolean dispatchTouchEvent(MotionEvent ev) &#123;</span><br><span class=\"line\">        if (ev.getAction() == MotionEvent.ACTION_DOWN) &#123;</span><br><span class=\"line\">            onUserInteraction();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (getWindow().superDispatchTouchEvent(ev)) &#123;</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return onTouchEvent(ev);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//来看phonewindow的这个函数 直接把事件传递给了mDecor</span><br><span class=\"line\"></span><br><span class=\"line\"> @Override</span><br><span class=\"line\">    public boolean superDispatchTouchEvent(MotionEvent event) &#123;</span><br><span class=\"line\">        return mDecor.superDispatchTouchEvent(event);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//devorview就是 我们的rootview了 就是那个framelayout 我们的setContentView里面传递的那个layout</span><br><span class=\"line\">//就是这个decorview的 子view了</span><br><span class=\"line\">     @Override</span><br><span class=\"line\">    public final View getDecorView() &#123;</span><br><span class=\"line\">        if (mDecor == null) &#123;</span><br><span class=\"line\">            installDecor();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return mDecor;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>事件分为几个步骤？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">down事件开头，up事件结尾，中间可能会有数目不定的move事件。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>ViewGroup如何对点击事件分发？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">viewgroup就是在actionMasked == MotionEvent.ACTION_DOWN 和 mFirstTouchTarget != null 这两种情况来判断是否会进入拦截事件的流程</span><br><span class=\"line\"></span><br><span class=\"line\">看代码可以知道 如果是ACTION_DOWN事件  那就肯定进入 是否要拦截事件的流程</span><br><span class=\"line\"></span><br><span class=\"line\">如果不是ACTION_DOWN事件 那就要看mFirstTouchTarget != null 这个条件是否成立</span><br><span class=\"line\"></span><br><span class=\"line\">这个地方有点绕但是也好理解，其实就是 对于一个事件序列来说 down是事件的开头 所以肯定进入了这个事件是否拦截的流程 也就是if 括号内。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">mFirstTouchTarget其实是一个单链表结构他指向的是 成功处理事件的子元素。</span><br><span class=\"line\"></span><br><span class=\"line\">也就是说 如果有子元素成功处理了 事件，那这个值就不为NULL。反过来说</span><br><span class=\"line\"></span><br><span class=\"line\">只要viewgroup拦截了事件，mFirstTouchTarget就不为NULL，所以括号内就不会执行，也就侧面说明了一个结论：</span><br><span class=\"line\"></span><br><span class=\"line\">某个view 一旦决定拦截事件，那么这个事件所属的事件序列 都只能由他来执行。并且onInterceptTouchEvent 这个方法不会被调用了</span><br><span class=\"line\"></span><br><span class=\"line\">            final boolean intercepted;</span><br><span class=\"line\">            if (actionMasked == MotionEvent.ACTION_DOWN</span><br><span class=\"line\">                    || mFirstTouchTarget != null) &#123;</span><br><span class=\"line\">                final boolean disallowIntercept = (mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != 0;</span><br><span class=\"line\">                if (!disallowIntercept) &#123;</span><br><span class=\"line\">                    intercepted = onInterceptTouchEvent(ev);</span><br><span class=\"line\">                    ev.setAction(action); // restore action in case it was changed</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    intercepted = false;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                // There are no touch targets and this action is not an initial down</span><br><span class=\"line\">                // so this view group continues to intercept touches.</span><br><span class=\"line\">                intercepted = true;</span><br><span class=\"line\">            &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>.如果某个view 处理事件的时候 没有消耗down事件 会有什么结果？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">假如一个view，在down事件来的时候 他的onTouchEvent返回false， 那么这个down事件 所属的事件序列 就是他后续的move 和up 都不会给他处理了，全部都给他的父view处理。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果view 不消耗move或者up事件 会有什么结果？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">那这个事件所属的事件序列就消失了，父view也不会处理的，最终都给activity 去处理了。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>.ViewGroup 默认拦截事件吗？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">默认不拦截任何事件，onInterceptTouchEvent返回的是false。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>.requestDisallowInterceptTouchEvent 可以在子元素中干扰父元素的事件分发吗？如果可以，是全部都可以干扰吗？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">肯定可以，但是down事件干扰不了。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>dispatchTouchEvent每次都会被调用吗？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">是的，onInterceptTouchEvent则不会。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>滑动冲突问题如何解决 思路是什么？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">要解决滑动冲突 其实最主要的就是有一个核心思想。你到底想在一个事件序列中，让哪个view 来响应你的滑动？比如 从上到下滑，是哪个view来处理这个事件，从左到右呢？</span><br><span class=\"line\"></span><br><span class=\"line\">用业务需求 来想明白以后 剩下的 其实就很好做了。核心的方法 就是2个 外部拦截也就是父亲拦截，另外就是内部拦截，也就是子view拦截法。 学会这2种 基本上所有的滑动冲突</span><br><span class=\"line\"></span><br><span class=\"line\">都是这2种的变种，而且核心代码思想都一样。</span><br><span class=\"line\"></span><br><span class=\"line\">外部拦截法：思路就是重写父容器的onInterceptTouchEvent即可。子元素一般不需要管。可以很容易理解，因为这和android自身的事件处理机制 逻辑是一模一样的</span><br><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\">    public boolean onInterceptTouchEvent(MotionEvent ev) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        boolean intercepted = false;</span><br><span class=\"line\">        int x = (int) ev.getX();</span><br><span class=\"line\">        int y = (int) ev.getY();</span><br><span class=\"line\"></span><br><span class=\"line\">        switch (ev.getAction()) &#123;</span><br><span class=\"line\">            //down事件肯定不能拦截 拦截了后面的就收不到了</span><br><span class=\"line\">            case MotionEvent.ACTION_DOWN:</span><br><span class=\"line\">                intercepted = false;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            case MotionEvent.ACTION_MOVE:</span><br><span class=\"line\">                if (你的业务需求) &#123;</span><br><span class=\"line\">                    //如果确定拦截了 就去自己的onTouchEvent里 处理拦截之后的操作和效果 即可了</span><br><span class=\"line\">                    intercepted = true;</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    intercepted = false;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            case MotionEvent.ACTION_UP:</span><br><span class=\"line\">                //up事件 我们一般都是返回false的 一般父容器都不会拦截他。 因为up是事件的最后一步。这里返回true也没啥意义</span><br><span class=\"line\">                //唯一的意义就是因为 父元素 up被拦截。导致子元素 收不到up事件，那子元素 就肯定没有onClick事件触发了，这里的</span><br><span class=\"line\">                //小细节 要想明白</span><br><span class=\"line\">                intercepted = false;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            default:</span><br><span class=\"line\">                break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return intercepted;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">内部拦截法：内部拦截法稍微复杂一点，就是事件到来的时候，父容器不管，让子元素自己来决定是否处理。如果消耗了 就最好，没消耗 自然就转给父容器处理了。</span><br><span class=\"line\"></span><br><span class=\"line\">子元素代码：</span><br><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\">    public boolean dispatchTouchEvent(MotionEvent event) &#123;</span><br><span class=\"line\">        int x = (int) event.getX();</span><br><span class=\"line\">        int y = (int) event.getY();</span><br><span class=\"line\">        switch (event.getAction()) &#123;</span><br><span class=\"line\">            case MotionEvent.ACTION_DOWN:</span><br><span class=\"line\">                getParent().requestDisallowInterceptTouchEvent(true);</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            case MotionEvent.ACTION_MOVE:</span><br><span class=\"line\">                if (如果父容器需要这个点击事件) &#123;</span><br><span class=\"line\">                    getParent().requestDisallowInterceptTouchEvent(false);</span><br><span class=\"line\">                &#125;//否则的话 就交给自己本身view的onTouchEvent自动处理了</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            case MotionEvent.ACTION_UP:</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            default:</span><br><span class=\"line\">                break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return super.dispatchTouchEvent(event);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">父亲容器代码也要修改一下，其实就是保证父亲别拦截down：</span><br><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\">    public boolean onInterceptTouchEvent(MotionEvent ev) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (ev.getAction() == MotionEvent.ACTION_DOWN) &#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>事件来源</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">InputEvent有2个子类：KeyEvent和MotionEvent，其中KeyEvent表示键盘事件，而MotionEvent表示点击事件</span><br></pre></td></tr></table></figure>\n<ul>\n<li>基于监听的事件监听器</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">View.OnClickListener    // 单击事件</span><br><span class=\"line\">View.OnCreateContextMenuListener    // 创建上下文菜单事件</span><br><span class=\"line\">View.OnFocusChangeListener    // 焦点改变事件</span><br><span class=\"line\">View.OnKeyListener    // 按钮事件</span><br><span class=\"line\">View.OnLongClickListener    // 长点击事件</span><br><span class=\"line\">View.OnTouchListener    // 触摸屏事件</span><br></pre></td></tr></table></figure>\n<ul>\n<li>基于回调的事件处理</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   boolean onKeyDown(int keyCode, KeyEvent event)    // 按下</span><br><span class=\"line\">boolean onKeyLongPress(int keyCode, KeyEvent event)    // 长按</span><br><span class=\"line\">boolean onKeyUp(int keyCode, KeyEvent event)    // 松开</span><br><span class=\"line\">boolean onKeyShortcut(int keyCode, KeyEvent event)        // 键盘快捷键触发时</span><br><span class=\"line\">boolean onTouchEvent(MotionEvent event)        // 触摸屏事件</span><br><span class=\"line\"></span><br><span class=\"line\">基于监听的事件处理更有优势：可维护性高、保证监听的事件监听器会被优先触发。</span><br><span class=\"line\">基于回调的事件处理更适合于那些比较固定的View。</span><br><span class=\"line\"></span><br><span class=\"line\">    *事件传递*</span><br><span class=\"line\"></span><br><span class=\"line\">所有基于回调的事件处理的回调方法返回true，表明已处理完成，不会继续传递；返回false，表明未处理完成，该事件继续传递下去。</span><br><span class=\"line\"></span><br><span class=\"line\">当某个键被按下时候，Android最先触发的是该按键上绑定的事件监听器，然后触发该组件提供的事件回调方法，最后传递到该组件所在的Activity。</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">一种是委托式一种是回调式。第一种就是将事件的处理委托给监听器处理，你可以定义一个View.OnTouchListener接口的子类作为监听器，其中有onTouch()方法。而第二种是重写View类自己本身的onTouchEvent方法，也就是控件自己处理事件。onTouch方法接收一个MotionEvent参数和一个View参数，而onTouchEvent方法仅接收MotionEvent参数。这是因为监听器可以监听多个View控件的事件。无论是通过onTouchEvent还是onTouch方法 它们的返回值都是boolean类型。true的含义是如果当前处理程序在处理完毕该事件后不希望传播给其他控件，则返回true。如果View对象不但对此事件不感兴趣，而且对与此触摸序列相关的任何未来事件都不感兴趣，那么返回false。比如如果Button的onTouchEvent方法想要处理用户的一次点击 则会有2个事件产生ACTION_DOWN和ACTION_UP，按道理这两个事件都会调用onTouchEvent方法，如果方法返回false则在按下时你可以做一些操作，但是手指抬起时你将不能再接收到MotionEvent对象了，所以你也就无从处理抬起事件了。</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>"},{"title":"自定义View的疑问","date":"2016-05-30T12:02:50.000Z","toc":true,"_content":"- invalidate()方法 ：\n\n`   说明：请求重绘View树，即draw()过程，假如视图发生大小没有变化就不会调用layout()过程，并且只绘制那些“需要重绘的”\n视图，即谁(View的话，只绘制该View ；ViewGroup，则绘制整个ViewGroup)请求invalidate()方法，就绘制该视图。\n \n   一般引起invalidate()操作的函数如下：\n   1、直接调用invalidate()方法，请求重新draw()，但只会绘制调用者本身。\n   \n   2、setSelection()方法 ：请求重新draw()，但只会绘制调用者本身。\n   \n   3、setVisibility()方法 ： 当View可视状态在INVISIBLE转换VISIBLE时，会间接调用invalidate()方法 继而绘制该View。\n  \n   4 、setEnabled()方法 ： 请求重新draw()，但不会重新绘制任何视图包括该调用者本身。`\n\n<!-- more-->\n\n- requestLayout()方法 \n\n\n \n`：会导致调用measure()过程 和 layout()过程 。\n \n说明：只是对View树重新布局layout过程包括measure()和layout()过程，不会调用draw()过程，但不会重新绘制\n\n任何视图包括该调用者本身。\n \n 一般引起invalidate()操作的函数如下：\n 1、setVisibility()方法：\n 当View的可视状态在INVISIBLE/ VISIBLE 转换为GONE状态时，会间接调用requestLayout() 和invalidate方法。\n 同时，由于整个个View树大小发生了变化，会请求measure()过程以及draw()过程，同样地，只绘制需要“重新绘制”的视图。`\n    \n \n-  requestFocus()函数说明：\n```\n          说明：请求View树的draw()过程，但只绘制“需要重绘”的视图。\n```\n- View的坐标参数 主要有哪些？分别有什么注意的要点？\n\n```\n Left，Right，top,Bottom 注意这4个值其实就是 view 和 他的父控件的 相对坐标值。 并非是距离屏幕左上角的绝对值，这点要注意。\n　\n　此外，X和Y 其实也是相对于父控件的坐标值。 TranslationX,TranslationY 这2个值 默认都为0，是相对于父控件的左上角的偏移量。\n　\n　换算关系：\n　\n　x=left+tranX,y=top+tranY.\n　 \n  很多人不理解，为什么事这样，其实就是View 如果有移动的话，比如平移这种，你们就要注意了，top和left 这种值 是不会变化的。\n   \n   无论你把view怎么拖动，但是 x,y,tranX,tranY 的值是随着拖动平移 而变化的。想明白这点 就行了。\n   \n```\n- onTouchEvent和GestureDetector 在什么时候用哪个比较好\n\n```\n只有滑动需求的时候 就用前者，如果有双击等这种行为的时候 就用后者。\n\n```\n- .Scroller 用来解决什么问题？\n\n```\nview的scrollTo和scrollBy 滑动效果太差了，是瞬间完成。而scroller可以配合view的computeScroll 来完成 渐变的滑动效果。体验更好。\n\n```\n- ScrollTo和ScrollBy 有什么需要注意的？\n\n```\n前者是绝对滑动，后者是相对滑动。滑动的是view的内容 而不是view本身。这很重要。比如textview 调用这2个方法  滑动的就是显示出来的字的内容。\n\n一般而言 我们用scrollBy会比较多一些。传值的话 其实 记住几个法则就可以了。 右-左 x为正 否则x为负  上-下 y为负，否则y为正。\n\n可以稍微看一下 这2个的源码：\npublic void scrollTo(int x, int y) {\n        if (mScrollX != x || mScrollY != y) {\n            int oldX = mScrollX;\n            int oldY = mScrollY;\n            mScrollX = x;\n            mScrollY = y;\n            invalidateParentCaches();\n            onScrollChanged(mScrollX, mScrollY, oldX, oldY);\n            if (!awakenScrollBars()) {\n                postInvalidateOnAnimation();\n            }\n        }\n    }\n\n public void scrollBy(int x, int y) {\n        scrollTo(mScrollX + x, mScrollY + y);\n    }\n\n看到里面有2个变量 mScrollX 和mScrollY 这2个东西没，这2个单位的 值是像素，前者代表 view的左边缘和view内容左边缘的距离。 后者代表 view上边缘和view内容上边缘的距离。\n\n```\n- 让view滑动总共有几种方式，分别要注意什么？都适用于那些场景？\n\n```\n总共有三种：\n\na：scrollto，scrollby。这种是最简单的，但是只能滑动view的内容 不可以滑动view本身。\n\nb：动画。动画可以滑动view内容，但是注意非属性动画 就如我们问题5说的内容 会影响到交互，使用的时候要多注意。不过多数复杂的滑动效果都是属性动画来完成的，属于大杀器级别、\n\nc：改变布局参数。这种最好理解了，无非是动态的通过java代码来修改 margin等view的参数罢了。不过用的比较少。我本人不怎么用这种方法。\n\n```\n- .Scroller是干嘛的？原理是什么？\n\n```\n```\n\n- getWidth()与getMeasuredWidth()`有什么区别呢？ \n\n```\n一般情况下这两个的值是相同的，`getMeasureWidth()`方法在`measure()`过程结束后就可以获取到了，而`getWidth()`方法要在`layout()`过程结束后才能获取到。\n而且`getMeasureWidth()`的值是通过`setMeasuredDimension()`设置的，但是`getWidth()`的值是通过视图右边的坐标减去左边的坐标计算出来的。如果我们在`layout`的时候将宽高\n不传`getMeasureWidth`的值，那么这时候`getWidth()`与`getMeasuredWidth`的值就不会再相同了，当然一般也不会这么干...\n\n```\n\n","source":"_posts/自定义View的疑问.md","raw":"---\ntitle: 自定义View的疑问\ndate: 2016-05-30 20:02:50\ntags: View\ncategories: View\ntoc: true \n---\n- invalidate()方法 ：\n\n`   说明：请求重绘View树，即draw()过程，假如视图发生大小没有变化就不会调用layout()过程，并且只绘制那些“需要重绘的”\n视图，即谁(View的话，只绘制该View ；ViewGroup，则绘制整个ViewGroup)请求invalidate()方法，就绘制该视图。\n \n   一般引起invalidate()操作的函数如下：\n   1、直接调用invalidate()方法，请求重新draw()，但只会绘制调用者本身。\n   \n   2、setSelection()方法 ：请求重新draw()，但只会绘制调用者本身。\n   \n   3、setVisibility()方法 ： 当View可视状态在INVISIBLE转换VISIBLE时，会间接调用invalidate()方法 继而绘制该View。\n  \n   4 、setEnabled()方法 ： 请求重新draw()，但不会重新绘制任何视图包括该调用者本身。`\n\n<!-- more-->\n\n- requestLayout()方法 \n\n\n \n`：会导致调用measure()过程 和 layout()过程 。\n \n说明：只是对View树重新布局layout过程包括measure()和layout()过程，不会调用draw()过程，但不会重新绘制\n\n任何视图包括该调用者本身。\n \n 一般引起invalidate()操作的函数如下：\n 1、setVisibility()方法：\n 当View的可视状态在INVISIBLE/ VISIBLE 转换为GONE状态时，会间接调用requestLayout() 和invalidate方法。\n 同时，由于整个个View树大小发生了变化，会请求measure()过程以及draw()过程，同样地，只绘制需要“重新绘制”的视图。`\n    \n \n-  requestFocus()函数说明：\n```\n          说明：请求View树的draw()过程，但只绘制“需要重绘”的视图。\n```\n- View的坐标参数 主要有哪些？分别有什么注意的要点？\n\n```\n Left，Right，top,Bottom 注意这4个值其实就是 view 和 他的父控件的 相对坐标值。 并非是距离屏幕左上角的绝对值，这点要注意。\n　\n　此外，X和Y 其实也是相对于父控件的坐标值。 TranslationX,TranslationY 这2个值 默认都为0，是相对于父控件的左上角的偏移量。\n　\n　换算关系：\n　\n　x=left+tranX,y=top+tranY.\n　 \n  很多人不理解，为什么事这样，其实就是View 如果有移动的话，比如平移这种，你们就要注意了，top和left 这种值 是不会变化的。\n   \n   无论你把view怎么拖动，但是 x,y,tranX,tranY 的值是随着拖动平移 而变化的。想明白这点 就行了。\n   \n```\n- onTouchEvent和GestureDetector 在什么时候用哪个比较好\n\n```\n只有滑动需求的时候 就用前者，如果有双击等这种行为的时候 就用后者。\n\n```\n- .Scroller 用来解决什么问题？\n\n```\nview的scrollTo和scrollBy 滑动效果太差了，是瞬间完成。而scroller可以配合view的computeScroll 来完成 渐变的滑动效果。体验更好。\n\n```\n- ScrollTo和ScrollBy 有什么需要注意的？\n\n```\n前者是绝对滑动，后者是相对滑动。滑动的是view的内容 而不是view本身。这很重要。比如textview 调用这2个方法  滑动的就是显示出来的字的内容。\n\n一般而言 我们用scrollBy会比较多一些。传值的话 其实 记住几个法则就可以了。 右-左 x为正 否则x为负  上-下 y为负，否则y为正。\n\n可以稍微看一下 这2个的源码：\npublic void scrollTo(int x, int y) {\n        if (mScrollX != x || mScrollY != y) {\n            int oldX = mScrollX;\n            int oldY = mScrollY;\n            mScrollX = x;\n            mScrollY = y;\n            invalidateParentCaches();\n            onScrollChanged(mScrollX, mScrollY, oldX, oldY);\n            if (!awakenScrollBars()) {\n                postInvalidateOnAnimation();\n            }\n        }\n    }\n\n public void scrollBy(int x, int y) {\n        scrollTo(mScrollX + x, mScrollY + y);\n    }\n\n看到里面有2个变量 mScrollX 和mScrollY 这2个东西没，这2个单位的 值是像素，前者代表 view的左边缘和view内容左边缘的距离。 后者代表 view上边缘和view内容上边缘的距离。\n\n```\n- 让view滑动总共有几种方式，分别要注意什么？都适用于那些场景？\n\n```\n总共有三种：\n\na：scrollto，scrollby。这种是最简单的，但是只能滑动view的内容 不可以滑动view本身。\n\nb：动画。动画可以滑动view内容，但是注意非属性动画 就如我们问题5说的内容 会影响到交互，使用的时候要多注意。不过多数复杂的滑动效果都是属性动画来完成的，属于大杀器级别、\n\nc：改变布局参数。这种最好理解了，无非是动态的通过java代码来修改 margin等view的参数罢了。不过用的比较少。我本人不怎么用这种方法。\n\n```\n- .Scroller是干嘛的？原理是什么？\n\n```\n```\n\n- getWidth()与getMeasuredWidth()`有什么区别呢？ \n\n```\n一般情况下这两个的值是相同的，`getMeasureWidth()`方法在`measure()`过程结束后就可以获取到了，而`getWidth()`方法要在`layout()`过程结束后才能获取到。\n而且`getMeasureWidth()`的值是通过`setMeasuredDimension()`设置的，但是`getWidth()`的值是通过视图右边的坐标减去左边的坐标计算出来的。如果我们在`layout`的时候将宽高\n不传`getMeasureWidth`的值，那么这时候`getWidth()`与`getMeasuredWidth`的值就不会再相同了，当然一般也不会这么干...\n\n```\n\n","slug":"自定义View的疑问","published":1,"updated":"2016-05-30T12:15:08.176Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciou5387n000if0vcdrrbzpfq","content":"<ul>\n<li>invalidate()方法 ：</li>\n</ul>\n<p>`   说明：请求重绘View树，即draw()过程，假如视图发生大小没有变化就不会调用layout()过程，并且只绘制那些“需要重绘的”<br>视图，即谁(View的话，只绘制该View ；ViewGroup，则绘制整个ViewGroup)请求invalidate()方法，就绘制该视图。</p>\n<p>   一般引起invalidate()操作的函数如下：<br>   1、直接调用invalidate()方法，请求重新draw()，但只会绘制调用者本身。</p>\n<p>   2、setSelection()方法 ：请求重新draw()，但只会绘制调用者本身。</p>\n<p>   3、setVisibility()方法 ： 当View可视状态在INVISIBLE转换VISIBLE时，会间接调用invalidate()方法 继而绘制该View。</p>\n<p>   4 、setEnabled()方法 ： 请求重新draw()，但不会重新绘制任何视图包括该调用者本身。`</p>\n<a id=\"more\"></a>\n<ul>\n<li>requestLayout()方法 </li>\n</ul>\n<p>`：会导致调用measure()过程 和 layout()过程 。</p>\n<p>说明：只是对View树重新布局layout过程包括measure()和layout()过程，不会调用draw()过程，但不会重新绘制</p>\n<p>任何视图包括该调用者本身。</p>\n<p> 一般引起invalidate()操作的函数如下：<br> 1、setVisibility()方法：<br> 当View的可视状态在INVISIBLE/ VISIBLE 转换为GONE状态时，会间接调用requestLayout() 和invalidate方法。<br> 同时，由于整个个View树大小发生了变化，会请求measure()过程以及draw()过程，同样地，只绘制需要“重新绘制”的视图。`</p>\n<ul>\n<li><p>requestFocus()函数说明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">说明：请求View树的draw()过程，但只绘制“需要重绘”的视图。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>View的坐标参数 主要有哪些？分别有什么注意的要点？</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Left，Right，top,Bottom 注意这4个值其实就是 view 和 他的父控件的 相对坐标值。 并非是距离屏幕左上角的绝对值，这点要注意。</span><br><span class=\"line\">　</span><br><span class=\"line\">　此外，X和Y 其实也是相对于父控件的坐标值。 TranslationX,TranslationY 这2个值 默认都为0，是相对于父控件的左上角的偏移量。</span><br><span class=\"line\">　</span><br><span class=\"line\">　换算关系：</span><br><span class=\"line\">　</span><br><span class=\"line\">　x=left+tranX,y=top+tranY.</span><br><span class=\"line\">　 </span><br><span class=\"line\"> 很多人不理解，为什么事这样，其实就是View 如果有移动的话，比如平移这种，你们就要注意了，top和left 这种值 是不会变化的。</span><br><span class=\"line\">  </span><br><span class=\"line\">  无论你把view怎么拖动，但是 x,y,tranX,tranY 的值是随着拖动平移 而变化的。想明白这点 就行了。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>onTouchEvent和GestureDetector 在什么时候用哪个比较好</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">只有滑动需求的时候 就用前者，如果有双击等这种行为的时候 就用后者。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>.Scroller 用来解决什么问题？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">view的scrollTo和scrollBy 滑动效果太差了，是瞬间完成。而scroller可以配合view的computeScroll 来完成 渐变的滑动效果。体验更好。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>ScrollTo和ScrollBy 有什么需要注意的？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">前者是绝对滑动，后者是相对滑动。滑动的是view的内容 而不是view本身。这很重要。比如textview 调用这2个方法  滑动的就是显示出来的字的内容。</span><br><span class=\"line\"></span><br><span class=\"line\">一般而言 我们用scrollBy会比较多一些。传值的话 其实 记住几个法则就可以了。 右-左 x为正 否则x为负  上-下 y为负，否则y为正。</span><br><span class=\"line\"></span><br><span class=\"line\">可以稍微看一下 这2个的源码：</span><br><span class=\"line\">public void scrollTo(int x, int y) &#123;</span><br><span class=\"line\">        if (mScrollX != x || mScrollY != y) &#123;</span><br><span class=\"line\">            int oldX = mScrollX;</span><br><span class=\"line\">            int oldY = mScrollY;</span><br><span class=\"line\">            mScrollX = x;</span><br><span class=\"line\">            mScrollY = y;</span><br><span class=\"line\">            invalidateParentCaches();</span><br><span class=\"line\">            onScrollChanged(mScrollX, mScrollY, oldX, oldY);</span><br><span class=\"line\">            if (!awakenScrollBars()) &#123;</span><br><span class=\"line\">                postInvalidateOnAnimation();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> public void scrollBy(int x, int y) &#123;</span><br><span class=\"line\">        scrollTo(mScrollX + x, mScrollY + y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">看到里面有2个变量 mScrollX 和mScrollY 这2个东西没，这2个单位的 值是像素，前者代表 view的左边缘和view内容左边缘的距离。 后者代表 view上边缘和view内容上边缘的距离。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>让view滑动总共有几种方式，分别要注意什么？都适用于那些场景？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">总共有三种：</span><br><span class=\"line\"></span><br><span class=\"line\">a：scrollto，scrollby。这种是最简单的，但是只能滑动view的内容 不可以滑动view本身。</span><br><span class=\"line\"></span><br><span class=\"line\">b：动画。动画可以滑动view内容，但是注意非属性动画 就如我们问题5说的内容 会影响到交互，使用的时候要多注意。不过多数复杂的滑动效果都是属性动画来完成的，属于大杀器级别、</span><br><span class=\"line\"></span><br><span class=\"line\">c：改变布局参数。这种最好理解了，无非是动态的通过java代码来修改 margin等view的参数罢了。不过用的比较少。我本人不怎么用这种方法。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>.Scroller是干嘛的？原理是什么？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\">- getWidth()与getMeasuredWidth()`有什么区别呢？</span><br></pre></td></tr></table></figure>\n<p>一般情况下这两个的值是相同的，<code>getMeasureWidth()</code>方法在<code>measure()</code>过程结束后就可以获取到了，而<code>getWidth()</code>方法要在<code>layout()</code>过程结束后才能获取到。<br>而且<code>getMeasureWidth()</code>的值是通过<code>setMeasuredDimension()</code>设置的，但是<code>getWidth()</code>的值是通过视图右边的坐标减去左边的坐标计算出来的。如果我们在<code>layout</code>的时候将宽高<br>不传<code>getMeasureWidth</code>的值，那么这时候<code>getWidth()</code>与<code>getMeasuredWidth</code>的值就不会再相同了，当然一般也不会这么干…</p>\n<p>```</p>\n","excerpt":"<ul>\n<li>invalidate()方法 ：</li>\n</ul>\n<p>`   说明：请求重绘View树，即draw()过程，假如视图发生大小没有变化就不会调用layout()过程，并且只绘制那些“需要重绘的”<br>视图，即谁(View的话，只绘制该View ；ViewGroup，则绘制整个ViewGroup)请求invalidate()方法，就绘制该视图。</p>\n<p>   一般引起invalidate()操作的函数如下：<br>   1、直接调用invalidate()方法，请求重新draw()，但只会绘制调用者本身。</p>\n<p>   2、setSelection()方法 ：请求重新draw()，但只会绘制调用者本身。</p>\n<p>   3、setVisibility()方法 ： 当View可视状态在INVISIBLE转换VISIBLE时，会间接调用invalidate()方法 继而绘制该View。</p>\n<p>   4 、setEnabled()方法 ： 请求重新draw()，但不会重新绘制任何视图包括该调用者本身。`</p>","more":"<ul>\n<li>requestLayout()方法 </li>\n</ul>\n<p>`：会导致调用measure()过程 和 layout()过程 。</p>\n<p>说明：只是对View树重新布局layout过程包括measure()和layout()过程，不会调用draw()过程，但不会重新绘制</p>\n<p>任何视图包括该调用者本身。</p>\n<p> 一般引起invalidate()操作的函数如下：<br> 1、setVisibility()方法：<br> 当View的可视状态在INVISIBLE/ VISIBLE 转换为GONE状态时，会间接调用requestLayout() 和invalidate方法。<br> 同时，由于整个个View树大小发生了变化，会请求measure()过程以及draw()过程，同样地，只绘制需要“重新绘制”的视图。`</p>\n<ul>\n<li><p>requestFocus()函数说明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">说明：请求View树的draw()过程，但只绘制“需要重绘”的视图。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>View的坐标参数 主要有哪些？分别有什么注意的要点？</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Left，Right，top,Bottom 注意这4个值其实就是 view 和 他的父控件的 相对坐标值。 并非是距离屏幕左上角的绝对值，这点要注意。</span><br><span class=\"line\">　</span><br><span class=\"line\">　此外，X和Y 其实也是相对于父控件的坐标值。 TranslationX,TranslationY 这2个值 默认都为0，是相对于父控件的左上角的偏移量。</span><br><span class=\"line\">　</span><br><span class=\"line\">　换算关系：</span><br><span class=\"line\">　</span><br><span class=\"line\">　x=left+tranX,y=top+tranY.</span><br><span class=\"line\">　 </span><br><span class=\"line\"> 很多人不理解，为什么事这样，其实就是View 如果有移动的话，比如平移这种，你们就要注意了，top和left 这种值 是不会变化的。</span><br><span class=\"line\">  </span><br><span class=\"line\">  无论你把view怎么拖动，但是 x,y,tranX,tranY 的值是随着拖动平移 而变化的。想明白这点 就行了。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>onTouchEvent和GestureDetector 在什么时候用哪个比较好</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">只有滑动需求的时候 就用前者，如果有双击等这种行为的时候 就用后者。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>.Scroller 用来解决什么问题？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">view的scrollTo和scrollBy 滑动效果太差了，是瞬间完成。而scroller可以配合view的computeScroll 来完成 渐变的滑动效果。体验更好。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>ScrollTo和ScrollBy 有什么需要注意的？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">前者是绝对滑动，后者是相对滑动。滑动的是view的内容 而不是view本身。这很重要。比如textview 调用这2个方法  滑动的就是显示出来的字的内容。</span><br><span class=\"line\"></span><br><span class=\"line\">一般而言 我们用scrollBy会比较多一些。传值的话 其实 记住几个法则就可以了。 右-左 x为正 否则x为负  上-下 y为负，否则y为正。</span><br><span class=\"line\"></span><br><span class=\"line\">可以稍微看一下 这2个的源码：</span><br><span class=\"line\">public void scrollTo(int x, int y) &#123;</span><br><span class=\"line\">        if (mScrollX != x || mScrollY != y) &#123;</span><br><span class=\"line\">            int oldX = mScrollX;</span><br><span class=\"line\">            int oldY = mScrollY;</span><br><span class=\"line\">            mScrollX = x;</span><br><span class=\"line\">            mScrollY = y;</span><br><span class=\"line\">            invalidateParentCaches();</span><br><span class=\"line\">            onScrollChanged(mScrollX, mScrollY, oldX, oldY);</span><br><span class=\"line\">            if (!awakenScrollBars()) &#123;</span><br><span class=\"line\">                postInvalidateOnAnimation();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> public void scrollBy(int x, int y) &#123;</span><br><span class=\"line\">        scrollTo(mScrollX + x, mScrollY + y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">看到里面有2个变量 mScrollX 和mScrollY 这2个东西没，这2个单位的 值是像素，前者代表 view的左边缘和view内容左边缘的距离。 后者代表 view上边缘和view内容上边缘的距离。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>让view滑动总共有几种方式，分别要注意什么？都适用于那些场景？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">总共有三种：</span><br><span class=\"line\"></span><br><span class=\"line\">a：scrollto，scrollby。这种是最简单的，但是只能滑动view的内容 不可以滑动view本身。</span><br><span class=\"line\"></span><br><span class=\"line\">b：动画。动画可以滑动view内容，但是注意非属性动画 就如我们问题5说的内容 会影响到交互，使用的时候要多注意。不过多数复杂的滑动效果都是属性动画来完成的，属于大杀器级别、</span><br><span class=\"line\"></span><br><span class=\"line\">c：改变布局参数。这种最好理解了，无非是动态的通过java代码来修改 margin等view的参数罢了。不过用的比较少。我本人不怎么用这种方法。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>.Scroller是干嘛的？原理是什么？</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\">- getWidth()与getMeasuredWidth()`有什么区别呢？</span><br></pre></td></tr></table></figure>\n<p>一般情况下这两个的值是相同的，<code>getMeasureWidth()</code>方法在<code>measure()</code>过程结束后就可以获取到了，而<code>getWidth()</code>方法要在<code>layout()</code>过程结束后才能获取到。<br>而且<code>getMeasureWidth()</code>的值是通过<code>setMeasuredDimension()</code>设置的，但是<code>getWidth()</code>的值是通过视图右边的坐标减去左边的坐标计算出来的。如果我们在<code>layout</code>的时候将宽高<br>不传<code>getMeasureWidth</code>的值，那么这时候<code>getWidth()</code>与<code>getMeasuredWidth</code>的值就不会再相同了，当然一般也不会这么干…</p>\n<p>```</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ciou5385h0001f0vcbkr00yqp","category_id":"ciou5386b0005f0vcogvi15ep","_id":"ciou5387a000df0vc7xvfvomr"},{"post_id":"ciou53871000cf0vcpb3sab9n","category_id":"ciou5386v000af0vcfphm21ti","_id":"ciou5387u000kf0vc2jfqw01p"},{"post_id":"ciou5385y0003f0vcmoingku6","category_id":"ciou5386v000af0vcfphm21ti","_id":"ciou5387z000of0vc07qlneen"},{"post_id":"ciou5387b000ef0vch2zcsqtl","category_id":"ciou5386v000af0vcfphm21ti","_id":"ciou53880000qf0vc89s8tter"},{"post_id":"ciou5387n000if0vcdrrbzpfq","category_id":"ciou5386v000af0vcfphm21ti","_id":"ciou53883000uf0vccgto7da7"},{"post_id":"ciou5386d0006f0vc06400pfs","category_id":"ciou5386b0005f0vcogvi15ep","_id":"ciou53885000wf0vcekz4ct3l"},{"post_id":"ciou5386k0007f0vcstcxrhpk","category_id":"ciou5387w000lf0vc6b06atrl","_id":"ciou53889000yf0vcytmlhx5v"},{"post_id":"ciou5386q0009f0vchotlf5wd","category_id":"ciou53881000sf0vcfpgmvvi9","_id":"ciou5388b0010f0vc95zrvol9"}],"PostTag":[{"post_id":"ciou5385h0001f0vcbkr00yqp","tag_id":"ciou538660004f0vc68hayukw","_id":"ciou53870000bf0vcup9pisq2"},{"post_id":"ciou53871000cf0vcpb3sab9n","tag_id":"ciou5386o0008f0vcy5wihwn0","_id":"ciou5387h000hf0vcx3vrecmi"},{"post_id":"ciou5385y0003f0vcmoingku6","tag_id":"ciou5386o0008f0vcy5wihwn0","_id":"ciou5387t000jf0vcx1z83myw"},{"post_id":"ciou5387b000ef0vch2zcsqtl","tag_id":"ciou5386o0008f0vcy5wihwn0","_id":"ciou5387y000nf0vcu6wyaf7b"},{"post_id":"ciou5387n000if0vcdrrbzpfq","tag_id":"ciou5386o0008f0vcy5wihwn0","_id":"ciou53880000pf0vce3i4h9xe"},{"post_id":"ciou5386d0006f0vc06400pfs","tag_id":"ciou5387f000ff0vcecxdh4sy","_id":"ciou53881000rf0vccvtbspvy"},{"post_id":"ciou5386k0007f0vcstcxrhpk","tag_id":"ciou538660004f0vc68hayukw","_id":"ciou53884000vf0vci14egnt0"},{"post_id":"ciou5386k0007f0vcstcxrhpk","tag_id":"ciou5387x000mf0vcb46jbuyo","_id":"ciou53888000xf0vcpr209c1g"},{"post_id":"ciou5386q0009f0vchotlf5wd","tag_id":"ciou53882000tf0vc9vf5mlkt","_id":"ciou5388a000zf0vcndn82lyz"}],"Tag":[{"name":"Bitmap","_id":"ciou538660004f0vc68hayukw"},{"name":"View","_id":"ciou5386o0008f0vcy5wihwn0"},{"name":"线程","_id":"ciou5387f000ff0vcecxdh4sy"},{"name":"Drawable","_id":"ciou5387x000mf0vcb46jbuyo"},{"name":"Handler","_id":"ciou53882000tf0vc9vf5mlkt"}]}}